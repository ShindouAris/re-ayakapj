import disnake
from gtts import gTTS
from disnake.ext import commands
from disnake import FFmpegPCMAudio
import asyncio
import re
import platform
import traceback

import os
from utils.client import BotCore as Client
from utils.others import CommandArgparse, pool_command, CustomContext
from utils.music.checks import check_voice




async def check_lang(lang):
    pattern = r"^[a-z]{2}$"
    return bool(re.match(pattern, lang))

async def process_tts(text, guild_id, channel_id, lang, bot_id):
    tts = gTTS(text, lang=lang)
    if not os.path.exists(f'./data_tts/{bot_id}/{guild_id}'):
        os.makedirs(f'./data_tts/{bot_id}/{guild_id}')
    tts.save(f'./data_tts/{bot_id}/{guild_id}/{channel_id}_tts.mp3')

class TTS(commands.Cog):
    emoji = "üîä"
    name = "TTS"
    desc_prefix = f"[{emoji} {name}] | "

    def __init__(self, bot: Client):
        self.bot = bot

    say_flags = CommandArgparse()
    say_flags.add_argument("text", nargs="*", help="VƒÉn b·∫£n c·∫ßn chuy·ªÉn th√†nh √¢m thanh")
    say_flags.add_argument("-lang", '-lg', type=str, default="vi", help="Ng√¥n ng·ªØ c·∫ßn chuy·ªÉn, m·∫∑c ƒë·ªãnh l√† ti·∫øng vi·ªát")

    @check_voice()
    @commands.cooldown(1, 5, commands.BucketType.user)
    @commands.max_concurrency(1, per=commands.BucketType.member, wait=False)
    @pool_command(description=f"{desc_prefix}T·∫°o √¢m thanh t·ª´ vƒÉn b·∫£n", extras={"flags": say_flags}, aliases=["s", "speak"])
    async def say(self, ctx: CustomContext, *, flags: str = ""):
        if platform.system() == "Windows":
            await ctx.channel.send("H√£y x√†i WSL ho·∫∑c ch·ªânh s·ª≠a l·∫°i c·∫•u tr√∫c code ƒë·ªÉ module n√†y ho·∫°t ƒë·ªông!")
            return

        FFMPEG_OPTIONS = {
        'before_options': '', 'options': '-vn'}

        args, unknown = ctx.command.extras['flags'].parse_known_args(flags.split())
        text = " ".join(args.text + unknown)
        
        if text.lower() == "gay":
            _gayvc = ctx.author.voice.channel
            try:
                vc = await _gayvc.connect()
            except Exception as e:
                if "Already connected to a voice channel" in str(e):
                    vc = ctx.author.guild.voice_client
                else:
                    vc = ctx.author.guild.voice_client
            try:
                vc.play(FFmpegPCMAudio(source="./Funny_sound/gay.mp3", **FFMPEG_OPTIONS))
                while vc.is_playing():
                    await asyncio.sleep(2)
            except Exception as e:
                if "ffmepg was not found" in str(e):
                    await ctx.channel.send("Kh√¥ng t√¨m th·∫•y ffmpeg, h√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£ ch·∫°y t·ªáp autoinstall.sh`")
                    traceback.print_exc()
                    return
                else:
                    traceback.print_exc()
                    await ctx.channel.send(f"C√≥ th·ªÉ bot ƒëang ph√°t nh·∫°c, vui l√≤ng t·∫Øt nh·∫°c v√† th·ª≠ l·∫°i :>")
                    return
        else:
        
            # Save TTS file
            try:
                check = await check_lang(args.lang)
                if check == False:
                    await ctx.channel.send("Ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£, n·∫øu b·∫°n mu·ªën x√†i ng√¥n ng·ªØ kh√°c h√£y ch·∫Øc ch·∫Øn l√† n√≥ l√† 2 k√≠ t·ª± ƒë·∫ßu c·ªßa ng√¥n ng·ªØ ƒë√≥, tham kh·∫£o trang web sau: [WEB](https://cloud.google.com/speech-to-text/docs/speech-to-text-supported-languages)")
                    return
                
                await process_tts(text, ctx.guild.id, ctx.channel.id, args.lang, ctx.bot.user.id)
            except Exception as e:
                if "Language not supported" in str(e):
                    await ctx.channel.send("Ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£, n·∫øu b·∫°n mu·ªën x√†i ng√¥n ng·ªØ kh√°c h√£y ch·∫Øc ch·∫Øn l√† n√≥ l√† 2 k√≠ t·ª± ƒë·∫ßu c·ªßa ng√¥n ng·ªØ ƒë√≥, v√≠ d·ª•: \njapan: ja.")
                    return
            
            
            channel = ctx.author.voice.channel
            
            try:
                vc = await channel.connect()
            except Exception as e:
                if "Already connected to a voice channel" in str(e):
                    vc = ctx.author.guild.voice_client
                else:
                    vc = ctx.author.guild.voice_client

            global channel_id, guild_id

            channel_id = ctx.channel.id
            guild_id = ctx.guild.id


            try:
                vc.play(FFmpegPCMAudio(f"./data_tts/{ctx.bot.user.id}/{guild_id}/{channel_id}_tts.mp3", **FFMPEG_OPTIONS))
                
                while vc.is_playing():
                    await asyncio.sleep(3)
            except Exception as e:
                if "ffmepg was not found" in str(e):
                    await ctx.channel.send("Kh√¥ng t√¨m th·∫•y ffmpeg, h√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£ ch·∫°y t·ªáp autoinstall.sh`")
                    traceback.print_exc()
                    return
                else:
                    traceback.print_exc()
                    await ctx.channel.send(f"C√≥ th·ªÉ bot ƒëang ph√°t nh·∫°c, vui l√≤ng t·∫Øt nh·∫°c v√† th·ª≠ l·∫°i :>")
                    return
            
    # async def delete_tts_data(guild, channel_id):
    #     try:
    #         os.remove(f"./data_tts/{guild}/{channel_id}_tts.mp3")
    #     except FileNotFoundError:
    #         pass
    #     except Exception as e:
    #         print(repr(e))
            

    @check_voice()
    @commands.command(description=f"{desc_prefix}Ng·∫Øt k·∫øt n·ªëi v·ªõi k√™nh tho·∫°i", aliases=["stoptts"])
    async def tts_stop(self, ctx: disnake.ApplicationCommandInteraction):
        vc = ctx.author.guild.voice_client
        if vc:
            await vc.disconnect()
            await ctx.channel.send("ƒê√£ ng·∫Øt k·∫øt n·ªëi v·ªõi k√™nh tho·∫°i.")
            try:
                os.remove(f"./data_tts/{ctx.bot.user.id}/{guild_id}/{channel_id}_tts.mp3")
            except FileNotFoundError:
                print("Error at line 122: File Not Found :<")
                pass
            except Exception as e:
                await ctx.channel.send(f"ƒê√£ x·∫£y ra l·ªói: {repr(e)}")
        else:
            await ctx.channel.send("T√¥i ƒëang kh√¥ng k·∫øt n·ªëi v·ªõi k√™nh tho·∫°i n√†o.")

def setup(bot: Client):
    bot.add_cog(TTS(bot))
