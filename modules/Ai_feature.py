# import ai module
import openai
from openai.error import *

import google.generativeai as genai

#####################################################################
import time

import traceback

import disnake
from disnake.ext import commands
from disnake import OptionType, OptionChoice

from utils.client import BotCore
from utils.others import CustomContext
from utils.GenEMBED import Embed
from utils.music.checks import can_send_message_check, can_send_message
from typing import Union

import datetime

import os
import dotenv

from asgiref.sync import sync_to_async

dotenv.load_dotenv()

openai.api_key = os.getenv("OPENAI_SEC")

genai.configure(api_key=os.environ['GEMINIAPI'])
        
desc_prefix = "‚ö°[AI]‚ö°"

model_info = {
    "gpt-3.5-turbo": {"name": "OpenAI GPT-3.5", "icon": "https://cdn.discordapp.com/attachments/1117362735911538768/1131924844603265054/img-1190-removebg-preview.png"},
    "gemini": {"name": "Gemini Ai", "icon": "https://www.gstatic.com/lamda/images/sparkle_resting_v2_darkmode_2bdb7df2724e450073ede.gif"},
}


generation_config = {
  "temperature": 1,
  "top_p": 1,
  "top_k": 1,
  "max_output_tokens": 2048,
}

chatgpt_cache = {}

def chatgpt(user_content: str, uid = None):
    global chatgpt_cache
    
    if len(chatgpt_cache) > 100: chatgpt_cache = {}
    
    if uid:
        try:
            messages = chatgpt_cache[uid]
        except KeyError:
            create_thread(uid)
            messages = chatgpt_cache[uid]
    else:
        messages = []
    
    messages.append({
        "role": "user",
        "content": user_content
    })

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=0.5,
        max_tokens=768
    )

    if uid:
        messages.append({
            "role": "assistant",
            "content": response.choices[0].message.content
        })

    return {
        "status": "success",
        "message": response.choices[0].message.content,
        "response_time": response.response_ms
    }

def create_thread(uid: int, sys_message: str = None):
    global chatgpt_cache
    messages = []
    if sys_message:
        messages.append({
            "role": "system",
            "content": sys_message
        })
    chatgpt_cache[uid] = messages

async def gemini_ai(user_content: str):
    model = genai.GenerativeModel('gemini-pro')
    chat = model.start_chat(history=[])
    response = chat.send_message(user_content, generation_config=generation_config)
    return {
        "status": "success",
        "message": response.text
    }

async def gemini_ai_vision(user_content: str, picture):
    model = genai.GenerativeModel('gemini-pro-vision')
    chat = model.start_chat(history=[])
    response = model.generate_content([user_content, picture], generation_config=generation_config)
    response.resolve(    )
    return {
        "status": "success",
        "message": response.text
    }




async def check_user(bot, ctx, uid, premium_check = False):
    userinfo = await bot.db_handler.get_userinfo(uid)
    if userinfo["status"] == "banned":
        await ctx.send(embed=Embed.gen_banned_embed(userinfo["time"], userinfo["ban_reason"]))
        return False
    if userinfo["status"] == "notfound":
        await ctx.send(embed=Embed.gen_nouser_embed(message="Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.\nH√£y s·ª≠ d·ª•ng l·ªánh `/register` ƒë·ªÉ ƒëƒÉng k√Ω."))
        return False
    if userinfo["status"] == "success":
        premium = userinfo["premium"] > int(disnake.utils.utcnow().timestamp())
        if premium_check and not premium:
            await ctx.send(embed=Embed.gen_error_embed("T√≠nh nƒÉng n√†y ch·ªâ d√†nh cho ng∆∞·ªùi d√πng Premium"))
            return False
        return {"status": "success", "premium": premium}


class ChatGPT(commands.Cog):
    def __init__(self, bot: BotCore) -> None:
        self.bot: commands.Bot = bot
        self.debugging = True

        self.error = AuthenticationError or APIError or RateLimitError or Timeout or APIConnectionError or ServiceUnavailableError or TryAgain    
    
    @can_send_message_check()
    @commands.cooldown(1, 20, commands.BucketType.user)
    @commands.slash_command(
        name="ai",
        description=f"{desc_prefix} T√≠nh nƒÉng AI c·ªßa bot"
    )
    async def ai(self, ctx: disnake.ApplicationCommandInteraction):
        return
    @ai.sub_command(
        name="chat",
        description=f"{desc_prefix} Chat v·ªõi m·ªôt trong c√°c model chatbot AI",
        options = [
            disnake.Option(name="content", description="N·ªôi dung chat", type=OptionType.string, required=True),
            disnake.Option(name="model", description="Model chatbot", type=OptionType.string, required=True, choices=[
                OptionChoice(name="GPT-3.5", value="gpt-3.5-turbo"),
                OptionChoice(name="Gemini (üëëPro, Th·ª≠ nghi·ªám)", value="gemini")
            ]),
            disnake.Option(name="private", description="Ch·∫ø ƒë·ªô ri√™ng t∆∞ (Y√™u c·∫ßu b·∫°n ph·∫£i b·∫≠t n·∫øu b·∫°n ·ªü tr√™n k√™nh chat ch√≠nh)", type=OptionType.boolean, required=False, choices=[
                OptionChoice(name="B·∫≠t", value=True),
                OptionChoice(name="T·∫Øt", value=False)
            ])
        ])
    async def chat(self, ctx: disnake.ApplicationCommandInteraction, content: str, model: str, private: bool = False):
            can_send_message(ctx.channel, ctx.bot.user)
            await ctx.response.defer(ephemeral=private)
            if len(content) > 2000:
                await ctx.edit_original_response(embed=Embed.gen_error_embed(message="C√¢u h·ªèi d√†i qu√°, h√£y th·ª≠ chia n√≥ ra nh√©"))
                return
            else:
                pass
            userinfo = await check_user(self.bot, ctx, ctx.author.id)
            if not userinfo: return
            else:
                try: 
                    premium = userinfo["premium"]
                    embed = disnake.Embed(
                        title="<a:loading:1119655713606729838> Vui l√≤ng ch·ªù. T√πy v√†o n·ªôi dung, qu√° tr√¨nh x·ª≠ l√Ω c√≥ th·ªÉ k√©o d√†i ƒë·∫øn 1-2 ph√∫t...",
                        color=disnake.Color.yellow()
                    )
                    await ctx.edit_original_response(embed=embed)
                    if model == "gpt-3.5-turbo":
                        response = await sync_to_async(chatgpt)(content, ctx.author.id if premium else None)
                    if model == "gemini":
                        # response = await gemini_ai(content)
                        await ctx.edit_original_response("Hi·ªán t·∫°i Model Gemini ƒëang b·ªã v√¥ hi·ªáu h√≥a do v√πng vps ƒëang host kh√¥ng h·ªó tr·ª£, vui l√≤ng th·ª≠ l·∫°i sau :<", embed=None)
                        return
                    if response["status"] == "error":
                        await ctx.edit_original_response(embed=Embed.gen_error_embed(response["message"])) # Nahhh
                        return
                    else:
                        use = await self.bot.db_handler.use(ctx.author.id, model, premium)
                        if use["status"] == "failed":
                            await ctx.edit_original_response(embed=Embed.gen_error_embed(use["reason"]))
                            return
                        used, left = use["used"], use["left"]

                except Exception:
                    await ctx.edit_original_response("ƒê√£ x·∫£y ra l·ªói", embed=None)
                    traceback.print_exc()
                    return
                    
                if len(response["message"]) <= 1850:
                    message = f"> ### Tr·∫£ l·ªùi cho {ctx.author.mention} c√¢u h·ªèi {content}:\n\n" + response["message"]
                    try:
                        embed = disnake.Embed(
                        title=f"ƒê∆∞·ª£c cung c·∫•p b·ªüi {model_info[model]['name']}",
                        description=f"‚ö° Th·ªùi gian ph·∫£n h·ªìi: {datetime.timedelta(milliseconds=response['response_time']).seconds} gi√¢y\n"
                        f"```C√°c th√¥ng tin ƒë∆∞·ª£c ƒë∆∞a ra c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c v√† c·∫ßn ƒë∆∞·ª£c x√°c nh·∫≠n``` \n"
                                    f"{'üëë' if premium else '<:verify:1134033164151566460>'} B·∫°n ƒë√£ s·ª≠ d·ª•ng {used} l·∫ßn, c√≤n l·∫°i {left} l·∫ßn",
                        color=disnake.Color.green()
                    )
                    except KeyError:
                        embed = disnake.Embed(
                        title=f"ƒê∆∞·ª£c cung c·∫•p b·ªüi {model_info[model]['name']}",
                        description=
                        f"```C√°c th√¥ng tin ƒë∆∞·ª£c ƒë∆∞a ra c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c v√† c·∫ßn ƒë∆∞·ª£c x√°c nh·∫≠n``` \n"
                                    f"{'üëë' if premium else '<:verify:1134033164151566460>'} B·∫°n ƒë√£ s·ª≠ d·ª•ng {used} l·∫ßn, c√≤n l·∫°i {left} l·∫ßn",
                        color=disnake.Color.green()
                    )
                    embed.set_footer(icon_url=ctx.author.avatar.url,text="T√≠nh nƒÉng th·ª≠ nghi·ªám")
                    embed.set_thumbnail(url=model_info[model]["icon"])
                    if self.debugging:
                        await ctx.edit_original_response(content=message,embed=embed)
                    else:
                        await ctx.edit_original_response(content=message)
                else:
                    try:
                        embed = disnake.Embed(
                        title=f"ƒê∆∞·ª£c cung c·∫•p b·ªüi {model_info[model]['name']}",
                        description=f"‚ö° Th·ªùi gian ph·∫£n h·ªìi: {datetime.timedelta(milliseconds=response['response_time']).seconds} gi√¢y\n"
                                    f"```C√°c th√¥ng tin ƒë∆∞·ª£c ƒë∆∞a ra c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c v√† c·∫ßn ƒë∆∞·ª£c x√°c nh·∫≠n``` \n"
                                    f"{'üëë' if premium else '<:verify:1134033164151566460>'} B·∫°n ƒë√£ s·ª≠ d·ª•ng {used} l·∫ßn, c√≤n l·∫°i {left} l·∫ßn",
                        color=disnake.Color.green()
                    )   
                    except KeyError:
                        embed = disnake.Embed(
                        title=f"ƒê∆∞·ª£c cung c·∫•p b·ªüi {model_info[model]['name']}",
                        description=
                        f"```C√°c th√¥ng tin ƒë∆∞·ª£c ƒë∆∞a ra c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c v√† c·∫ßn ƒë∆∞·ª£c x√°c nh·∫≠n``` \n"
                                    f"{'üëë' if premium else '<:verify:1134033164151566460>'} B·∫°n ƒë√£ s·ª≠ d·ª•ng {used} l·∫ßn, c√≤n l·∫°i {left} l·∫ßn",
                        color=disnake.Color.green()
                    )
                    with open("response.txt", "w", encoding="utf-8") as f:
                        f.write(response["message"])
                    if self.debugging:
                        await ctx.edit_original_response(content=f"> ### Tr·∫£ l·ªùi cho {ctx.author.mention} c√¢u h·ªèi {content}:\n\n"
                                                        f"C√¢u tr·∫£ l·ªùi h∆°i d√†i, t·ªõ cho v√†o file gi√∫p c·∫≠u nh√©", file=disnake.File("response.txt"), embed=embed)  
                    else:
                        await ctx.edit_original_response(content=f"> ### Tr·∫£ l·ªùi cho {ctx.author.mention} c√¢u h·ªèi {content}: \n\n"
                                                        f"C√¢u tr·∫£ l·ªùi h∆°i d√†i, t·ªõ cho v√†o file gi√∫p c·∫≠u nh√©", file=disnake.File("response.txt"))
                        
                    time.sleep(5)
                    os.remove("response.txt")              

    @ai.sub_command(
        name="newchat",
        description=f"{desc_prefix} T·∫°o ƒëo·∫°n chat m·ªõi. H√™ th·ªëng s·∫Ω li√™n k·∫øt n·ªôi dung c√°c c√¢u h·ªèi tr∆∞·ªõc cho b·∫°n (üëëPremium)",
        options = [
            disnake.Option(name="prompt", description="ƒêi·ªÅu b·∫°n mu·ªën chatbot ƒë√≥ng vai.", type=OptionType.string, required=False)
        ])
    async def newchat(self, ctx: disnake.ApplicationCommandInteraction, prompt: str = None):
            await ctx.response.defer(ephemeral=True)
            userinfo = await check_user(self.bot, ctx, ctx.author.id, premium_check=True)
            if not userinfo: return
            else:
                create_thread(ctx.author.id, sys_message=prompt)
                embed = disnake.Embed(
                    title="ƒê√£ t·∫°o ƒëo·∫°n chat m·ªõi",
                    description="H√£y s·ª≠ d·ª•ng l·ªánh `/ai chat` ƒë·ªÉ b·∫Øt ƒë·∫ßu chat v·ªõi chatbot",
                    color=disnake.Color.green()
                )
                await ctx.edit_original_response(embed=embed)

def setup(bot: BotCore):
    bot.add_cog(ChatGPT(bot))
