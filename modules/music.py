# -*- coding: utf-8 -*-
import asyncio
import datetime
import json
import os.path
import pickle
import re
import traceback
import zlib
from base64 import b64decode
from copy import deepcopy
from random import shuffle
from typing import Union, Optional
from urllib.parse import urlparse, parse_qs

import aiofiles
import aiohttp
import disnake
from aiohttp import ClientConnectorCertificateError
from disnake.ext import commands

import wavelink
from utils.client import BotCore
from colorama import *
from utils.db import DBModel
from utils.music.checks import check_voice, has_player, has_source, is_requester, is_dj, \
    can_send_message_check, check_requester_channel, can_send_message, can_connect, check_deafen, check_pool_bots, \
    check_channel_limit, check_stage_topic, check_queue_loading, check_player_perm
from utils.music.converters import time_format, fix_characters, string_to_seconds, URL_REG, \
    YOUTUBE_VIDEO_REG, google_search, percentage, music_source_image
from utils.music.errors import GenericError, MissingVoicePerms, NoVoice, PoolException, parse_error, \
    EmptyFavIntegration
from utils.music.interactions import VolumeInteraction, QueueInteraction, SelectInteraction, FavMenuView, ViewMode, \
    SetStageTitle
from utils.music.models import LavalinkPlayer, LavalinkTrack, LavalinkPlaylist, PartialTrack
from utils.music.spotify import process_spotify, spotify_regex_w_user
from utils.others import check_cmd, send_idle_embed, CustomContext, PlayerControls, queue_track_index, \
    pool_command, string_to_file, CommandArgparse, music_source_emoji_url, SongRequestPurgeMode, \
    select_bot_pool, get_inter_guild_data, ProgressBar


class Music(commands.Cog):

    emoji = "üé∂"
    name = "√Çm nh·∫°c"
    desc_prefix = f"[{emoji} {name}] | "

    search_sources_opts = [
        disnake.OptionChoice("Youtube", "ytsearch"),
        disnake.OptionChoice("Youtube Music", "ytmsearch"),
        disnake.OptionChoice("Soundcloud", "scsearch"),
    ]

    playlist_opts = [
        disnake.OptionChoice("Tr·ªôn danh s√°ch ph√°t", "shuffle"),
        disnake.OptionChoice("ƒê·∫£o ng∆∞·ª£c danh s√°ch ph√°t", "reversed"),
    ]

    sources = {
        "yt": "ytsearch",
        "y": "ytsearch",
        "ytb": "ytsearch",
        "youtube": "ytsearch",
        "ytm": "ytmsearch",
        "ytmsc": "ytmsearch",
        "ytmusic": "ytmsearch",
        "youtubemusic": "ytmsearch",
        "sc": "scsearch",
        "scd": "scsearch",
        "soundcloud": "scsearch",
    }

    audio_formats = ("audio/mpeg", "audio/ogg", "audio/mp4", "audio/aac")

    def __init__(self, bot: BotCore):

        self.bot = bot

        self.extra_hints = bot.config["EXTRA_HINTS"].split("||")

        self.song_request_concurrency = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

        self.player_interaction_concurrency = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

        self.song_request_cooldown = commands.CooldownMapping.from_cooldown(rate=1, per=300,
                                                                            type=commands.BucketType.member)

        self.music_settings_cooldown = commands.CooldownMapping.from_cooldown(rate=3, per=15,
                                                                              type=commands.BucketType.guild)

        if self.bot.config["AUTO_ERROR_REPORT_WEBHOOK"]:
            self.error_report_queue = asyncio.Queue()
            self.error_report_task = bot.loop.create_task(self.error_report_loop())
        else:
            self.error_report_queue = None

    stage_cd = commands.CooldownMapping.from_cooldown(2, 45, commands.BucketType.guild)
    stage_mc = commands.MaxConcurrency(1, per=commands.BucketType.guild, wait=False)

    @is_dj()
    @has_source()
    @commands.has_guild_permissions(manage_guild=True)
    @pool_command(
        only_voiced=True, name="stageannounce", aliases=["stagevc", "togglestageannounce", "announce", "vcannounce",
                                                         "voicestatus", "setvcstatus", "setvoicestatus", "statusvc",
                                                         "vcstatus"],
        description="K√≠ch ho·∫°t h·ªá th·ªëng th√¥ng b√°o/tr·∫°ng th√°i t·ª± ƒë·ªông c·ªßa k√™nh b·∫±ng t√™n b√†i h√°t.",
        cooldown=stage_cd, max_concurrency=stage_mc, extras={"exclusive_cooldown": True},
        usage="{prefix}{cmd} <placeholders>\nEx: {track.author} - {track.title}"
    )
    async def stageannounce_legacy(self, ctx: CustomContext, *, template = ""):
        await self.stage_announce.callback(self=self, inter=ctx, template=template)

    @is_dj()
    @has_source()
    @commands.slash_command(
        description=f"{desc_prefix}K√≠ch ho·∫°t/ch·ªânh s·ª≠a h·ªá th·ªëng th√¥ng b√°o/tr·∫°ng th√°i k√™nh t·ª± ƒë·ªông v·ªõi t√™n b√†i h√°t.",
        extras={"only_voiced": True, "exclusive_cooldown": True}, cooldown=stage_cd, max_concurrency=stage_mc,
        default_member_permissions=disnake.Permissions(manage_guild=True), dm_permission=False
    )
    async def stage_announce(
            self, inter: disnake.AppCmdInter,
            template: str = commands.Param(name="model", default="")
    ):

        if isinstance(template, commands.ParamInfo):
            template = ""

        try:
            bot = inter.music_bot
            guild = inter.music_guild
            author = guild.get_member(inter.author.id)
        except AttributeError:
            bot = inter.bot
            guild = inter.guild
            author = inter.author

        if not author.guild_permissions.manage_guild and not (await bot.is_owner(author)):
            raise GenericError("**B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω m√°y ch·ªß ƒë·ªÉ b·∫≠t/t·∫Øt h·ªá th·ªëng n√†y.**")

        await inter.response.defer(ephemeral=True)

        global_data = await self.bot.get_global_data(inter.guild_id, db_name=DBModel.guilds)

        if not template:
            view = SetStageTitle(ctx=inter, bot=bot, data=global_data, guild=guild)
            view.message = await inter.send(view=view, embed=view.build_embed())
            await view.wait()
        else:
            if not any(p in template for p in SetStageTitle.placeholders):
                raise GenericError(f"**B·∫°n n√™n s·ª≠ d·ª•ng √≠t nh·∫•t m·ªôt tr√¨nh gi·ªØ ch·ªó h·ª£p l·ªá:** {SetStageTitle.placeholder_text}")

            await inter.response.defer(ephemeral=True)

            player = bot.music.players[inter.guild_id]
            player.stage_title_event = True
            player.stage_title_template = template
            player.start_time = disnake.utils.utcnow()

            await player.update_stage_topic()

            await player.process_save_queue()

            player.set_command_log(text="Tr·∫°ng th√°i t·ª± ƒë·ªông ƒë∆∞·ª£c k√≠ch ho·∫°t", emoji="üì¢")

            player.update = True

            if isinstance(inter, CustomContext):
                await inter.send("**Tr·∫°ng th√°i t·ª± ƒë·ªông ƒë∆∞·ª£c x√°c ƒë·ªãnh th√†nh c√¥ng!**")
            else:
                await inter.edit_original_message("**Tr·∫°ng th√°i t·ª± ƒë·ªông ƒë∆∞·ª£c x√°c ƒë·ªãnh th√†nh c√¥ng!**")


    play_cd = commands.CooldownMapping.from_cooldown(3, 12, commands.BucketType.member)
    play_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @check_voice()
    @can_send_message_check()
    @commands.message_command(name="add to queue", extras={"check_player": False},
                              cooldown=play_cd, max_concurrency=play_mc, dm_permission=False)
    async def message_play(self, inter: disnake.MessageCommandInteraction):

        if not inter.target.content:
            emb = disnake.Embed(description=f"Kh√¥ng c√≥ vƒÉn b·∫£n n√†o trong [tin nh·∫Øn]({inter.target.jump_url} ƒë√£ ch·ªçn)...",
                                color=disnake.Colour.red())
            await inter.send(embed=emb, ephemeral=True)
            return

        await self.play.callback(
            self=self,
            inter=inter,
            query=inter.target.content,
            position=0,
            options="",
            manual_selection=False,
            source=None,
            repeat_amount=0,
            force_play="no",
        )

    @check_voice()
    @can_send_message_check()
    @commands.slash_command(name="search", extras={"check_player": False}, cooldown=play_cd, max_concurrency=play_mc,
                            description=f"{desc_prefix}T√¨m ki·∫øm v√† ch·ªçn m·ªôt trong s·ªë k·∫øt qu·∫£ ƒë·ªÉ ph√°t nh·∫°c.",
                            dm_permission=False)
    async def search(
            self,
            inter: disnake.AppCmdInter,
            query: str = commands.Param(name="search", desc="T√™n ho·∫∑c li√™n k·∫øt c·ªßa b√†i h√°t."),
            *,
            position: int = commands.Param(name="position", description=f"{desc_prefix}ƒê·∫∑t b√†i h√°t v√†o v·ªã tr√≠ c·ª• th·ªÉ",
                                        default=0),
            force_play: str = commands.Param(
                name="playnow",
                description="Ph√°t nh·∫°c ngay l·∫≠p t·ª©c (thay v√¨ th√™m v√†o h√†ng ƒë·ª£i).",
                default="no",
                choices=[
                    disnake.OptionChoice(disnake.Localized("C√≥", data={disnake.Locale.pt_BR: "Sim"}), "yes"),
                    disnake.OptionChoice(disnake.Localized("Kh√¥ng", data={disnake.Locale.pt_BR: "N√£o"}), "no")
                ]
            ),
            options: str = commands.Param(name="options", description="T√πy ch·ªçn ƒë·ªÉ x·ª≠ l√Ω danh s√°ch ph√°t",
                                        choices=playlist_opts, default=False),
            source: str = commands.Param(name="source",
                                        description="Ch·ªçn trang web ƒë·ªÉ t√¨m ki·∫øm nh·∫°c (kh√¥ng ph·∫£i li√™n k·∫øt)",
                                        choices=search_sources_opts,
                                        default="ytsearch"),
            repeat_amount: int = commands.Param(name="repeat", description="ƒë·∫∑t s·ªë l·∫ßn l·∫∑p l·∫°i.",
                                                default=0),
            server: str = commands.Param(name="server", desc="S·ª≠ d·ª•ng m√°y ch·ªß nh·∫°c c·ª• th·ªÉ trong t√¨m ki·∫øm.",
                                        default=None)
    ):

        await self.play.callback(
            self=self,
            inter=inter,
            query=query,
            position=position,
            force_play=force_play,
            options=options,
            manual_selection=True,
            source=source,
            repeat_amount=repeat_amount,
            server=server
        )

    @search.autocomplete("search")
    async def search_autocomplete(self, inter: disnake.Interaction, current: str):

        if not current:
            return []

        if URL_REG.match(current):
            return [current] if len(current) < 100 else []

        try:
            await check_pool_bots(inter, only_voiced=True)
            bot = inter.music_bot
        except GenericError:
            return [current[:99]]
        except:
            bot = inter.bot

        try:
            if not inter.author.voice:
                return []
        except AttributeError:
            return [current[:99]]

        return await google_search(bot, current)

    @is_dj()
    @has_player()
    @can_send_message_check()
    @commands.max_concurrency(1, commands.BucketType.guild)
    @commands.slash_command(
        extras={"only_voiced": True}, dm_permission=False,
        description=f"{desc_prefix}K·∫øt n·ªëi (ho·∫∑c chuy·ªÉn sang m·ªôt) k√™nh tho·∫°i."
    )
    async def connect(
            self,
            inter: disnake.AppCmdInter,
            channel: Union[disnake.VoiceChannel, disnake.StageChannel] = commands.Param(
                name="channel",
                description="K√™nh ƒë·ªÉ k·∫øt n·ªëi"
            )
    ):
        try:
            channel = inter.music_bot.get_channel(channel.id)
        except AttributeError:
            pass

        await self.do_connect(inter, channel)

    async def do_connect(
            self,
            ctx: Union[disnake.AppCmdInter, commands.Context, disnake.Message],
            channel: Union[disnake.VoiceChannel, disnake.StageChannel] = None,
            check_other_bots_in_vc: bool = False,
            bot: BotCore = None,
            me: disnake.Member = None,
            check_pool: bool = True,
    ):

        if not channel:
            try:
                channel = ctx.music_bot.get_channel(ctx.author.voice.channel.id) or ctx.author.voice.channel
            except AttributeError:
                channel = ctx.author.voice.channel

        if not bot:
            try:
                bot = ctx.music_bot
            except AttributeError:
                try:
                    bot = ctx.bot
                except:
                    bot = self.bot

        if not me:
            try:
                me = ctx.music_guild.me
            except AttributeError:
                me = ctx.guild.me

        try:
            guild_id = ctx.guild_id
        except AttributeError:
            guild_id = ctx.guild.id

        try:
            text_channel = ctx.music_bot.get_channel(ctx.channel.id)
        except AttributeError:
            text_channel = ctx.channel

        try:
            player = bot.music.players[guild_id]
        except KeyError:
            print(f"Player debug test 20: {bot.user} | {self.bot.user}")
            raise GenericError(
                f"**Tr√¨nh ph√°t bot {bot.user.mention} ƒë√£ b·ªã ch·∫•m d·ª©t tr∆∞·ªõc khi k·∫øt n·ªëi v·ªõi k√™nh tho·∫°i"
                 f" (ho·∫∑c tr√¨nh ph√°t ch∆∞a ƒë∆∞·ª£c kh·ªüi ch·∫°y)...\nƒê·ªÉ ƒë·ªÅ ph√≤ng, h√£y th·ª≠ l·∫°i.**"
            )

        can_connect(channel, me.guild, check_other_bots_in_vc=check_other_bots_in_vc, bot=bot)

        deafen_check = True

        if isinstance(ctx, disnake.AppCmdInter) and ctx.application_command.name == self.connect.name:

            perms = channel.permissions_for(me)

            if not perms.connect or not perms.speak:
                raise MissingVoicePerms(channel)

            await player.connect(channel.id, self_deaf=True)

            if channel != me.voice and me.voice.channel:
                txt = [
                    f"ƒë√£ chuy·ªÉn t√¥i ƒë·∫øn k√™nh <#{channel.id}>",
                     f"**ƒê√£ chuy·ªÉn sang k√™nh th√†nh c√¥ng** <#{channel.id}>"
                ]

                deafen_check = False


            else:
                txt = [
                    f"ƒë√£ k·∫øt n·ªëi t√¥i tr√™n k√™nh <#{channel.id}>",
                     f"**T√¥i ƒë√£ k·∫øt n·ªëi v·ªõi k√™nh** <#{channel.id}>"
                ]

            await self.interaction_message(ctx, txt, emoji="üîà", rpc_update=True)

        else:
            await player.connect(channel.id, self_deaf=True)

        try:
            player.members_timeout_task.cancel()
        except:
            pass

        if deafen_check and bot.config["GUILD_DEAFEN_WARN"]:

            retries = 0

            while retries < 5:

                if me.voice:
                    break

                await asyncio.sleep(1)
                retries += 0

            if not await check_deafen(me):
                await text_channel.send(
                    embed=disnake.Embed(
                        title="ƒê·ªÉ √Ω:",
                        description="ƒê·ªÉ duy tr√¨ s·ª± ri√™ng t∆∞ c·ªßa b·∫°n v√† gi√∫p t√¥i ti·∫øt ki·ªám ti·ªÅn"
                                     "c√°c t√≠nh nƒÉng, t√¥i khuy√™n b·∫°n n√™n t·∫Øt √¢m thanh k√™nh c·ªßa m√¨nh b·∫±ng c√°ch nh·∫•p v√†o "
                                     "nh·∫•p chu·ªôt ph·∫£i v√†o t√¥i r·ªìi ch·ªçn: t·∫Øt"
                                     "√¢m thanh tr√™n m√°y ch·ªß.",
                        color=self.bot.get_color(me),
                    ).set_image(
                        url="https://cdn.discordapp.com/attachments/554468640942981147/1012533546386210956/unknown.png"
                    ), delete_after=20
                )

        if isinstance(channel, disnake.StageChannel):

            while not me.voice:
                await asyncio.sleep(1)

            stage_perms = channel.permissions_for(me)

            if stage_perms.mute_members:
                await me.edit(suppress=False)
            else:
                embed = disnake.Embed(color=self.bot.get_color(me))

                embed.description = f"**T√¥i c·∫ßn m·ªôt s·ªë nh√¢n vi√™n m·ªùi l√™n s√¢n kh·∫•u ph√°t bi·ªÉu: "\
                                     f"[{channel.name}]({channel.jump_url}).**"

                embed.set_footer(
                    text="üí° M·∫πo: ƒë·ªÉ cho ph√©p t√¥i t·ª± ƒë·ªông ph√°t bi·ªÉu tr√™n s√¢n kh·∫•u, b·∫°n c·∫ßn ph·∫£i c·∫•p cho t√¥i "
                          "quy·ªÅn t·∫Øt ti·∫øng th√†nh vi√™n (tr√™n m√°y ch·ªß ho·∫∑c ch·ªâ tr√™n k√™nh s√¢n kh·∫•u ƒë√£ ch·ªçn).")

                await text_channel.send(ctx.author.mention, embed=embed, delete_after=45)

    @can_send_message_check()
    @check_voice()
    @commands.bot_has_guild_permissions(send_messages=True)
    @commands.max_concurrency(1, commands.BucketType.member)
    @pool_command(name="addposition", description="Th√™m nh·∫°c v√†o m·ªôt v·ªã tr√≠ c·ª• th·ªÉ trong h√†ng ƒë·ª£i.",
                  aliases=["adp", "addpos"], check_player=False, cooldown=play_cd, max_concurrency=play_mc,
                  usage="{prefix}{cmd} [posi√ß√£o(N¬∫)] [nome|link]\nEx: {prefix}{cmd} 2 sekai - burn me down")
    async def addpos_legacy(self, ctx: CustomContext, position: int, *, query: str):

        if position < 1:
            raise GenericError("**S·ªë v·ªã tr√≠ h√†ng ƒë·ª£i ph·∫£i l·ªõn h∆°n 1.**")
        await self.play.callback(self=self, inter=ctx, query=query, position=position, options=False,
                                 force_play="no", manual_selection=False,
                                 source=None, repeat_amount=0, server=None)

    stage_flags = CommandArgparse()
    stage_flags.add_argument('query', nargs='*', help="t√™n b√†i h√°t ho·∫∑c li√™n k·∫øt")
    stage_flags.add_argument('-position', '-pos', '-p', type=int, default=0, help='ƒê·∫∑t b√†i h√°t v√†o m·ªôt v·ªã tr√≠ c·ª• th·ªÉ trong h√†ng ƒë·ª£i (n√≥ s·∫Ω b·ªã b·ªè qua n·∫øu b·∫°n s·ª≠ d·ª•ng -next, v.v.).\nEx: -p 10')
    stage_flags.add_argument('-next', '-next', action='store_true', help='Th√™m b√†i h√°t/danh s√°ch ph√°t ·ªü ƒë·∫ßu h√†ng ƒë·ª£i (t∆∞∆°ng ƒë∆∞∆°ng v·ªõi: -pos 1)')
    stage_flags.add_argument('-reverse', '-r', action='store_true', help='ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± c√°c b√†i h√°t ƒë√£ th√™m (ch·ªâ hi·ªáu qu·∫£ khi th√™m danh s√°ch ph√°t).')
    stage_flags.add_argument('-shuffle', '-sl', action='store_true', help='Tr·ªôn c√°c b√†i h√°t ƒë√£ th√™m (ch·ªâ hi·ªáu qu·∫£ khi th√™m danh s√°ch ph√°t).')
    stage_flags.add_argument('-select', '-s', action='store_true', help='Ch·ªçn b√†i h√°t t·ª´ k·∫øt qu·∫£ t√¨m th·∫•y.')
    stage_flags.add_argument('-source', '-src', type=str, default="ytsearch", help='T√¨m ki·∫øm nh·∫°c b·∫±ng m·ªôt ngu·ªìn c·ª• th·ªÉ [youtube/soundcloud, v.v.]')
    stage_flags.add_argument('-force', '-now', '-n', '-f', action='store_true', help='Ph√°t b√†i h√°t ƒë√£ th√™m ngay l·∫≠p t·ª©c (ch·ªâ hi·ªáu qu·∫£ n·∫øu c√≥ m·ªôt b√†i h√°t hi·ªán ƒëang ph√°t.) ' )
    stage_flags.add_argument('-loop', '-lp', type=int, default=0, help="ƒê·∫∑t s·ªë l·∫ßn l·∫∑p l·∫°i c·ªßa b√†i h√°t ƒë√£ ch·ªçn.\nEx: -loop 5")
    stage_flags.add_argument('-server', '-sv', type=str, default=None, help='S·ª≠ d·ª•ng m·ªôt m√°y ch·ªß nh·∫°c c·ª• th·ªÉ.')

    @can_send_message_check()
    @commands.bot_has_guild_permissions(send_messages=True)
    @commands.max_concurrency(1, commands.BucketType.member)
    @pool_command(name="play", description="Ph√°t nh·∫°c tr√™n k√™nh tho·∫°i.", aliases=["p"], return_first=True,
                  cooldown=play_cd, max_concurrency=play_mc, extras={"flags": stage_flags},
                  usage="{prefix}{cmd} [nome|link]\nEx: {prefix}{cmd} sekai - burn me down")
    async def play_legacy(self, ctx: CustomContext, *, flags: str = ""):

        args, unknown = ctx.command.extras['flags'].parse_known_args(flags.split())

        await self.play.callback(
            self = self,
            inter = ctx,
            query = " ".join(args.query + unknown),
            position= 1 if args.next else args.position if args.position > 0 else 0,
            options = "shuffle" if args.shuffle else "reversed" if args.reverse else None,
            force_play = "yes" if args.force else "no",
            manual_selection = args.select,
            source = self.sources.get(args.source),
            repeat_amount = args.loop,
            server = args.server
        )

    @can_send_message_check()
    @commands.bot_has_guild_permissions(send_messages=True)
    @pool_command(name="search", description="T√¨m ki·∫øm b√†i h√°t v√† ch·ªçn m·ªôt b√†i t·ª´ k·∫øt qu·∫£ ƒë·ªÉ ph√°t.",   
                  aliases=["sc"], return_first=True, cooldown=play_cd, max_concurrency=play_mc,
                  usage="{prefix}{cmd} [t√™n]\nV√≠ d·ª•: {prefix}{cmd} sekai - burn me down")
    async def search_legacy(self, ctx: CustomContext, *, query):

        await self.play.callback(self=self, inter=ctx, query=query, position=0, options=False, force_play="no",
                                 manual_selection=True, source=None, repeat_amount=0, server=None)

    @can_send_message_check()
    @commands.slash_command(
        name="play_music_file", dm_permission=False,
        description=f"{desc_prefix}Ph√°t t·∫≠p tin nh·∫°c tr√™n k√™nh tho·∫°i.",
        extras={"return_first": True}, cooldown=play_cd, max_concurrency=play_mc
    )
    async def play_file(
            self,
            inter: Union[disnake.AppCmdInter, CustomContext],
            file: disnake.Attachment = commands.Param(
                name="file", description="T·ªáp √¢m thanh ƒë·ªÉ ph√°t ho·∫∑c th√™m v√†o h√†ng ƒë·ª£i"
            ),
            position: int = commands.Param(name="position", description="ƒê·∫∑t b√†i h√°t ·ªü m·ªôt v·ªã tr√≠ c·ª• th·ªÉ",
                                           default=0),
            force_play: str = commands.Param(
                name="play_now",
                description="Ph√°t b√†i h√°t ngay l·∫≠p t·ª©c (thay v√¨ th√™m n√≥ v√†o h√†ng ƒë·ª£i).",
                default="no",
                choices=[
                    disnake.OptionChoice(disnake.Localized("Yes", data={disnake.Locale.pt_BR: "Sim"}), "yes"),
                    disnake.OptionChoice(disnake.Localized("No", data={disnake.Locale.pt_BR: "N√£o"}), "no")
                ]
            ),
            repeat_amount: int = commands.Param(name="repeat", description="S·ªë l·∫ßn l·∫∑p l·∫°i.",
                                                default=0),
            server: str = commands.Param(name="server", desc="S·ª≠ d·ª•ng m·ªôt m√°y ch·ªß √¢m nh·∫°c c·ª• th·ªÉ khi t√¨m ki·∫øm.",
                                         default=None),
    ):

        class DummyMessage:
            attachments = [file]

        try:
            thread = inter.message.thread
        except:
            thread = None
        inter.message = DummyMessage()
        inter.message.thread = thread

        await self.play.callback(self=self, inter=inter, query="", position=position, options=False, force_play=force_play,
                                 manual_selection=False, source=None, repeat_amount=repeat_amount, server=server)

    async def check_player_queue(self, user: disnake.User, bot: BotCore, guild_id: int, tracks: Union[list, LavalinkPlaylist] = None):

        count = self.bot.config["QUEUE_MAX_ENTRIES"]

        try:
            player: LavalinkPlayer = bot.music.players[guild_id]
        except KeyError:
            if count < 1:
                return tracks
            count += 1
        else:
            if count < 1:
                return tracks
            if len(player.queue) >= count and not (await bot.is_owner(user)):
                raise GenericError(f"**H√†ng ƒë·ª£i ƒë√£ ƒë·∫ßy ({self.bot.config['QUEUE_MAX_ENTRIES']} b√†i h√°t).**")

        if tracks:

            if isinstance(tracks, list):
                if not await bot.is_owner(user):
                    tracks = tracks[:count]
            else:
                if not await bot.is_owner(user):
                    tracks.tracks = tracks.tracks[:count]

        return tracks

    @can_send_message_check()
    @commands.slash_command(
        description=f"{desc_prefix}Ph√°t nh·∫°c tr√™n k√™nh tho·∫°i.", dm_permission=False,
        extras={"return_first": True}, cooldown=play_cd, max_concurrency=play_mc
    )
    async def play(
            self,
            inter: Union[disnake.AppCmdInter, CustomContext],
            query: str = commands.Param(name="search", desc="T√™n b√†i h√°t ho·∫∑c li√™n k·∫øt."), *,
            position: int = commands.Param(name="position", description="ƒê·∫∑t b√†i h√°t ·ªü m·ªôt v·ªã tr√≠ c·ª• th·ªÉ",
                                           default=0),
            force_play: str = commands.Param(
                name="playnow",
                description="Ph√°t b√†i h√°t ngay l·∫≠p t·ª©c (thay v√¨ th√™m n√≥ v√†o h√†ng ƒë·ª£i)..",
                default="no",
                choices=[
                    disnake.OptionChoice(disnake.Localized("C√≥", data={disnake.Locale.pt_BR: "Sim"}), "yes"),
                    disnake.OptionChoice(disnake.Localized("Kh√¥ng", data={disnake.Locale.pt_BR: "N√£o"}), "no")
                ]
            ),
            manual_selection: bool = commands.Param(name="manual_selection",
                                        description="Ch·ªçn b√†i h√°t m·ªôt c√°ch th·ªß c√¥ng t·ª´ k·∫øt qu·∫£ t√¨m ki·∫øm",
                                        default=False),
            options: str = commands.Param(name="options", description="T√πy ch·ªçn x·ª≠ l√Ω danh s√°ch ph√°t",
                              choices=playlist_opts, default=False),
            source: str = commands.Param(name="source",
                             description="Ch·ªçn trang web ƒë·ªÉ t√¨m ki·∫øm nh·∫°c (kh√¥ng ph·∫£i li√™n k·∫øt)",
                             choices=search_sources_opts,
                             default="ytsearch"),
            repeat_amount: int = commands.Param(name="repeat", description="ƒë·∫∑t s·ªë l·∫ßn l·∫∑p l·∫°i.",
                                    default=0),
            server: str = commands.Param(name="server", desc="S·ª≠ d·ª•ng m√°y ch·ªß nh·∫°c c·ª• th·ªÉ trong t√¨m ki·∫øm.",
                             default=None),
    ):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        msg = None
        inter, guild_data = await get_inter_guild_data(inter, bot)
        ephemeral = None

        if not inter.response.is_done():
            ephemeral = await self.is_request_channel(inter, data=guild_data, ignore_thread=True)
            await inter.response.defer(ephemeral=ephemeral)

        if not inter.author.voice:

            if not (c for c in guild.channels if c.permissions_for(inter.author).connect):
                raise GenericError(f"**B·∫°n ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi k√™nh tho·∫°i v√† kh√¥ng c√≥ k√™nh/giai ƒëo·∫°n tho·∫°i n√†o"
                                    "c√≥ s·∫µn tr√™n m√°y ch·ªß c·∫•p cho b·∫°n quy·ªÅn k·∫øt n·ªëi.**")

            color = self.bot.get_color(guild.me)

            if isinstance(inter, CustomContext):
                func = inter.send
            else:
                func = inter.edit_original_message

            msg = await func(
                embed=disnake.Embed(
                    description=f"**{inter.author.mention} tham gia k√™nh tho·∫°i ƒë·ªÉ ph√°t nh·∫°c c·ªßa b·∫°n.**\n"
                                 f"**N·∫øu b·∫°n kh√¥ng k·∫øt n·ªëi v·ªõi m·ªôt k√™nh trong v√≤ng 25 gi√¢y, thao t√°c n√†y s·∫Ω b·ªã h·ªßy.**",
                    color=color
                )
            )

            if msg:
                inter.store_message = msg

            try:
                await bot.wait_for("voice_state_update", timeout=25, check=lambda m, b, a: m.id == inter.author.id and m.voice)
            except asyncio.TimeoutError:
                try:
                    func = msg.edit
                except:
                    func = inter.edit_original_message
                await func(
                    embed=disnake.Embed(
                        description=f"**{inter.author.mention} thao t√°c ƒë√£ b·ªã h·ªßy.**\n", color=color
                    )
                )
                return

            await asyncio.sleep(1)

            

            bot = None

            bot_missing_perms = []

            for b in sorted(inter.bot.pool.bots, key=lambda b: b.identifier):

                if not b.bot_ready:
                    continue

                if not (guild := b.get_guild(inter.guild_id)):
                    continue

                if not (author := guild.get_member(inter.author.id)):
                    continue

                inter.author = author

                if b.user.id in author.voice.channel.voice_states:
                    inter.music_bot = b
                    inter.music_guild = guild
                    bot = b
                    break

                channel = b.get_channel(inter.channel.id)

                if not channel:
                    continue

                if isinstance(channel, disnake.Thread):
                    send_message_perm = channel.parent.permissions_for(channel.guild.me).send_messages_in_threads
                else:
                    send_message_perm = channel.permissions_for(channel.guild.me).send_messages

                if not send_message_perm:
                    if not guild.me.voice:
                        bot_missing_perms.append(b)
                    continue

                if not guild.me.voice:
                    bot = b
                    break

            if bot_missing_perms:
                raise GenericError(f"**C√≥ nh·ªØng bot √¢m nh·∫°c c√≥ s·∫µn tr√™n m√°y ch·ªß nh∆∞ng ch√∫ng kh√¥ng ƒë∆∞·ª£c ph√©p g·ª≠i tin nh·∫Øn tr√™n k√™nh <#{inter.channel_id}>**:\n\n" + \
                ", ".join(b.user.mention for b in bot_missing_perms))

            if not bot:
                raise GenericError("**Kh√¥ng c√≥ bot c√≥ s·∫µn...**")

            try:
                inter.music_bot = bot
                inter.music_guild = guild
            except:
                pass

        else:
            channel = bot.get_channel(inter.channel.id)
            await check_pool_bots(inter, check_player=False)

        if force_play == "yes":
            await check_player_perm(inter=inter, bot=bot, channel=channel)

        can_send_message(channel, bot.user)

        if not guild.voice_client and not check_channel_limit(guild.me, inter.author.voice.channel):
            raise GenericError(f"**K√™nh {inter.author.voice.channel.mention} ƒë√£ ƒë·∫ßy!**")

        await self.check_player_queue(inter.author, bot, guild.id)

        query = query.replace("\n", " ").strip()
        warn_message = None
        queue_loaded = False
        reg_query = None

        try:
            if isinstance(inter.message, disnake.Message):
                message_inter = inter.message
            else:
                message_inter = None
        except AttributeError:
            message_inter = None

        try:
            modal_message_id = int(inter.data.custom_id[15:])
        except:
            modal_message_id = None

        attachment: Optional[disnake.Attachment] = None

        try:
            voice_channel = bot.get_channel(inter.author.voice.channel.id)
        except AttributeError:
            raise NoVoice()

        try:
            player = bot.music.players[guild.id]

            if not server:
                node = player.node
            else:
                node = bot.music.get_node(server) or player.node

            guild_data = {}

        except KeyError:

            node = bot.music.get_node(server)

            if not node:
                node = await self.get_best_node(bot)

            guild_data = None

            if inter.bot == bot:
                inter, guild_data = await get_inter_guild_data(inter, bot)

            if not guild_data:
                guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)

            if not guild.me.voice:
                can_connect(voice_channel, guild, guild_data["check_other_bots_in_vc"], bot=bot)

            static_player = guild_data['player_controller']

            if not inter.response.is_done():
                ephemeral = await self.is_request_channel(inter, data=guild_data, ignore_thread=True)
                await inter.response.defer(ephemeral=ephemeral)

            if static_player['channel']:
                channel, warn_message, message = await self.check_channel(guild_data, inter, channel, guild, bot)

        if ephemeral is None:
            ephemeral = await self.is_request_channel(inter, data=guild_data, ignore_thread=True)

        is_pin = None

        if not query:

            if self.bot.config["ENABLE_DISCORD_URLS_PLAYBACK"]:

                try:
                    attachment = inter.message.attachments[0]

                    if attachment.size > 18000000:
                        raise GenericError("**T·ªáp b·∫°n g·ª≠i ph·∫£i c√≥ k√≠ch th∆∞·ªõc nh·ªè h∆°n ho·∫∑c b·∫±ng 18mb.**")

                    if attachment.content_type not in self.audio_formats:
                        raise GenericError("**T·ªáp b·∫°n g·ª≠i kh√¥ng ph·∫£i l√† ƒë·ªãnh d·∫°ng √¢m nh·∫°c h·ª£p l·ªá...**")

                    query = attachment.url

                except IndexError:
                    pass

        try:
            user_data = inter.global_user_data
        except:
            user_data = await self.bot.get_global_data(inter.author.id, db_name=DBModel.users)
            try:
                inter.global_user_data = user_data
            except:
                pass

        if not query:

            embed = disnake.Embed(
                color=self.bot.get_color(guild.me),
                description="**Ch·ªçn m·ªôt m·ª•c d∆∞·ªõi ƒë√¢y:**\n"
                            f'L∆∞u √Ω: b·∫°n ch·ªâ c√≥ <t:{int((disnake.utils.utcnow() + datetime.timedelta(seconds=45)).timestamp())}:R> ƒë·ªÉ ch·ªçn!'
            )

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"Th√¥ng qua bot: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            kwargs = {
                "content": "",
                "embed": embed
            }

            try:
                if inter.message.author.bot:
                    kwargs["content"] = inter.author.mention
            except AttributeError:
                pass

            opts = [
                disnake.SelectOption(label="Y√™u th√≠ch", value=">> [‚≠ê Y√™u th√≠ch ‚≠ê] <<", emoji="‚≠ê"),
                disnake.SelectOption(label="S·ª≠ d·ª•ng t√≠ch h·ª£p", value=">> [üí† T√≠ch h·ª£p üí†] <<", emoji="üí†"),
            ]
            
            if os.path.isfile(f"./local_database/saved_queues_v1/users/{inter.author.id}.pkl"):
                opts.append(disnake.SelectOption(label="H√†ng ch·ªù ƒë√£ l∆∞u", value=">> [üíæ H√†ng ch·ªù ƒë√£ l∆∞u üíæ] <<", emoji="üíæ"))

            if user_data["last_tracks"]:
                opts.append(disnake.SelectOption(label="Th√™m √¢m nh·∫°c g·∫ßn ƒë√¢y", value=">> [üìë Nh·ªØng b√†i h√°t g·∫ßn ƒë√¢y üìë] <<", emoji="üìë"))
                
            if isinstance(inter, disnake.MessageInteraction) and not inter.response.is_done():
                await inter.response.defer(ephemeral=ephemeral)

            if not guild_data:

                if inter.bot == bot:
                    inter, guild_data = await get_inter_guild_data(inter, bot)
                else:
                    inter, guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)

            if guild_data["player_controller"]["fav_links"]:
                disnake.SelectOption(label="Y√™u th√≠ch c·ªßa m√°y ch·ªß", value=">> [üìå Y√™u th√≠ch c·ªßa m√°y ch·ªß üìå] <<", emoji="üìå"),

            view = SelectInteraction(user=inter.author, timeout=45, opts=opts)

            try:
                await msg.edit(view=view, **kwargs)
            except AttributeError:
                try:
                    await inter.edit_original_message(view=view, **kwargs)
                except AttributeError:
                    msg = await inter.send(view=view, **kwargs)

            await view.wait()

            select_interaction = view.inter

            if not select_interaction or view.selected is False:

                text = "### ƒê√£ h·∫øt th·ªùi gian ƒë·ªÉ ch·ªçn!" if view.selected is not False else "### B·ªã ng∆∞·ªùi d√πng h·ªßy."

                try:
                    await msg.edit(embed=disnake.Embed(description=text, color=self.bot.get_color(guild.me))
                                   )
                except AttributeError:
                    traceback.print_exc()
                    pass
                return

            if select_interaction.data.values[0] == "cancel":
                await msg.edit(
                    embed=disnake.Embed(
                        description="**H·ªßy b·ªè l·ª±a ch·ªçn!**",
                        color=self.bot.get_color(guild.me)
                    ),
                    components=None
                )
                return

            try:
                inter.store_message = msg
            except AttributeError:
                pass

            inter.token = select_interaction.token
            inter.id = select_interaction.id
            inter.response = select_interaction.response
            query = select_interaction.data.values[0]
            await inter.response.defer()

        fav_opts = []

        if query.startswith(">> [üí† T√≠ch h·ª£p üí†] <<"):
            query = ""
            for k, v in user_data["integration_links"].items():
                fav_opts.append(disnake.SelectOption(label=k[5:], value=f"> itg: {k}", description="[üí† T√≠ch h·ª£p üí†]", emoji=music_source_emoji_url(v)))

        elif query.startswith(">> [‚≠ê Y√™u th√≠ch ‚≠ê] <<"):
            query = ""
            for k, v in user_data["fav_links"].items():
                fav_opts.append(disnake.SelectOption(label=k, value=f"> fav: {k}", description="[‚≠ê Y√™u th√≠ch ‚≠ê]", emoji=music_source_emoji_url(v)))

        elif query.startswith(">> [üìë Nh·ªØng b√†i h√°t g·∫ßn ƒë√¢y üìë] <<"):

            if not user_data["last_tracks"]:
                raise GenericError("**B·∫°n ch∆∞a y√™u c·∫ßu b√†i h√°t n√†o trong l·ªãch s·ª≠ c·ªßa b·∫°n...**\n"
                                    "Ch√∫ng s·∫Ω xu·∫•t hi·ªán khi b·∫°n th√™m b√†i h√°t qua t√¨m ki·∫øm ho·∫∑c li√™n k·∫øt.")

            query = ""
            for i, d in enumerate(user_data["last_tracks"]):
                fav_opts.append(disnake.SelectOption(label=d["name"], value=f"> lst: {i}", description="[üìë Nh·ªØng b√†i h√°t g·∫ßn ƒë√¢y üìë]",
                                                     emoji=music_source_emoji_url(d["url"])))

        elif query.startswith(">> [üìå Y√™u th√≠ch c·ªßa m√°y ch·ªß üìå] <<"):

            if not guild_data:

                if inter.bot == bot:
                    inter, guild_data = await get_inter_guild_data(inter, bot)
                else:
                    guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)

            if not guild_data["player_controller"]["fav_links"]:
                raise GenericError("**M√°y ch·ªß kh√¥ng c√≥ li√™n k·∫øt c·ªë ƒë·ªãnh/y√™u th√≠ch.**")
            
            for name, v in guild_data["player_controller"]["fav_links"].items():
                fav_opts.append(disnake.SelectOption(label=name, value=f"> pin: {name}", description="[üìå Y√™u th√≠ch c·ªßa m√°y ch·ªß üìå]", emoji=music_source_emoji_url(v['url'])))

            is_pin = False

        if fav_opts:

            source = False

            if len(fav_opts) == 1:
                query = list(fav_opts)[0].value

            else:
                embed = disnake.Embed(
                    color=self.bot.get_color(guild.me),
                    description="**Ch·ªçn m·ªôt m·ª•c b√™n d∆∞·ªõi:**\n"
                                 f'L∆∞u √Ω: b·∫°n ch·ªâ c√≥ <t:{int((disnake.utils.utcnow() + datetime.timedelta(seconds=45)).timestamp())}:R> ƒë·ªÉ ch·ªçn!'
                )

                try:
                    if bot.user.id != self.bot.user.id:
                        embed.set_footer(text=f"Th√¥ng qua: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
                except AttributeError:
                    pass

                kwargs = {
                    "content": "",
                    "embed": embed
                }

                try:
                    if inter.message.author.bot:
                        kwargs["content"] = inter.author.mention
                except AttributeError:
                    pass

                view = SelectInteraction(
                    user=inter.author,  timeout=45, opts=fav_opts
                )

                if isinstance(inter, disnake.MessageInteraction) and not inter.response.is_done():
                    await inter.response.defer(ephemeral=ephemeral)

                try:
                    func = msg.edit
                except AttributeError:
                    try:
                        if inter.response.is_done():
                            func = inter.edit_original_message
                        else:
                            func = inter.response.send_message
                            kwargs["ephemeral"] = ephemeral
                    except AttributeError:
                        kwargs["ephemeral"] = ephemeral
                        try:
                            func = inter.followup.send
                        except AttributeError:
                            func = inter.send

                msg = await func(view=view, **kwargs)

                await view.wait()

                select_interaction = view.inter

                if not select_interaction or view.selected is False:

                    embed = disnake.Embed(description="### L·ª±a ch·ªçn ƒë√£ h·∫øt th·ªùi gian!" if view.selected is not False else "### B·ªã ng∆∞·ªùi d√πng h·ªßy.", color=self.bot.get_color(guild.me))

                    try:
                        await msg.edit(embed=embed)
                    except AttributeError:
                        try:
                            await select_interaction.response.edit_message(embed=embed)
                        except AttributeError:
                            traceback.print_exc()
                    return

                if select_interaction.data.values[0] == "cancel":
                    await msg.edit(
                        embed=disnake.Embed(
                            description="**L·ª±a ch·ªçn ƒë√£ b·ªã h·ªßy b·ªè**",
                            color=self.bot.get_color(guild.me)
                        ),
                        components=None
                    )
                    return

                try:
                    inter.store_message = msg
                except AttributeError:
                    pass

                inter.token = select_interaction.token
                inter.id = select_interaction.id
                inter.response = select_interaction.response
                query = select_interaction.data.values[0]

        elif not query:
            raise EmptyFavIntegration()

        loadtype = None
        tracks = []

        if query.startswith("> pin: "):
            if is_pin is None:
                is_pin = True
            if not guild_data:
                inter, guild_data = await get_inter_guild_data(inter, bot)
            query = guild_data["player_controller"]["fav_links"][query[7:]]['url']
            source = False

        elif query.startswith("> lst: "):
            query = user_data["last_tracks"][int(query[7:])]["url"]
            source = False

        elif query.startswith(("> fav: ", "> itg: ")):
            try:
                user_data = inter.global_user_data
            except AttributeError:
                user_data = await self.bot.get_global_data(inter.author.id, db_name=DBModel.users)
                try:
                    inter.global_user_data = user_data
                except:
                    pass

            if query.startswith("> fav:"):
                query = user_data["fav_links"][query[7:]]

            else:

                query = user_data["integration_links"][query[7:]]

                if (matches := spotify_regex_w_user.match(query)):

                    if not self.bot.spotify:
                        raise GenericError("**H·ªó tr·ª£ Spotify hi·ªán kh√¥ng c√≥ s·∫µn...**")

                    url_type, user_id = matches.groups()

                    if url_type != "user":
                        raise GenericError("**Li√™n k·∫øt kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ b·∫±ng ph∆∞∆°ng ph√°p n√†y...**")

                    try:
                        await inter.response.defer(ephemeral=True)
                    except:
                        pass

                    result = await self.bot.loop.run_in_executor(None, lambda: self.bot.spotify.user_playlists(user_id))

                    info = {"entries": [{"title": t["name"], "url": t["external_urls"]["spotify"]} for t in result["items"]]}

                elif not self.bot.config["USE_YTDL"]:
                    raise GenericError("**Kh√¥ng c√≥ h·ªó tr·ª£ cho lo·∫°i y√™u c·∫ßu n√†y v√†o l√∫c n√†y...**")

                else:

                    loop = self.bot.loop or asyncio.get_event_loop()

                    try:
                        await inter.response.defer(ephemeral=True)
                    except:
                        pass

                    info = await loop.run_in_executor(None, lambda: self.bot.pool.ytdl.extract_info(query, download=False))

                    try:
                        if not info["entries"]:
                            raise GenericError(f"**N·ªôi dung kh√¥ng kh·∫£ d·ª•ng (ho·∫∑c ri√™ng t∆∞):**\n{query}")
                    except KeyError:
                        raise GenericError("**ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng nh·∫≠n k·∫øt qu·∫£ cho t√πy ch·ªçn ƒë√£ ch·ªçn ... ** ")

                if len(info["entries"]) == 1:
                    query = info["entries"][0]['url']

                else:

                    emoji = music_source_emoji_url(query)

                    view = SelectInteraction(
                        user=inter.author,
                        opts=[
                            disnake.SelectOption(label=e['title'][:90], value=f"entrie_select_{c}",
                                                 emoji=emoji) for c, e in enumerate(info['entries'])
                        ], timeout=30)

                    embed = disnake.Embed(
                        description="**Ch·ªçn m·ªôt danh s√°ch ph√°t b√™n d∆∞·ªõi:**\n"
                                    f'Ch·ªçn m·ªôt t√πy ch·ªçn theo <t:{int((disnake.utils.utcnow() + datetime.timedelta(seconds=30)).timestamp())}:R> ƒë·ªÉ ti·∫øp t·ª•c.',
                        color=self.bot.get_color(guild.me)
                    )

                    kwargs = {}

                    try:
                        func = msg.edit
                    except AttributeError:
                        try:
                            func = inter.edit_original_message
                        except AttributeError:
                            kwargs["ephemeral"] = True
                            try:
                                func = inter.followup.send
                            except AttributeError:
                                func = inter.send

                    msg = await func(embed=embed, view=view, **kwargs)

                    await view.wait()

                    if not view.inter or view.selected is False:

                        try:
                            func = msg.edit
                        except:
                            func = view.inter.response.edit_message

                        await func(embed=disnake.Embed(color=self.bot.get_color(guild.me),
                            description="**ƒê√£ h·∫øt th·ªùi gian!**" if not view.selected is False else "### B·ªã ng∆∞·ªùi d√πng h·ªßy b·ªè."))
                        return

                    query = info["entries"][int(view.selected[14:])]["url"]

                    if not isinstance(inter, disnake.ModalInteraction):
                        inter.token = view.inter.token
                        inter.id = view.inter.id
                        inter.response = view.inter.response
                    else:
                        inter = view.inter

            source = False

        elif query.startswith(">> [üíæ H√†ng ch·ªù ƒë√£ l∆∞u üíæ] <<"):

            try:
                async with aiofiles.open(f"./local_database/saved_queues_v1/users/{inter.author.id}.pkl", 'rb') as f:
                    f_content = await f.read()
                    try:
                        f_content = zlib.decompress(f_content)
                    except zlib.error:
                        pass
                    data = pickle.loads(f_content)
            except FileNotFoundError:
                raise GenericError("**D√≤ng ƒë√£ l∆∞u c·ªßa b·∫°n ƒë√£ b·ªã lo·∫°i tr·ª´...**")

            tracks = await self.check_player_queue(inter.author, bot, guild.id, self.bot.get_cog("PlayerSession").process_track_cls(data["tracks"])[0])
            node = await self.get_best_node(bot)
            queue_loaded = True
            source = False

        else:

            query = query.strip("<>")

            urls = URL_REG.findall(query)

            reg_query = {}

            if urls:
                query = urls[0]
                source = False

                if query.startswith("https://www.youtube.com/results"):
                    try:
                        query = f"ytsearch:{parse_qs(urlparse(query).query)['search_query'][0]}"
                    except:
                        raise GenericError(f"**Kh√¥ng c√≥ h·ªó tr·ª£ cho li√™n k·∫øt th√¥ng tin:** {query}")
                    manual_selection = True

                elif query.startswith("https://www.youtube.com/live/"):
                    query = query.split("?")[0].replace("/live/", "/watch?v=")

                if not self.bot.config["ENABLE_DISCORD_URLS_PLAYBACK"] and "cdn.discordapp.com/attachments/" in query:
                    raise GenericError("**S·ª± h·ªó tr·ª£ cho c√°c li√™n k·∫øt Discord b·ªã v√¥ hi·ªáu h√≥a.**")

                if query.startswith(("https://youtu.be/", "https://www.youtube.com/")):

                    for p in ("&ab_channel=", "&start_radio="):
                        if p in query:
                            try:
                                query = f'https://www.youtube.com/watch?v={re.search(r"v=([a-zA-Z0-9_-]+)", query).group(1)}'
                            except:
                                pass
                            break

                    if "&list=" in query and (link_re := YOUTUBE_VIDEO_REG.match(query)):

                        view = SelectInteraction(
                            user=inter.author,
                            opts=[
                                disnake.SelectOption(label="B√†i h√°t", emoji="üéµ",
                                                     description="Ch·ªâ t·∫£i l√™n b√†i h√°t t·ª´ li√™n k·∫øt.", value="music"),
                                disnake.SelectOption(label="Playlist", emoji="üé∂",
                                                     description="T·∫£i danh s√°ch b√†i h√°t hi·ªán t·∫°i.", value="playlist"),
                            ], timeout=30)

                        embed = disnake.Embed(
                            description='**Li√™n k·∫øt ch·ª©a video c√≥ danh s√°ch ph√°t.**\n'
                                         f'Ch·ªçn m·ªôt t√πy ch·ªçn trong <t:{int((disnake.utils.utcnow() + datetime.timedelta(seconds=30)).timestamp())}:R> ƒë·ªÉ ti·∫øp t·ª•c.',
                            color=self.bot.get_color(guild.me)
                        )

                        try:
                            if bot.user.id != self.bot.user.id:
                                embed.set_footer(text=f"Th√¥ng qua bot: {bot.user.display_name}",
                                                 icon_url=bot.user.display_avatar.url)
                        except AttributeError:
                            pass

                        msg = await inter.send(embed=embed, view=view, ephemeral=ephemeral)

                        await view.wait()

                        if not view.inter or view.selected is False:

                            try:
                                func = inter.edit_original_message
                            except AttributeError:
                                func = msg.edit

                            mention = ""

                            try:
                                if inter.message.author.bot:
                                    mention = f"{inter.author.mention}, "
                            except AttributeError:
                                pass

                            await func(
                                content=f"{mention}{'thao t√°c ƒë√£ b·ªã h·ªßy' if view.selected is not False else 'ƒë√£ h·∫øt th·ªùi gian ch·ªù'}" if view.selected is not False else "ƒê√£ b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng.",
                                embed=None
                            )
                            return

                        if view.selected == "music":
                            query = link_re.group()

                        try:
                            inter.store_message = msg
                        except AttributeError:
                            pass

                        if not isinstance(inter, disnake.ModalInteraction):
                            inter.token = view.inter.token
                            inter.id = view.inter.id
                            inter.response = view.inter.response
                        else:
                            inter = view.inter

        if not inter.response.is_done():
            await inter.response.defer(ephemeral=ephemeral)

        if not queue_loaded:
            tracks, node = await self.get_tracks(query, inter.author, node=node, track_loops=repeat_amount, source=source, bot=bot)
            tracks = await self.check_player_queue(inter.author, bot, guild.id, tracks)

        try:
            player = bot.music.players[inter.guild_id]
        except KeyError:
            await check_pool_bots(inter, check_player=False)

            try:
                bot = inter.music_bot
                guild = inter.music_guild
                channel = bot.get_channel(inter.channel.id)
            except AttributeError:
                bot = inter.bot
                guild = inter.guild
                channel = inter.channel

            try:
                player = bot.music.players[inter.guild_id]
            except KeyError:
                player = None

                if not guild_data:

                    if inter.bot == bot:
                        inter, guild_data = await get_inter_guild_data(inter, bot)
                    else:
                        guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)

                static_player = guild_data['player_controller']

                if static_player['channel']:
                    channel, warn_message, message = await self.check_channel(guild_data, inter, channel, guild, bot)

        if not player:
            player = await self.create_player(
                inter=inter, bot=bot, guild=guild, guild_data=guild_data, channel=channel,
                message_inter=message_inter, node=node, modal_message_id=modal_message_id
            )

        pos_txt = ""

        embed = disnake.Embed(color=disnake.Colour.red())

        embed.colour = self.bot.get_color(guild.me)

        position -= 1

        embed_description = ""

        if isinstance(tracks, list):

            if manual_selection and not queue_loaded and len(tracks) > 1:

                embed.description = f"**Ch·ªçn (c√°c) b√†i h√°t mong mu·ªën b√™n d∆∞·ªõi:**"

                try:
                    func = inter.edit_original_message
                except AttributeError:
                    func = inter.send

                try:
                    add_id = f"_{inter.id}"
                except AttributeError:
                    add_id = ""

                tracks = tracks[:25]

                msg = await func(
                    embed=embed,
                    components=[
                        disnake.ui.Select(
                            placeholder='K·∫øt qu·∫£:',
                            custom_id=f"track_selection{add_id}",
                            min_values=1,
                            max_values=len(tracks),
                            options=[
                                disnake.SelectOption(
                                    label=f"{n+1}. {t.title[:96]}",
                                    value=f"track_select_{n}",
                                    description=f"{t.author} [{time_format(t.duration)}]")
                                for n, t in enumerate(tracks)
                            ]
                        )
                    ]
                )

                def check_song_selection(i: Union[CustomContext, disnake.MessageInteraction]):

                    try:
                        return i.data.custom_id == f"track_selection_{inter.id}" and i.author == inter.author
                    except AttributeError:
                        return i.author == inter.author and i.message.id == msg.id

                try:
                    select_interaction: disnake.MessageInteraction = await self.bot.wait_for(
                        "dropdown",
                        timeout=45,
                        check=check_song_selection
                    )
                except asyncio.TimeoutError:
                    raise GenericError("ƒê√£ h·∫øt th·ªùi gian!")

                if len(select_interaction.data.values) > 1:

                    indexes = set(int(v[13:]) for v in select_interaction.data.values)

                    selected_tracks = []

                    for i in indexes:
                        for n, t in enumerate(tracks):
                            if i == n:
                                selected_tracks.append(t)
                                break

                    tracks = selected_tracks

                else:

                    tracks = tracks[int(select_interaction.data.values[0][13:])]

                if isinstance(inter, CustomContext):
                    inter.message = msg

                if reg_query is not None:
                    try:
                        reg_query = {"name": tracks.title, "url": tracks.uri}
                    except AttributeError:
                        reg_query = {"name": tracks[0].title, "url": tracks[0].uri}

            elif not queue_loaded:

                tracks = tracks[0]

                if tracks.info.get("sourceName") == "http":

                    if tracks.title == "Unknown title":
                        if attachment:
                            tracks.info["title"] = attachment.filename
                        else:
                            tracks.info["title"] = tracks.uri.split("/")[-1]
                        tracks.title = tracks.info["title"]

                    tracks.uri = ""

            if not isinstance(tracks, list):

                if force_play == "yes":
                    player.queue.insert(0, tracks)
                elif position < 0:
                    player.queue.append(tracks)
                else:
                    player.queue.insert(position, tracks)
                    pos_txt = f" t·∫°i v·ªã tr√≠ {position + 1} c·ªßa h√†ng ƒë·ª£i"

                duration = time_format(tracks.duration) if not tracks.is_stream else 'üî¥ Livestream'

                log_text = f"{inter.author.mention} ƒë√£ th√™m [`{fix_characters(tracks.title, 20)}`]({tracks.uri or tracks.search_uri}){pos_txt} `({duration})`."

                loadtype = "track"

                embed.set_author(
                    name=fix_characters(tracks.title, 35),
                    url=tracks.uri or tracks.search_uri,
                    icon_url=music_source_image(tracks.info['sourceName'])
                )
                embed.set_thumbnail(url=tracks.thumb)
                embed.description = f"`{fix_characters(tracks.author, 15)}`**‚îÉ**`{time_format(tracks.duration) if not tracks.is_stream else 'üî¥ Livestream'}`**‚îÉ**{inter.author.mention}"
                emoji = "üéµ"
                if reg_query is not None:
                    reg_query = {"name": tracks.title, "url": tracks.uri}

            else:

                if options == "shuffle":
                    shuffle(tracks)

                if position < 0 or len(tracks) < 2:

                    if options == "reversed":
                        tracks.reverse()
                    for track in tracks:
                        player.queue.append(track)
                else:
                    if options != "reversed":
                        tracks.reverse()
                    for track in tracks:
                        player.queue.insert(position, track)

                    pos_txt = f" (Pos. {position + 1})"

                if queue_loaded:
                    log_text = f"{inter.author.mention} ƒë√£ th√™m `{len(tracks)} b√†i h√°t` qua: {query[7:]}."
                    title = f"S·ª≠ d·ª•ng c√°c b√†i h√°t ƒë√£ l∆∞u t·ª´ {inter.author.display_name}"
                    icon_url = "https://i.ibb.co/51yMNPw/floppydisk.png"

                    tracks_playlists = {}

                    for t in tracks:
                        if t.playlist_name:
                            try:
                                tracks_playlists[t.playlist_url]["count"] += 1
                            except KeyError:
                                tracks_playlists[t.playlist_url] = {"name": t.playlist_name, "count": 1}

                    if tracks_playlists:
                        embed_description += "\n### Danh s√°ch ph√°t ƒë√£ t·∫£i:\n" + "\n".join(f"[`{info['name']}`]({url}) `- {info['count']} b√†i h√°t` " for url, info in tracks_playlists.items()) + "\n"

                else:
                    query = fix_characters(query.replace(f"{source}:", '', 1), 25)
                    title = f"T√¨m ki·∫øm: {query}"
                    icon_url = music_source_image(tracks[0].info['sourceName'])
                    log_text = f"{inter.author.mention} ƒë√£ th√™m `{len(tracks)} b√†i h√°t` qua t√¨m ki·∫øm: `{query}`{pos_txt}."

                total_duration = 0

                for t in tracks:
                    if not t.is_stream:
                        total_duration += t.duration

                embed.set_author(name="‚†Ç" + title, icon_url=icon_url)
                embed.set_thumbnail(url=tracks[0].thumb)
                embed.description = f"`{len(tracks)} b√†i h√°t)`**‚îÉ**`{time_format(total_duration)}`**‚îÉ**{inter.author.mention}"
                emoji = "üé∂"

        else:

            if options == "shuffle":
                shuffle(tracks.tracks)

            if position < 0 or len(tracks.tracks) < 2:

                if options == "reversed":
                    tracks.tracks.reverse()
                for track in tracks.tracks:
                    player.queue.append(track)
            else:
                if options != "reversed":
                    tracks.tracks.reverse()
                for track in tracks.tracks:
                    player.queue.insert(position, track)

                pos_txt = f" (Pos. {position + 1})"

            if tracks.tracks[0].info["sourceName"] == "youtube":
                try:
                    async with bot.session.get((oembed_url:=f"https://www.youtube.com/oembed?url={query}")) as r:
                        try:
                            playlist_data = await r.json()
                        except:
                            raise Exception(f"{r.status} | {await r.text()}")
                    tracks.data["playlistInfo"]["thumb"] = playlist_data["thumbnail_url"]
                except Exception as e:
                    print(f"Kh√¥ng nh·∫≠n ƒë∆∞·ª£c t√°c ph·∫©m ngh·ªá thu·∫≠t t·ª´ danh s√°ch ph√°t: {oembed_url} | {repr(e)}")

            loadtype = "playlist"

            log_text = f"{inter.author.mention} ƒë√£ th√™m danh s√°ch ph√°t [`{fix_characters(tracks.name, 20)}`]({tracks.url}){pos_txt} `({len(tracks.tracks)})`."

            total_duration = 0

            for t in tracks.tracks:
                if not t.is_stream:
                    total_duration += t.duration

            try:
                embed.set_author(
                    name="‚†Ç" + fix_characters(tracks.name, 35),
                    url=tracks.url,
                    icon_url=music_source_image(tracks.tracks[0].info['sourceName'])
                )
            except KeyError:
                embed.set_author(
                    name="‚†Ç Spotify Playlist",
                    icon_url=music_source_image(tracks.tracks[0].info['sourceName'])
                )
            embed.set_thumbnail(url=tracks.thumb)
            embed.description = f"`{len(tracks.tracks)} b√†i h√°t`**‚îÉ**`{time_format(total_duration)}`**‚îÉ**{inter.author.mention}"
            emoji = "üé∂"

            if reg_query is not None:
                reg_query = {"name": tracks.name, "url": tracks.url}

        embed.description += player.controller_link

        if not is_pin:

            if not player.is_connected:
                try:
                    embed.description += f"\n`K√™nh tho·∫°i` {voice_channel.mention}"
                except AttributeError:
                    pass

            embed.description += embed_description

            try:
                func = inter.edit_original_message
            except AttributeError:
                if msg:
                    func = msg.edit
                elif inter.message.author.id == bot.user.id:
                    func = inter.message.edit
                else:
                    func = inter.send

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"Th√¥ng qua bot: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            if loadtype == "track":
                components = [
                    disnake.ui.Button(emoji="üíó", label="Y√™u th√≠ch", custom_id=PlayerControls.embed_add_fav),
                    disnake.ui.Button(emoji="‚ñ∂Ô∏è", label="Ph√°t ngay", custom_id=PlayerControls.embed_forceplay),
                    disnake.ui.Button(emoji="<:add_music:588172015760965654>", label="Th√™m v√†o h√†ng ƒë·ª£i",
                                      custom_id=PlayerControls.embed_enqueue_track),
                ]

            elif loadtype == "playlist":
                try:
                    self.bot.pool.enqueue_playlist_embed_cooldown.get_bucket(inter).update_rate_limit()
                except:
                    pass
                components = [
                    disnake.ui.Button(emoji="üíó", label="Y√™u th√≠ch", custom_id=PlayerControls.embed_add_fav),
                    disnake.ui.Button(emoji="<:add_music:588172015760965654>", label="Th√™m v√†o h√†ng ƒë·ª£i",
                                      custom_id=PlayerControls.embed_enqueue_playlist)
                ]
            else:
                components = None

            await func(embed=embed, **{"components": components} if components else {"view": None})

        if not player.is_connected:

            try:
                guild_data["check_other_bots_in_vc"]
            except KeyError:
                if inter.bot == bot:
                    inter, guild_data = await get_inter_guild_data(inter, bot)
                else:
                    guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)

            if not inter.author.voice:
                raise NoVoice()

            await self.do_connect(
                inter, channel=voice_channel,
                check_other_bots_in_vc=guild_data["check_other_bots_in_vc"],
                bot=bot, me=guild.me, check_pool=True
            )

        await self.process_music(inter=inter, force_play=force_play, ephemeral=ephemeral, user_data=user_data, player=player,
                                 log_text=log_text, emoji=emoji, warn_message=warn_message, reg_query=reg_query)

    @play.autocomplete("search")
    async def fav_add_autocomplete(self, inter: disnake.Interaction, query: str):

        if URL_REG.match(query):
            return [query] if len(query) < 100 else []

        favs = [">> [‚≠ê Y√™u th√≠ch ‚≠ê] <<", ">> [üí† T√≠ch h·ª£p üí†] <<", ">> [üìå Y√™u th√≠ch c·ªßa m√°y ch·ªß üìå] <<"]

        if os.path.isfile(f"./local_database/saved_queues_v1/users/{inter.author.id}.pkl"):
            favs.append(">> [üíæ H√†ng ch·ªù ƒë√£ l∆∞u üíæ] <<")

        if not inter.guild:
            try:
                await check_pool_bots(inter, return_first=True)
            except:
                return [query] if len(query) < 100 else []

        try:
            vc = inter.author.voice
        except AttributeError:
            vc = True

        user_data = await self.bot.get_global_data(inter.author.id, db_name=DBModel.users)

        favs.extend([(f"{rec['url']} || {rec['name']}"[:100] if len(rec['url']) < 101 else rec['name'][:100]) for rec in user_data["last_tracks"]])

        if not vc or not query:
            return favs[:20]

        return await google_search(self.bot, query, max_entries=20) or favs[:20]

    skip_back_cd = commands.CooldownMapping.from_cooldown(2, 13, commands.BucketType.member)
    skip_back_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    case_sensitive_args = CommandArgparse()
    case_sensitive_args.add_argument('-casesensitive', '-cs', action='store_true',
                             help="T√¨m ki·∫øm b√†i h√°t c√≥ c·ª•m t·ª´ ch√≠nh x√°c trong t√™n b√†i h√°t thay v√¨ t√¨m ki·∫øm t·ª´ng ch·ªØ.")
    @check_stage_topic()
    @is_requester()
    @check_queue_loading()
    @check_voice()
    @pool_command(name="skip", aliases=["next", "n", "pular", "skipto"], cooldown=skip_back_cd,
                  max_concurrency=skip_back_mc, description=f"B·ªè qua b√†i h√°t hi·ªán t·∫°i ƒëang ph√°t.",
                  extras={"flags": case_sensitive_args}, only_voiced=True,
                  usage="{prefix}{cmd} <termo>\nEx: {prefix}{cmd} sekai")
    async def skip_legacy(self, ctx: CustomContext, *, flags: str = ""):

        args, unknown = ctx.command.extras['flags'].parse_known_args(flags.split())

        if ctx.invoked_with == "skipto" and not unknown:
            raise GenericError("**B·∫°n ph·∫£i th√™m t√™n ƒë·ªÉ s·ª≠ d·ª•ng Skipto.**")

        await self.skip.callback(self=self, inter=ctx, query=" ".join(unknown), case_sensitive=args.casesensitive)

    @check_stage_topic()
    @is_requester()
    @check_queue_loading()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Chuy·ªÉn ƒë·∫øn m·ªôt b√†i h√°t c·ª• th·ªÉ trong h√†ng ƒë·ª£i.", dm_permission=False,
        extras={"only_voiced": True}, cooldown=skip_back_cd, max_concurrency=skip_back_mc
    )
    async def skipto(
            self,
            inter: disnake.AppCmdInter,
            query: str = commands.Param(
                name="name",
                description="T√™n c·ªßa b√†i h√°t"
            ),
            case_sensitive: bool = commands.Param(
                name="exact_name", default=False,
                description="T√¨m ki·∫øm c√°c b√†i h√°t v·ªõi c√¢u ch√≠nh x√°c trong t√™n c·ªßa b√†i h√°t thay v√¨ t√¨m ki·∫øm t·ª´ng t·ª´.",

            )
    ):

        await self.skip.callback(self=self, inter=inter, query=query, case_sensitive=case_sensitive)

    @check_stage_topic()
    @is_requester()
    @check_queue_loading()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}B·ªè qua b√†i h√°t hi·ªán t·∫°i ƒëang ph√°t.", dm_permission=False,
        extras={"only_voiced": True}, cooldown=skip_back_cd, max_concurrency=skip_back_mc
    )
    async def skip(
            self,
            inter: disnake.AppCmdInter, *,
            query: str = commands.Param(
                name="name",
                description="T√™n √¢m nh·∫°c (ho√†n ch·ªânh ho·∫∑c m·ªôt ph·∫ßn c·ªßa n√≥).",
                default=None,
            ),
            play_only: str = commands.Param(
                name=disnake.Localized("play_only", data={disnake.Locale.pt_BR: "tocar_apenas"}),
                choices=[
                    disnake.OptionChoice(
                        disnake.Localized("Yes", data={disnake.Locale.pt_BR: "Sim"}), "yes"
                    ),
                    disnake.OptionChoice(
                        disnake.Localized("No", data={disnake.Locale.pt_BR: "N√£o"}), "no"
                    )
                ],
                description="Ch·ªâ ph√°t b√†i h√°t ngay l·∫≠p t·ª©c (kh√¥ng c·∫ßn b·ªè qua h√†ng ƒë·ª£i)",
                default="no"
            ),
            case_sensitive: bool = commands.Param(
                name="exact_name", default=False,
                description="T√¨m ki·∫øm c√°c b√†i h√°t v·ªõi t√™n ch√≠nh x√°c trong t√™n c·ªßa b√†i h√°t thay v√¨ t√¨m ki·∫øm t·ª´ng t·ª´.",

            )
    ):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = bot.get_guild(inter.guild_id)

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        ephemeral = await self.is_request_channel(inter)

        interaction = None

        if query:

            try:
                index = queue_track_index(inter, bot, query, case_sensitive=case_sensitive)[0][0]
            except IndexError:
                raise GenericError(f"**Kh√¥ng c√≥ b√†i h√°t n√†o ph√π h·ª£p v·ªõi t√™n: {query}**")

            track = player.queue[index]

            player.queue.append(player.last_track)
            player.last_track = None

            if player.loop == "current":
                player.loop = False

            if play_only == "yes":
                del player.queue[index]
                player.queue.appendleft(track)

            elif index > 0:
                player.queue.rotate(0 - index)

            player.set_command_log(emoji="‚§µÔ∏è", text=f"{inter.author.mention} ƒë∆∞a b√†i h√°t hi·ªán t·∫°i ƒë·ªÉ ph√°t ngay l·∫≠p t·ª©c.")

            embed = disnake.Embed(
                color=self.bot.get_color(guild.me),
                description= f"‚§µÔ∏è **‚†Ç{inter.author.mention} ƒë∆∞a b√†i h√°t**\n"
                             f"‚ï∞[`{fix_characters(track.title, 43)}`]({track.uri or track.search_uri}){player.controller_link} ƒë·ªÉ ph√°t ngay l·∫≠p t·ª©c"
            )

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"Th√¥ng qua: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            if isinstance(inter, disnake.MessageInteraction) and inter.data.custom_id == "queue_track_selection":
                await inter.response.edit_message(embed=embed, view=None)
            else:
                await inter.send(embed=embed, ephemeral=ephemeral)

        else:

            if isinstance(inter, disnake.MessageInteraction):
                player.set_command_log(text=f"{inter.author.mention} ƒë√£ b·ªè qua b√†i h√°t.", emoji="‚è≠Ô∏è")
                if not inter.response.is_done():
                    try:
                        await inter.response.defer()
                    except:
                        pass
                interaction = inter
            else:

                player.set_command_log(emoji="‚è≠Ô∏è", text=f"{inter.author.mention} B·ªè qua b√†i h√°t")

                embed = disnake.Embed(
                    color=self.bot.get_color(guild.me),
                    description=f"‚è≠Ô∏è **‚†Ç{inter.author.mention} ƒë√£ b·ªè qua b√†i h√°t:\n"
                                f"‚ï∞[`{fix_characters(player.current.title, 43)}`]({player.current.uri or player.current.search_uri})**"
                                f"{player.controller_link}"
                )

                try:
                    if bot.user.id != self.bot.user.id:
                        embed.set_footer(text=f"Th√¥ng qua: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
                except AttributeError:
                    pass

                await inter.send(embed=embed, ephemeral=ephemeral)

            if player.loop == "current":
                player.loop = False

        try:
            (player.current or player.last_track).info["extra"]["track_loops"] = 0
        except AttributeError:
            pass

        await player.track_end()
        player.ignore_np_once = True
        await player.process_next(inter=interaction)

    @check_stage_topic()
    @is_dj()
    @check_queue_loading()
    @has_player()
    @check_voice()
    @pool_command(name="back", aliases=["b", "voltar"], description="Quay l·∫°i b√†i h√°t tr∆∞·ªõc.", only_voiced=True,
                  cooldown=skip_back_cd, max_concurrency=skip_back_mc)
    async def back_legacy(self, ctx: CustomContext):
        await self.back.callback(self=self, inter=ctx)

    @check_stage_topic()
    @is_dj()
    @has_player()
    @check_queue_loading()
    @check_voice()
    @commands.max_concurrency(1, commands.BucketType.member)
    @commands.slash_command(
        description=f"{desc_prefix}Quay l·∫°i b√†i h√°t tr∆∞·ªõc.", dm_permission=False,
        extras={"only_voiced": True}, cooldown=skip_back_cd, max_concurrency=skip_back_mc
    )
    async def back(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not len(player.queue) and (player.keep_connected or not len(player.played)):
            await player.seek(0)
            await self.interaction_message(inter, "tr·ªü l·∫°i ph·∫ßn ƒë·∫ßu c·ªßa b√†i h√°t.", emoji="‚è™")
            return

        try:
            track = player.played.pop()
        except:
            track = player.queue.pop()
            

        if player.current and not player.current.autoplay:
            player.queue.appendleft(player.current)

        player.last_track = None

        player.queue.appendleft(track)

        if isinstance(inter, disnake.MessageInteraction):
            interaction = inter
            player.set_command_log(text=f"{inter.author.mention} tr·ªü l·∫°i v·ªõi b√†i h√°t hi·ªán t·∫°i.", emoji="‚èÆÔ∏è")
            await inter.response.defer()
        else:

            interaction = None

            t = player.queue[0]

            txt = [
                "tr·ªü l·∫°i v·ªõi b√†i h√°t hi·ªán t·∫°i.",
                f"‚èÆÔ∏è **‚†Ç{inter.author.mention} tr·ªü l·∫°i v·ªõi b√†i h√°t:\n‚ï∞[`{fix_characters(t.title, 43)}`]({t.uri or t.search_uri})**"
            ]

            await self.interaction_message(inter, txt, emoji="‚èÆÔ∏è", store_embed=True)

        if player.loop == "current":
            player.loop = False

        player.ignore_np_once = True

        if not player.current:
            await player.process_next(inter=interaction)
        else:
            player.is_previows_music = True
            await player.track_end()
            await player.process_next(inter=interaction, force_np=True)

    @check_stage_topic()
    @check_queue_loading()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}B·ªè phi·∫øu ƒë·ªÉ b·ªè qua b√†i h√°t hi·ªán t·∫°i.",
        extras={"only_voiced": True}, dm_permission=False
    )
    async def voteskip(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        embed = disnake.Embed()

        if inter.author.id in player.votes:
            raise GenericError("**B·∫°n ƒë√£ b·ªè phi·∫øu ƒë·ªÉ b·ªè qua √¢m nh·∫°c hi·ªán t·∫°i.**")

        embed.colour = self.bot.get_color(guild.me)

        txt = [
            f"ƒê∆∞·ª£c b√¨nh ch·ªçn ƒë·ªÉ b·ªè qua √¢m nh·∫°c hi·ªán t·∫°i (phi·∫øu b·∫ßu: {len(player.votes) + 1}/{self.bot.config['VOTE_SKIP_AMOUNT']}).",
            f"{inter.author.mention} ƒê∆∞·ª£c b√¨nh ch·ªçn ƒë·ªÉ b·ªè qua √¢m nh·∫°c hi·ªán t·∫°i (phi·∫øu b·∫ßu: {len(player.votes) + 1}/{self.bot.config['VOTE_SKIP_AMOUNT']}).",
        ]

        if len(player.votes) < self.bot.config.get('VOTE_SKIP_AMOUNT', 3):
            embed.description = txt
            player.votes.add(inter.author.id)
            await self.interaction_message(inter, txt, emoji="‚úã")
            return

        await self.interaction_message(inter, txt, emoji="‚úã")
        await player.track_end()
        await player.process_next()

    volume_cd = commands.CooldownMapping.from_cooldown(1, 7, commands.BucketType.member)
    volume_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(name="volume", description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng √¢m nh·∫°c.", aliases=["vol", "v"], only_voiced=True,
                  cooldown=volume_cd, max_concurrency=volume_mc, usage="{prefix}{cmd} [m·ª©c]\nEx: {prefix}{cmd} 50")
    async def volume_legacy(self, ctx: CustomContext, level: int):

        if not 4 < level < 151:
            raise GenericError("**L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Ch·ªçn t·ª´ 5 ƒë·∫øn 150**", self_delete=7)

        await self.volume.callback(self=self, inter=ctx, value=int(level))

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(description=f"{desc_prefix}ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng √¢m nh·∫°c.", extras={"only_voiced": True},
                            cooldown=volume_cd, max_concurrency=volume_mc, dm_permission=False)
    async def volume(
            self,
            inter: disnake.AppCmdInter, *,
            value: int = commands.Param(name="level", description="Ch·ªçn t·ª´ 5 ƒë·∫øn 150", min_value=5.0, max_value=150.0)
    ):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        embed = disnake.Embed(color=disnake.Colour.red())

        if value is None:

            view = VolumeInteraction(inter)

            embed.colour = self.bot.get_color(guild.me)
            embed.description = "**Ch·ªçn m·ª©c √¢m l∆∞·ª£ng b√™n d∆∞·ªõi:**"

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"Th√¥ng qua: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            await inter.send(embed=embed, ephemeral=await self.is_request_channel(inter), view=view)
            await view.wait()
            if view.volume is None:
                return

            value = view.volume

        elif not 4 < value < 151:
            raise GenericError("√Çm l∆∞·ª£ng ph·∫£i n·∫±m trong kho·∫£ng t·ª´ ** 5 ** ƒë·∫øn ** 150**.")

        await player.set_volume(value)

        txt = [f"ƒëi·ªÅu ch·ªânh √Çm l∆∞·ª£ng th√†nh **{value}%**", f"üîä **‚†Ç{inter.author.mention} ƒëi·ªÅu ch·ªânh √Çm l∆∞·ª£ng th√†nh {value}%**"]
        await self.interaction_message(inter, txt, emoji="üîä")

    pause_resume_cd = commands.CooldownMapping.from_cooldown(2, 7, commands.BucketType.member)
    pause_resume_mc =commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(name="pause", aliases=["pausar"], description="T·∫°m d·ª´ng √¢m nh·∫°c.", only_voiced=True,
                  cooldown=pause_resume_cd, max_concurrency=pause_resume_mc)
    async def pause_legacy(self, ctx: CustomContext):
        await self.pause.callback(self=self, inter=ctx)

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}T·∫°m d·ª´ng b√†i h√°t.", extras={"only_voiced": True},
        cooldown=pause_resume_cd, max_concurrency=pause_resume_mc
    )
    async def pause(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if player.paused:
            raise GenericError("**B√†i h√°t ƒë√£ b·ªã t·∫°m d·ª´ng.**")

        await player.set_pause(True)

        txt = ["t·∫°m d·ª´ng √¢m nh·∫°c.", f"‚è∏Ô∏è **‚†Ç{inter.author.mention} ƒë√£ t·∫°m d·ª´ng b√†i h√°t.**"]

        await self.interaction_message(inter, txt, rpc_update=True, emoji="‚è∏Ô∏è")
        await player.update_stage_topic()

    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(name="resume", aliases=["unpause"], description="Ti·∫øp t·ª•c √¢m nh·∫°c.", only_voiced=True,
                  cooldown=pause_resume_cd, max_concurrency=pause_resume_mc)
    async def resume_legacy(self, ctx: CustomContext):
        await self.resume.callback(self=self, inter=ctx)

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Ti·∫øp t·ª•c √¢m nh·∫°c.", dm_permission=False,
        extras={"only_voiced": True}, cooldown=pause_resume_cd, max_concurrency=pause_resume_mc
    )
    async def resume(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not player.paused:
            raise GenericError("**B√†i h√°t kh√¥ng b·ªã t·∫°m d·ª´ng.**")

        await player.set_pause(False)

        txt = ["ti·∫øp t·ª•c b√†i h√°t.", f"‚ñ∂Ô∏è **‚†Ç{inter.author.mention} Ti·∫øp t·ª•c b√†i h√°t**"]
        await self.interaction_message(inter, txt, rpc_update=True, emoji="‚ñ∂Ô∏è")
        await player.update_stage_topic()

    seek_cd = commands.CooldownMapping.from_cooldown(2, 10, commands.BucketType.member)
    seek_mc =commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @check_stage_topic()
    @is_dj()
    @check_queue_loading()
    @has_source()
    @check_voice()
    @pool_command(name="seek", aliases=["sk"], description="Tua b√†i h√°t ƒë·∫øn m·ªôt th·ªùi gian c·ª• th·ªÉ.",
                  only_voiced=True, cooldown=seek_cd, max_concurrency=seek_mc,
                  usage="{prefix}{cmd} [time]\n"
                        "Ex 1: {prefix}{cmd} 10 (time 0:10)\n"
                        "Ex 2: {prefix}{cmd} 1:45 (time 1:45)")
    async def seek_legacy(self, ctx: CustomContext, *, position: str):
        await self.seek.callback(self=self, inter=ctx, position=position)

    @check_stage_topic()
    @is_dj()
    @check_queue_loading()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Tua b√†i h√°t ƒë·∫øn m·ªôt th·ªùi gian c·ª• th·ªÉ.",
        extras={"only_voiced": True}, cooldown=seek_cd, max_concurrency=seek_mc, dm_permission=False
    )
    async def seek(
            self,
            inter: disnake.AppCmdInter,
            position: str = commands.Param(name="time", description="Th·ªùi gian ƒë·ªÉ ti·∫øn/tr·ªü l·∫°i (ex: 1:45 / 40 / 0:30)")
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if player.current.is_stream:
            raise GenericError("**B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y trong livestream.**")

        position = position.split(" | ")[0].replace(" ", ":")

        seconds = string_to_seconds(position)

        if seconds is None:
            raise GenericError(
                "**B·∫°n ƒë√£ s·ª≠ d·ª•ng m·ªôt th·ªùi gian kh√¥ng h·ª£p l·ªá !S·ª≠ d·ª•ng gi√¢y (1 ho·∫∑c 2 ch·ªØ s·ªë) ho·∫∑c ·ªü ƒë·ªãnh d·∫°ng (ph√∫t):(gi√¢y)**")

        milliseconds = seconds * 1000

        if milliseconds < 0:
            milliseconds = 0

        if milliseconds > player.position:

            emoji = "‚è©"

            txt = [
                f"ƒë√£ tua th·ªùi gian c·ªßa b√†i h√°t ƒë·∫øn: `{time_format(milliseconds)}`",
                f"{emoji} **‚†Ç{inter.author.mention} tua th·ªùi gian c·ªßa b√†i h√°t ƒë·∫øn:** `{time_format(milliseconds)}`"
            ]

        else:

            emoji = "‚è™"

            txt = [
                f" ƒë√£ tua th·ªùi gian c·ªßa b√†i h√°t tr·ªü l·∫°i: `{time_format(milliseconds)}`",
                f"{emoji} **‚†Ç{inter.author.mention} ƒë∆∞a th·ªùi gian c·ªßa b√†i h√°t tr·ªü l·∫°i:** `{time_format(milliseconds)}`"
            ]

        await player.seek(milliseconds)

        if player.paused:
            await player.set_pause(False)

        await self.interaction_message(inter, txt, emoji=emoji)

        await asyncio.sleep(2)
        await player.update_stage_topic()
        await player.process_rpc()

    @seek.autocomplete("time")
    async def seek_suggestions(self, inter: disnake.Interaction, query: str):

        try:
            if not inter.author.voice:
                return
        except AttributeError:
            pass

        if query:
            return [time_format(string_to_seconds(query)*1000)]

        try:
            await check_pool_bots(inter, only_voiced=True)
            bot = inter.music_bot
        except:
            return

        try:
            player: LavalinkPlayer = bot.music.players[inter.guild_id]
        except KeyError:
            return

        if not player.current or player.current.is_stream:
            return

        seeks = []

        if player.current.duration >= 90000:
            times = [int(n * 0.5 * 10) for n in range(20)]
        else:
            times = [int(n * 1 * 10) for n in range(20)]

        for p in times:
            percent = percentage(p, player.current.duration)
            seeks.append(f"{time_format(percent)} | {p}%")

        return seeks

    loop_cd = commands.CooldownMapping.from_cooldown(3, 5, commands.BucketType.member)
    loop_mc =commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(
        description=f"Ch·ªçn Ch·∫ø ƒë·ªô l·∫∑p l·∫°i gi·ªØa: b√†i h√°t hi·ªán t·∫°i / h√†ng / T·∫Øt / S·ªë l·∫ßn (s·ª≠ d·ª•ng s·ªë).",
        only_voiced=True, cooldown=loop_cd, max_concurrency=loop_mc,
        usage="{prefix}{cmd} <quantidade|modo>\nEx 1: {prefix}{cmd} 1\nEx 2: {prefix}{cmd} queue")
    async def loop(self, ctx: CustomContext, mode: str = None):

        if not mode:

            embed = disnake.Embed(
                description="**Ch·ªçn ch·∫ø ƒë·ªô l·∫∑p l·∫°i:**",
                color=self.bot.get_color(ctx.guild.me)
            )

            msg = await ctx.send(
                ctx.author.mention,
                embed=embed,
                components=[
                    disnake.ui.Select(
                        placeholder="Ch·ªçn m·ªôt t√πy ch·ªçn:",
                        custom_id="loop_mode_legacy",
                        options=[
                            disnake.SelectOption(label="B√†i h√°t hi·ªán t·∫°i", value="current"),
                            disnake.SelectOption(label="H√†ng ƒë·ª£i", value="queue"),
                            disnake.SelectOption(label="V√¥ hi·ªáu h√≥a", value="off")
                        ]
                    )
                ]
            )

            try:
                select: disnake.MessageInteraction = await self.bot.wait_for(
                    "dropdown", timeout=30,
                    check=lambda i: i.message.id == msg.id and i.author == ctx.author
                )
            except asyncio.TimeoutError:
                embed.description = "Th·ªùi gian l·ª±a ch·ªçn ƒë√£ h·∫øt!"
                try:
                    await msg.edit(embed=embed, view=None)
                except:
                    pass
                return

            mode = select.data.values[0]
            ctx.store_message = msg

        if mode.isdigit():

            if len(mode) > 2 or int(mode) > 10:
                raise GenericError(f"**S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá: {mode}**\n"
                                   "`S·ªë l∆∞·ª£ng t·ªëi ƒëa cho ph√©p:10`")

            await self.loop_amount.callback(self=self, inter=ctx, value=int(mode))
            return

        if mode not in ('current', 'queue', 'off'):
            raise GenericError("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Ch·ªçn gi·ªØa: Hi·ªán t·∫°i/H√†ng ƒë·ª£i/T·∫ÆT")

        await self.loop_mode.callback(self=self, inter=ctx, mode=mode)

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Ch·ªçn Ch·∫ø ƒë·ªô l·∫∑p l·∫°i gi·ªØa: B√†i h√°t hi·ªán t·∫°i / H√†ng ƒë·ª£i ho·∫∑c T·∫Øt.",
        extras={"only_voiced": True}, cooldown=loop_cd, max_concurrency=loop_mc
    )
    async def loop_mode(
            self,
            inter: disnake.AppCmdInter,
            mode: str = commands.Param(
                name="mode",
                choices=[
                    disnake.OptionChoice(
                        disnake.Localized("B√†i h√°t hi·ªán t·∫°i", data={disnake.Locale.pt_BR: "M√∫sica Atual"}), "current"
                    ),
                    disnake.OptionChoice(
                        disnake.Localized("H√†ng ƒë·ª£i", data={disnake.Locale.pt_BR: "Fila"}), "queue"
                    ),
                    disnake.OptionChoice(
                        disnake.Localized("T·∫Øt", data={disnake.Locale.pt_BR: "Desativar"}), "off"
                    ),
                ]
            )
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if mode == player.loop:
            raise GenericError("**Ch·∫ø ƒë·ªô l·∫∑p l·∫°i ƒë√£ ch·ªçn ƒëang ho·∫°t ƒë·ªông...**")

        if mode == 'off':
            mode = False
            player.current.info["extra"]["track_loops"] = 0
            emoji = "‚≠ï"
            txt = ['V√¥ hi·ªáu h√≥a L·∫∑p l·∫°i.', f"{emoji} **‚†Ç{inter.author.mention} V√¥ hi·ªáu h√≥a L·∫∑p l·∫°i.**"]

        elif mode == "current":
            player.current.info["extra"]["track_loops"] = 0
            emoji = "üîÇ"
            txt = ["ƒê√£ k√≠ch ho·∫°t L·∫∑p l·∫°i c·ªßa b√†i h√°t hi·ªán t·∫°i.",
                   f"{emoji} **‚†Ç{inter.author.mention} ƒê√£ k√≠ch ho·∫°t L·∫∑p l·∫°i c·ªßa b√†i h√°t hi·ªán t·∫°i.**"]

        else:  # queue
            emoji = "üîÅ"
            txt = ["ƒë√£ k√≠ch ho·∫°t L·∫∑p l·∫°i c·ªßa h√†ng ƒë·ª£i.", f"{emoji} **‚†Ç{inter.author.mention} ƒë√£ k√≠ch ho·∫°t L·∫∑p l·∫°i c·ªßa h√†ng ƒë·ª£i.**"]

        player.loop = mode

        bot.loop.create_task(player.process_rpc())

        await self.interaction_message(inter, txt, emoji=emoji)

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}X√°c ƒë·ªãnh s·ªë l·∫ßn l·∫∑p l·∫°i c·ªßa b√†i h√°t hi·ªán t·∫°i.",
        extras={"only_voiced": True}, cooldown=loop_cd, max_concurrency=loop_mc, dm_permission=False,
    )
    async def loop_amount(
            self,
            inter: disnake.AppCmdInter,
            value: int = commands.Param(name="value", description="S·ªë l·∫ßn l·∫∑p l·∫°i.")
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.current.info["extra"]["track_loops"] = value

        txt = [
            f"c√†i ƒë·∫∑t s·ªë l·∫ßn l·∫∑p l·∫°i cho b√†i h√°t: "
            f"[`{(fix_characters(player.current.title, 25))}`]({player.current.uri or player.current.search_uri}) l√† **{value}** l·∫ßn.",
            f"üîÑ **‚†Ç{inter.author.mention} ƒë√£ cho b√†i h√°t l·∫∑p l·∫°i [{value}] l·∫ßn:**\n"
            f"‚ï∞[`{player.current.title}`]({player.current.uri or player.current.search_uri})"
        ]

        await self.interaction_message(inter, txt, rpc_update=True, emoji="üîÑ")

    remove_mc = commands.MaxConcurrency(1, per=commands.BucketType.guild, wait=False)

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="remove", aliases=["r", "del"], description="H·ªßy b·ªè m·ªôt b√†i h√°t c·ª• th·ªÉ kh·ªèi h√†ng ƒë·ª£i.",
                  only_voiced=True, max_concurrency=remove_mc, extras={"flags": case_sensitive_args},
                  usage="{prefix}{cmd} [nome]\nEx: {prefix}{cmd} sekai")
    async def remove_legacy(self, ctx: CustomContext, *, flags: str = ""):

        args, unknown = ctx.command.extras['flags'].parse_known_args(flags.split())

        if not unknown:
            raise GenericError("**B·∫°n ƒë√£ kh√¥ng th√™m t√™n c·ªßa b√†i h√°t.**")

        await self.remove.callback(self=self, inter=ctx, query=" ".join(unknown), case_sensitive=args.casesensitive)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}X√≥a m·ªôt b√†i h√°t c·ª• th·ªÉ kh·ªèi h√†ng ƒë·ª£i.",
        extras={"only_voiced": True}, max_concurrency=remove_mc, dm_permission=False
    )
    async def remove(
            self,
            inter: disnake.AppCmdInter,
            query: str = commands.Param(name="name", description="Nh·∫≠p t√™n b√†i h√°t."),
            case_sensitive: bool = commands.Param(
                name="exact_name", default=False,
                description="T√¨m ki·∫øm b√†i h√°t v·ªõi t√™n ch√≠nh x√°c thay v√¨ t√¨m ki·∫øm t·ª´ng t·ª´ trong t√™n c·ªßa √¢m nh·∫°c",

            )
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        try:
            index = queue_track_index(inter, bot, query, case_sensitive=case_sensitive)[0][0]
        except IndexError:
            raise GenericError(f"**Kh√¥ng c√≥ b√†i h√°t n√†o ph√π h·ª£p v·ªõi t√™n: {query}**")

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        track = player.queue[index]

        player.queue.remove(track)

        txt = [
            f"X√≥a b√†i h√°t [`{(fix_characters(track.title, 25))}`]({track.uri or track.search_uri}) Kh·ªèi h√†ng ƒë·ª£i.",
            f"‚ôªÔ∏è **‚†Ç{inter.author.mention} ƒê√£ lo·∫°i b·ªè b√†i h√°t: **\n‚ï∞[`{track.title}`]({track.uri or track.search_uri}) kh·ªèi h√†ng ƒë·ª£i"
        ]

        await self.interaction_message(inter, txt, emoji="‚ôªÔ∏è")

        await player.update_message()

    queue_manipulation_cd = commands.CooldownMapping.from_cooldown(2, 15, commands.BucketType.guild)

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="readd", aliases=["readicionar", "rdd"], only_voiced=True, cooldown=queue_manipulation_cd,
                  max_concurrency=remove_mc, description="ƒê∆∞a c√°c b√†i h√°t ƒë√£ ch∆°i v√†o l·∫°i trong h√†ng.")
    async def readd_legacy(self, ctx: CustomContext):
        await self.readd_songs.callback(self=self, inter=ctx)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}ƒê∆∞a c√°c b√†i h√°t ƒë√£ ƒë∆∞·ª£c ch∆°i v√†o l·∫°i trong h√†ng.", dm_permission=False,
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc
    )
    async def readd_songs(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not player.played and not player.failed_tracks:
            raise GenericError("**Kh√¥ng c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c th√™m v√†o.**")

        qsize = len(player.played) + len(player.failed_tracks)

        player.played.reverse()
        player.failed_tracks.reverse()
        player.queue.extend(player.failed_tracks)
        player.queue.extend(player.played)
        player.played.clear()
        player.failed_tracks.clear()

        txt = [
            f"ƒê∆∞a {qsize} B√†i h√°t v√†o l·∫°i trong h√†ng",
            f"üé∂ **‚†Ç{inter.author.mention} ƒê∆∞a {qsize} b√†i h√°t v√†o l·∫°i trong h√†ng**"
        ]

        await self.interaction_message(inter, txt, emoji="üé∂")

        await player.update_message()

        if not player.current:
            await player.process_next()
        else:
            await player.update_message()

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="rotate", aliases=["rt", "rotacionar"], only_voiced=True,
                  description="Xoay h√†ng ƒë·ª£i sang b√†i h√°t ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.",
                  cooldown=queue_manipulation_cd, max_concurrency=remove_mc, extras={"flags": case_sensitive_args},
                  usage="{prefix}{cmd} [nome]\nEx: {prefix}{cmd} sekai")
    async def rotate_legacy(self, ctx: CustomContext, *, flags: str = ""):

        args, unknown = ctx.command.extras['flags'].parse_known_args(flags.split())

        if not unknown:
            raise GenericError("**B·∫°n ƒë√£ kh√¥ng th√™m t√™n c·ªßa b√†i h√°t.**")

        await self.rotate.callback(self=self, inter=ctx, query=" ".join(unknown), case_sensitive=args.casesensitive)

    @is_dj()
    @check_queue_loading()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Xoay h√†ng ƒë·ª£i ƒë·∫øn b√†i h√°t ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.", dm_permission=False,
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc
    )
    async def rotate(
            self,
            inter: disnake.AppCmdInter,
            query: str = commands.Param(name="name", description="Nh·∫≠p t√™n b√†i h√°t."),
            case_sensitive: bool = commands.Param(
                name="exact_name", default=False,
                description="T√¨m ki·∫øm b√†i h√°t v·ªõi t√™n ch√≠nh x√°c thay v√¨ t√¨m ki·∫øm t·ª´ng t·ª´ trong t√™n c·ªßa b√†i h√°t",
            )
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        index = queue_track_index(inter, bot, query, case_sensitive=case_sensitive)

        if not index:
            raise GenericError(f"**Kh√¥ng c√≥ b√†i h√°t n√†o v·ªõi t√™n: {query}**")

        index = index[0][0]

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        track = player.queue[index]

        if index <= 0:
            raise GenericError(f"**B√†i h√°t **[`{track.title}`]({track.uri or track.search_uri}) ƒë√£ l√† b√†i ti·∫øp theo.")

        player.queue.rotate(0 - (index))

        txt = [
            f"Xoay h√†ng ƒë·ª£i sang b√†i h√°t [`{(fix_characters(track.title, limit=25))}`]({track.uri or track.search_uri}).",
            f"üîÉ **‚†Ç{inter.author.mention} Xoay d√≤ng v√†o b√†i h√°t:**\n‚ï∞[`{track.title}`]({track.uri or track.search_uri})."
        ]

        await self.interaction_message(inter, txt, emoji="üîÉ")

        await player.update_message()

    song_request_thread_cd = commands.CooldownMapping.from_cooldown(1, 120, commands.BucketType.guild)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.bot_has_guild_permissions(manage_threads=True)
    @pool_command(name="songrequestthread", aliases=["songrequest", "srt"], only_voiced=True,
                  description="T·∫°o m·ªôt cu·ªôc tr√≤ chuy·ªán ch·ªß ƒë·ªÅ/t·∫°m th·ªùi cho c√°c y√™u c·∫ßu b√†i h√°t (y√™u c·∫ßu √¢m nh·∫°c)")
    async def song_request_thread_legacy(self, ctx: CustomContext):

        await self.song_request_thread.callback(self=self, inter=ctx)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(extras={"only_voiced": True}, cooldown=song_request_thread_cd, dm_permission=False,
                            description=f"{desc_prefix}T·∫°o m·ªôt cu·ªôc tr√≤ chuy·ªán ch·ªß ƒë·ªÅ/t·∫°m th·ªùi cho c√°c y√™u c·∫ßu b√†i h√°t (y√™u c·∫ßu √¢m nh·∫°c)")
    async def song_request_thread(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        if not self.bot.intents.message_content:
            raise GenericError("**T√¥i hi·ªán kh√¥ng c√≥ √Ω ƒë·ªãnh ki·ªÉm tra n·ªôi dung tin nh·∫Øn "
                               "N·ªôi dung tin nh·∫Øn**")

        player: LavalinkPlayer = bot.music.players[guild.id]

        if player.static:
            raise GenericError("**B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y v·ªõi k√™nh y√™u c·∫ßu b√†i h√°t ƒë∆∞·ª£c c·∫•u h√¨nh.**")

        if player.has_thread:
            raise GenericError("**ƒê√£ c√≥ m·ªôt cu·ªôc tr√≤ chuy·ªán ch·ªß ƒë·ªÅ/ho·∫°t ƒë·ªông tr√™n ng∆∞·ªùi ch∆°i.**")

        if not isinstance(player.text_channel, disnake.TextChannel):
            raise GenericError(f"**Tr√¨nh ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i ƒëang ho·∫°t ƒë·ªông tr√™n m·ªôt k√™nh kh√¥ng t∆∞∆°ng th√≠ch v·ªõi "
                               f"T·∫°o ch·ªß ƒë·ªÅ/cu·ªôc tr√≤ chuy·ªán.**")

        if not player.controller_mode:
            raise GenericError("**Giao di·ªán hi·ªán t·∫°i kh√¥ng t∆∞∆°ng th√≠ch v·ªõi h·ªá th·ªëng y√™u c·∫ßu b√†i h√°t"
                                "qua ch·ªß ƒë·ªÅ/cu·ªôc tr√≤ chuy·ªán\n\n"
                                "L∆∞u √Ω:** `H·ªá th·ªëng n√†y y√™u c·∫ßu giao di·ªán s·ª≠ d·ª•ng c√°c n√∫t.`")

        if not player.text_channel.permissions_for(guild.me).send_messages:
            raise GenericError(f"**{bot.user.mention} kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn tr√™n k√™nh {player.text_channel.mention}.**")

        if not player.text_channel.permissions_for(guild.me).create_public_threads:
            raise GenericError(f"**{bot.user.mention} kh√¥ng c√≥ quy·ªÅn t·∫°o ch·ªß ƒë·ªÅ c√¥ng khai.**")

        if not [m for m in player.guild.me.voice.channel.members if not m.bot and
                player.text_channel.permissions_for(m).send_messages_in_threads]:
            raise GenericError(f"**Kh√¥ng c√≥ th√†nh vi√™n n√†o trong k√™nh <#{player.channel_id}> c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn"
                                f"trong c√°c ch·ªß ƒë·ªÅ tr√™n k√™nh {player.text_channel.mention}")

        await inter.response.defer(ephemeral=True)

        thread = await player.message.create_thread(name=f"K√™nh y√™u c·∫ßu nh·∫°c c·ªßa {bot.user.name} ", auto_archive_duration=10080)

        txt = [
            "ƒê√£ k√≠ch ho·∫°t h·ªá th·ªëng tr√≤ chuy·ªán t·∫°m th·ªùi/ch·ªß ƒë·ªÅ cho y√™u c·∫ßu √¢m nh·∫°c.",
            f"üí¨ **‚†Ç{inter.author.mention} ƒê√£ t·∫°o [Ch·ªß ƒë·ªÅ/cu·ªôc tr√≤ chuy·ªán]({thread.jump_url}) t·∫°m th·ªùi cho y√™u c·∫ßu √¢m nh·∫°c.**"
        ]

        await self.interaction_message(inter, txt, emoji="üí¨", defered=True, force=True)

    filtercd = commands.CooldownMapping.from_cooldown(1, 7, commands.BucketType.guild)
    filtermc = commands.MaxConcurrency(1, per=commands.BucketType.guild, wait=False)

    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(name="nightcore", aliases=["nc"], only_voiced=True, cooldown=filtercd, max_concurrency=filtermc,
                  description="K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a hi·ªáu ·ª©ng Nightcore.")
    async def nightcore_legacy(self, ctx: CustomContext):

        await self.nightcore.callback(self=self, inter=ctx)

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a hi·ªáu ·ª©ng Nightcore.",
        extras={"only_voiced": True}, cooldown=filtercd, max_concurrency=filtermc, dm_permission=False,
    )
    async def nightcore(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.nightcore = not player.nightcore

        if player.nightcore:
            await player.turnallfilteroff()
            await asyncio.sleep(2)
            await player.set_timescale(pitch=1.2, speed=1.1)
            txt = "k√≠ch ho·∫°t"
        else:
            await player.set_timescale(enabled=False)
            await player.update_filters()
            txt = "V√¥ hi·ªáu h√≥a"

        txt = [f"{txt} Hi·ªáu ·ª©ng Nightcore.", f"üá≥ **‚†Ç{inter.author.mention} {txt} Hi·ªáu ·ª©ng Nightcore.**"]

        await self.interaction_message(inter, txt, emoji="üá≥")
        
    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a hi·ªáu ·ª©ng 3D.",
        extras={"only_voiced": True}, cooldown=filtercd, max_concurrency=filtermc, dm_permission=False,
    )
    async def filter3d(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.filter3d = not player.filter3d

        if player.filter3d:
            await player.turnallfilteroff()
            await asyncio.sleep(2)
            await player.set_rotation(sample_rate=0.3)
            txt = "k√≠ch ho·∫°t"
        else:
            await player.set_rotation(enabled=False)
            await player.update_filters()
            txt = "V√¥ hi·ªáu h√≥a"

        txt = [f"{txt} Hi·ªáu ·ª©ng 3D.", f"üîä **‚†Ç{inter.author.mention} {txt} Hi·ªáu ·ª©ng 3D.**"]

        await self.interaction_message(inter, txt, emoji="üîä")  
        
    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a hi·ªáu ·ª©ng slowmo.",
        extras={"only_voiced": True}, cooldown=filtercd, max_concurrency=filtermc, dm_permission=False,
    )
    async def filter_slowmo(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.slowmo = not player.slowmo

        if player.slowmo:
            await player.turnallfilteroff()
            await asyncio.sleep(2)
            await player.set_timescale(speed=0.75, pitch=1.0, rate=0.8)
            txt = "k√≠ch ho·∫°t"
        else:
            await player.set_timescale(enabled=False)
            await player.update_filters()
            txt = "V√¥ hi·ªáu h√≥a"

        txt = [f"{txt} Hi·ªáu ·ª©ng Slowmo.", f"üîä **‚†Ç{inter.author.mention} {txt} Hi·ªáu ·ª©ng Slowmo.**"]

        await self.interaction_message(inter, txt, emoji="üîä")  

    controller_cd = commands.CooldownMapping.from_cooldown(1, 10, commands.BucketType.member)
    controller_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @has_source()
    @check_voice()
    @pool_command(name="controller", aliases=["np", "ctl"], only_voiced=True, cooldown=controller_cd,
                  max_concurrency=controller_mc, description="G·ª≠i b·ªô ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i ƒë·∫øn m·ªôt k√™nh c·ª• th·ªÉ/hi·ªán t·∫°i.")
    async def controller_legacy(self, ctx: CustomContext):
        await self.controller.callback(self=self, inter=ctx)

    @has_source()
    @check_voice()
    @commands.slash_command(description=f"{desc_prefix}G·ª≠i b·ªô ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i ƒë·∫øn m·ªôt k√™nh c·ª• th·ªÉ/hi·ªán t·∫°i.",
                            extras={"only_voiced": True}, cooldown=controller_cd, max_concurrency=controller_mc,
                            dm_permission=False)
    async def controller(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
            channel = bot.get_channel(inter.channel.id)
        except AttributeError:
            bot = inter.bot
            guild = inter.guild
            channel = inter.channel

        player: LavalinkPlayer = bot.music.players[guild.id]

        if player.static:
            raise GenericError("L·ªánh n√†y kh√¥ng th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ch·∫ø ƒë·ªô tr√¨nh ph√°t c·ªë ƒë·ªãnh.")

        if player.has_thread:
            raise GenericError("**L·ªánh n√†y kh√¥ng th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng v·ªõi m·ªôt cu·ªôc tr√≤ chuy·ªán t√≠ch c·ª±c trong"
                               f"[tin nh·∫Øn]({player.message.jump_url}) c·ªßa ng∆∞·ªùi ch∆°i.**")

        if not inter.response.is_done():
            await inter.response.defer(ephemeral=True)

        if channel != player.text_channel:

            await is_dj().predicate(inter)

            try:

                player.set_command_log(
                    text=f"{inter.author.mention} ƒë∆∞a ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i ƒë·∫øn k√™nh {inter.channel.mention}.",
                    emoji="üí†"
                )

                embed = disnake.Embed(
                    description=f"üí† **‚†Ç{inter.author.mention} ƒë∆∞a ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i ƒë·∫øn k√™nh:** {channel.mention}",
                    color=self.bot.get_color(guild.me)
                )

                try:
                    if bot.user.id != self.bot.user.id:
                        embed.set_footer(text=f"Th√¥ng qua bot: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
                except AttributeError:
                    pass

                await player.text_channel.send(embed=embed)

            except:
                pass

        await player.destroy_message()

        player.text_channel = channel

        await player.invoke_np()

        if not isinstance(inter, CustomContext):
            await inter.edit_original_message("**Ng∆∞·ªùi ch∆°i ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i th√†nh c√¥ng!**")

    @is_dj()
    @has_player()
    @check_voice()
    @commands.user_command(name=disnake.Localized("Add DJ", data={disnake.Locale.pt_BR: "Adicionar DJ"}),
                           extras={"only_voiced": True}, dm_permission=False)
    async def adddj_u(self, inter: disnake.UserCommandInteraction):
        await self.add_dj(interaction=inter, user=inter.target)

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="adddj", aliases=["adj"], only_voiced=True,
                  description="Th√™m m·ªôt th√†nh vi√™n v√†o danh s√°ch c·ªßa DJ v√†o phi√™n ng∆∞·ªùi ch∆°i hi·ªán t·∫°i.",
                  usage="{prefix}{cmd} [id|t√™n|@user]\nEx: {prefix}{cmd} @anhbasin")
    async def add_dj_legacy(self, ctx: CustomContext, user: disnake.Member):
        await self.add_dj.callback(self=self, inter=ctx, user=user)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Th√™m th√†nh vi√™n v√†o danh s√°ch c·ªßa DJ v√†o phi√™n tr√¨nh ph√°t hi·ªán t·∫°i.",
        extras={"only_voiced": True}, dm_permission=False
    )
    async def add_dj(
            self,
            inter: disnake.AppCmdInter, *,
            user: disnake.User = commands.Param(name="member", description="Th√†nh vi√™n ƒë∆∞·ª£c th√™m v√†o.")
    ):

        error_text = None

        try:
            bot = inter.music_bot
            guild = inter.music_guild
            channel = bot.get_channel(inter.channel.id)
        except AttributeError:
            bot = inter.bot
            guild = inter.guild
            channel = inter.channel

        player: LavalinkPlayer = bot.music.players[guild.id]

        user = guild.get_member(user.id)

        if user.bot:
            error_text = "**B·∫°n th√¥ng th·ªÉ th√™m bot v√†o danh s√°ch dj.**"
        elif user == inter.author:
            error_text = "**B·∫°n kh√¥ng th·ªÉ t·ª± th√™m v√†o danh s√°ch c·ªßa DJ.**"
        elif user.guild_permissions.manage_channels:
            error_text = f"B·∫°n kh√¥ng th·ªÉ th√™m th√†nh vi√™n {user.mention} Trong danh s√°ch DJ (anh ·∫•y / c√¥ ·∫•y c√≥ quy·ªÅn qu·∫£n l√Ω c√°c k√™nh **)."
        elif user.id == player.player_creator:
            error_text = f"**C√°c th√†nh vi√™n {user.mention} l√† ng∆∞·ªùi t·∫°o ra ng∆∞·ªùi ch∆°i ...**"
        elif user.id in player.dj:
            error_text = f"**C√°c th√†nh vi√™n {user.mention} ƒë√£ n·∫±m trong danh s√°ch c·ªßa DJ**"

        if error_text:
            raise GenericError(error_text)

        player.dj.add(user.id)

        text = [f"th√™m {user.mention} v√†o danh s√°ch DJ.",
                f"<:Play_With_Me:1128555926417330207> **‚†Ç{inter.author.mention} ƒë√£ th√™m {user.mention} V√†o danh s√°ch DJ**"]

        if (player.static and channel == player.text_channel) or isinstance(inter.application_command,
                                                                            commands.InvokableApplicationCommand):
            await inter.send(f"{user.mention} ƒê√£ th√™m v√†o danh s√°ch c·ªßa DJ!{player.controller_link}")

        await self.interaction_message(inter, txt=text, emoji="<:Play_With_Me:1128555926417330207>")

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}X√≥a m·ªôt th√†nh vi√™n kh·ªèi danh s√°ch c·ªßa DJ t·∫°i phi√™n ng∆∞·ªùi ch∆°i hi·ªán t·∫°i.",
        extras={"only_voiced": True}
    )
    async def remove_dj(
            self,
            inter: disnake.AppCmdInter, *,
            user: disnake.User = commands.Param(name="member", description="Th√†nh vi√™n ƒë∆∞·ª£c th√™m v√†o.")
    ):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
            channel = bot.get_channel(inter.channel.id)
        except AttributeError:
            bot = inter.bot
            guild = inter.guild
            channel = inter.channel

        player: LavalinkPlayer = bot.music.players[guild.id]

        user = guild.get_member(user.id)

        if user.id == player.player_creator:
            if inter.author.guild_permissions.manage_guild:
                player.player_creator = None
            else:
                raise GenericError(f"**Th√†nh vi√™n {user.mention} l√† ng∆∞·ªùi ƒë√£ y√™u c·∫ßu phi√™n n√†y.**")

        elif user.id not in player.dj:
            GenericError(f"C√°c th√†nh vi√™n {user.mention}  kh√¥ng ·ªü trong danh s√°ch DJ's")

        else:
            player.dj.remove(user.id)

        text = [f"LO·∫†I B·ªé {user.mention} kh·ªèi danh s√°ch DJ's.",
                f"<:verify:1134033164151566460> **‚†Ç{inter.author.mention} LO·∫†I B·ªé {user.mention} kh·ªèi danh s√°ch DJ's.**"]

        if (player.static and channel == player.text_channel) or isinstance(inter.application_command,
                                                                            commands.InvokableApplicationCommand):
            await inter.send(f"{user.mention} ƒê∆∞·ª£c th√™m v√†o danh s√°ch c·ªßa DJ's!{player.controller_link}")

        await self.interaction_message(inter, txt=text, emoji="<:verify:1134033164151566460>")

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="stop", aliases=["leave", "parar"], only_voiced=True,
                  description="D·ª´ng ng∆∞·ªùi ch∆°i v√† ng·∫Øt k·∫øt n·ªëi t√¥i kh·ªèi k√™nh gi·ªçng n√≥i.")
    async def stop_legacy(self, ctx: CustomContext):
        await self.stop.callback(self=self, inter=ctx)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}D·ª´ng ng∆∞·ªùi ch∆°i v√† ng·∫Øt k·∫øt n·ªëi t√¥i kh·ªèi k√™nh gi·ªçng n√≥i.",
        extras={"only_voiced": True}, dm_permission=False
    )
    async def stop(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
            inter_destroy = inter if bot.user.id == self.bot.user.id else None
        except AttributeError:
            bot = inter.bot
            guild = inter.guild
            inter_destroy = inter

        player: LavalinkPlayer = bot.music.players[inter.guild_id]
        player.command_log = f"{inter.author.mention} **ƒë√£ d·ª´ng ng∆∞·ªùi ch∆°i!**"

        if isinstance(inter, disnake.MessageInteraction):
            await player.playerdestroy(inter=inter_destroy)
        else:

            embed = disnake.Embed(
                color=self.bot.get_color(guild.me),
                description=f"<:verify:1134033164151566460> **‚†Ç{inter.author.mention} ƒë√£ d·ª´ng ng∆∞·ªùi ch∆°i.**"
            )

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"Th√¥ng qua {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            await inter.send(
                embed=embed,
                ephemeral=player.static and player.text_channel.id == inter.channel_id
            )
            await player.playerdestroy(inter=inter)

    @check_queue_loading()
    @has_player()
    @check_voice()
    @pool_command(
        name="savequeue", aliases=["sq", "svq"],
        only_voiced=True, cooldown=queue_manipulation_cd, max_concurrency=remove_mc,
        description="Th·ª≠ nghi·ªám: L∆∞u b√†i h√°t hi·ªán t·∫°i v√† h√†ng ƒë·ª£i ƒë·ªÉ s·ª≠ d·ª•ng ch√∫ng b·∫•t k·ª≥ l√∫c n√†o."
    )
    async def savequeue_legacy(self, ctx: CustomContext):
        await self.save_queue.callback(self=self, inter=ctx)

    @check_queue_loading()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Th·ª≠ nghi·ªám: L∆∞u b√†i h√°t hi·ªán t·∫°i v√† h√†ng ƒë·ª£i ƒë·ªÉ s·ª≠ d·ª•ng ch√∫ng b·∫•t k·ª≥ l√∫c n√†o.",
        extras={"only_voiced": True}, dm_permission=False, cooldown=queue_manipulation_cd, max_concurrency=remove_mc
    )
    async def save_queue(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = bot.get_guild(inter.guild_id)

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        tracks = []

        if player.current:
            player.current.info["id"] = player.current.id
            if player.current.playlist:
                player.current.info["playlist"] = {"name": player.current.playlist_name, "url": player.current.playlist_url}
            tracks.append(player.current.info)

        for t in player.queue:
            t.info["id"] = t.id
            if t.playlist:
                t.info["playlist"] = {"name": t.playlist_name, "url": t.playlist_url}
            tracks.append(t.info)

        if len(tracks) < 3:
            raise GenericError(f"**B·∫°n ph·∫£i c√≥ √≠t nh·∫•t 3 b√†i h√°t ƒë·ªÉ l∆∞u (hi·ªán t·∫°i v√†/ho·∫∑c trong h√†ng ƒë·ª£i)**")

        if not os.path.isdir(f"./local_database/saved_queues_v1/users"):
            os.makedirs(f"./local_database/saved_queues_v1/users")

        async with aiofiles.open(f"./local_database/saved_queues_v1/users/{inter.author.id}.pkl", "wb") as f:
            await f.write(
                zlib.compress(
                    pickle.dumps(
                        {
                            "tracks": tracks, "created_at": disnake.utils.utcnow(), "guild_id": inter.guild_id
                        }
                    )
                )
            )

        await inter.response.defer(ephemeral=True)

        global_data = await self.bot.get_global_data(guild.id, db_name=DBModel.guilds)

        try:
            slashcmd = f"</play:" + str(self.bot.pool.controller_bot.get_global_command_named("play", cmd_type=disnake.ApplicationCommandType.chat_input).id) + ">"
        except AttributeError:
            slashcmd = "/play"

        embed = disnake.Embed(
            color=bot.get_color(guild.me),
            description=f"### {inter.author.mention}: H√†ng ƒë·ª£i ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!!\n"
                         f"**B√†i h√°t ƒë√£ l∆∞u:** `{len(tracks)}`\n"
                         "### L√†m th·∫ø n√†o ƒë·ªÉ s·ª≠ d·ª•ng n√≥?\n"
                         f"* S·ª≠ d·ª•ng l·ªánh {slashcmd} (ch·ªçn trong ph·∫ßn t·ª± ƒë·ªông ho√†n th√†nh t√¨m ki·∫øm)\n"
                         "* Nh·∫•p v√†o n√∫t ph√°t/ch·ªçn/t√≠ch h·ª£p tr√¨nh ph√°t y√™u th√≠ch.\n"
                         f"* S·ª≠ d·ª•ng l·ªánh {global_data['prefix'] or self.bot.default_prefix}{self.play_legacy.name}"
                         "kh√¥ng bao g·ªìm t√™n ho·∫∑c li√™n k·∫øt t·ªõi b√†i h√°t/video."
        )

        embed.set_footer(text="L∆∞u √Ω: ƒê√¢y l√† m·ªôt t√≠nh nƒÉng mang t√≠nh th·ª≠ nghi·ªám, h√†ng ƒë·ª£i ƒë√£ l∆∞u c√≥ th·ªÉ thay ƒë·ªïi ho·∫∑c "
                               "ƒë√£ b·ªã x√≥a trong c√°c b·∫£n c·∫≠p nh·∫≠t trong t∆∞∆°ng lai")

        if isinstance(inter, CustomContext):
            await inter.reply(embed=embed)
        else:
            await inter.edit_original_response(embed=embed)


    @has_player()
    @check_voice()
    @commands.slash_command(name="queue", extras={"only_voiced": True}, dm_permission=False)
    async def q(self, inter):
        pass

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="shuffle", aliases=["sf", "shf", "sff", "misturar"], only_voiced=True,
                  description="Tr·ªôn b√†i h√°t trong h√†ng ƒë·ª£i", cooldown=queue_manipulation_cd, max_concurrency=remove_mc)
    async def shuffle_legacy(self, ctx: CustomContext):
        await self.shuffle_.callback(self, inter=ctx)

    @is_dj()
    @q.sub_command(
        name="shuffle",
        description=f"{desc_prefix}Tr·ªôn b√†i h√°t trong h√†ng ƒë·ª£i",
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc)
    async def shuffle_(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if len(player.queue) < 3:
            raise GenericError("**D√≤ng ph·∫£i c√≥ √≠t nh·∫•t 3 b√†i h√°t ƒë·ªÉ ƒë∆∞·ª£c tr·ªôn l·∫´n.**")

        shuffle(player.queue)

        await self.interaction_message(
            inter,
            ["Tr·ªôn c√°c b√†i h√°t trong h√†ng ƒë·ª£i.",
             f"üîÄ **‚†Ç{inter.author.mention} Tr·ªôn c√°c b√†i h√°t trong h√†ng ƒë·ª£i.**"],
            emoji="üîÄ"
        )

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="reverse", aliases=["invert", "inverter", "rv"], only_voiced=True,
                  description="ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± c·ªßa c√°c b√†i h√°t trong h√†ng", cooldown=queue_manipulation_cd, max_concurrency=remove_mc)
    async def reverse_legacy(self, ctx: CustomContext):
        await self.reverse.callback(self=self, inter=ctx)

    @is_dj()
    @q.sub_command(
        description=f"{desc_prefix}ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± c·ªßa c√°c b√†i h√°t trong h√†ng",
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc
    )
    async def reverse(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if len(player.queue) < 2:
            raise GenericError("**D√≤ng ph·∫£i c√≥ √≠t nh·∫•t 2 b√†i h√°t ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c th·ª© t·ª±.**")

        player.queue.reverse()
        await self.interaction_message(
            inter,
            txt=["ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± c·ªßa c√°c b√†i h√°t trong h√†ng.",
                 f"üîÑ **‚†Ç{inter.author.mention} Anh ·∫•y ƒë√£ ƒë·∫£o ng∆∞·ª£c th·ª© t·ª± c·ªßa c√°c b√†i h√°t trong h√†ng.**"],
            emoji="üîÑ"
        )

    queue_show_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @check_voice()
    @has_player()
    @check_voice()
    @pool_command(name="queue", aliases=["q", "fila"], description="Hi·ªÉn th·ªã c√°c b√†i h√°t.",
                  only_voiced=True, max_concurrency=queue_show_mc)
    async def queue_show_legacy(self, ctx: CustomContext):
        await self.display.callback(self=self, inter=ctx)

    @commands.max_concurrency(1, commands.BucketType.member)
    @q.sub_command(
        description=f"{desc_prefix}Hi·ªÉn th·ªã c√°c b√†i h√°t ƒëang trong h√†ng ƒë·ª£i.", max_concurrency=queue_show_mc
    )
    async def display(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not player.queue:
            raise GenericError("**Kh√¥ng c√≥ b√†i h√°t trong h√†ng ƒë·ª£i.**")

        view = QueueInteraction(player, inter.author)
        embed = view.embed

        try:
            if bot.user.id != self.bot.user.id:
                embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
        except AttributeError:
            pass

        await inter.response.defer(ephemeral=True)

        kwargs = {
            "embed": embed,
            "view": view
        }

        try:
            func = inter.followup.send
            kwargs["ephemeral"] = True
        except AttributeError:
            try:
                func = inter.edit_original_message
            except AttributeError:
                func = inter.send
                kwargs["ephemeral"] = True

        view.message = await func(**kwargs)

        await view.wait()

    adv_queue_flags = CommandArgparse()

    adv_queue_flags.add_argument('-songtitle', '-name', '-title', '-songname', nargs='+',
                             help="Bao g·ªìm t√™n b√†i h√°t c·ª• th·ªÉ.\nV√≠ d·ª•: -name NCS", default=[])
    adv_queue_flags.add_argument('-uploader', '-author', '-artist', nargs='+', default=[],
                             help="Lo·∫°i b·ªè b√†i h√°t t·ª´ m·ªôt ngh·ªá sƒ©, t√°c gi·∫£ ho·∫∑c ng∆∞·ªùi t·∫£i l√™n c·ª• th·ªÉ.\nV√≠ d·ª•: -uploader sekai")
    adv_queue_flags.add_argument('-member', '-user', '-u', nargs='+', default=[],
                             help="Lo·∫°i b·ªè b√†i h√°t ƒë∆∞·ª£c y√™u c·∫ßu b·ªüi m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ.\nV√≠ d·ª•: -user @user")
    adv_queue_flags.add_argument('-duplicates', '-dupes', '-duplicate', action='store_true',
                             help="Lo·∫°i b·ªè c√°c b√†i h√°t tr√πng l·∫∑p.")
    adv_queue_flags.add_argument('-playlist', '-list', '-pl', nargs='+', default=[],
                             help="Lo·∫°i b·ªè c√°c b√†i h√°t t·ª´ m·ªôt danh s√°ch ph√°t c·ª• th·ªÉ.\nV√≠ d·ª•: -playlist minhaplaylist")
    adv_queue_flags.add_argument('-minimaltime', '-mintime', '-min', '-minduration', '-minduration', default=None,
                             help="Lo·∫°i b·ªè c√°c b√†i h√°t c√≥ th·ªùi l∆∞·ª£ng t·ªëi thi·ªÉu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.\nV√≠ d·ª•: -min 1:23.")
    adv_queue_flags.add_argument('-maxduration', '-maxtime', '-max', default=None,
                             help="Lo·∫°i b·ªè c√°c b√†i h√°t c√≥ th·ªùi l∆∞·ª£ng t·ªëi ƒëa ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.\nV√≠ d·ª•: -max 1:23.")
    adv_queue_flags.add_argument('-amount', '-counter', '-count', '-c', type=int, default=None,
                             help="X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng b√†i h√°t c·∫ßn x·ª≠ l√Ω v·ªõi t√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.\nV√≠ d·ª•: -amount 5")
    adv_queue_flags.add_argument('-startposition', '-startpos', '-start', type=int, default=0,
                             help="Lo·∫°i b·ªè c√°c b√†i h√°t t·ª´ m·ªôt v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ª• th·ªÉ trong danh s√°ch.\nV√≠ d·ª•: -start 10")
    adv_queue_flags.add_argument('-endposition', '-endpos', '-end', type=int, default=0,
                             help="Lo·∫°i b·ªè c√°c b√†i h√°t t·ª´ v·ªã tr√≠ hi·ªán t·∫°i ƒë·∫øn m·ªôt v·ªã tr√≠ k·∫øt th√∫c c·ª• th·ªÉ trong danh s√°ch.\nV√≠ d·ª•: -end 15")
    adv_queue_flags.add_argument('-absentmembers', '-absent', '-abs', action='store_true',
                             help="Lo·∫°i b·ªè c√°c b√†i h√°t ƒë∆∞·ª£c th√™m b·ªüi c√°c th√†nh vi√™n ƒë√£ r·ªùi kh·ªèi k√™nh.")


    clear_flags = CommandArgparse(parents=[adv_queue_flags])

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="clear", aliases=["limpar", "clearqueue"], description="X√≥a h√†ng ƒë·ª£i hi·ªán t·∫°i ƒëang ph√°t.",
                  only_voiced=True,
                  extras={"flags": clear_flags}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc)
    async def clear_legacy(self, ctx: CustomContext, *, flags: str = ""):

        args, unknown = ctx.command.extras['flags'].parse_known_args(flags.split())

        await self.clear.callback(
            self=self, inter=ctx,
            song_name=" ".join(args.songtitle + unknown),
            song_author=" ".join(args.uploader),
            user=await commands.MemberConverter().convert(ctx, " ".join(args.member)) if args.member else None,
            duplicates=args.duplicates,
            playlist=" ".join(args.playlist),
            min_duration=args.minimaltime,
            max_duration=args.maxduration,
            amount=args.amount,
            range_start=args.startposition,
            range_end=args.endposition,
            absent_members=args.absentmembers
        )

    @check_queue_loading()
    @is_dj()
    @has_player()
    @check_voice()
    @q.sub_command(
        name="clear",
        description=f"{desc_prefix}X√≥a h√†ng ƒë·ª£i hi·ªán t·∫°i.",
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc
    )
    async def clear(
            self,
            inter: disnake.AppCmdInter,
            song_name: str = commands.Param(name="name_of_the_song", description="th√™m t√™n b√†i h√°t.",
                                            default=None),
            song_author: str = commands.Param(name="uploader_name",
                                              description="Bao g·ªìm t√™n c·ªßa b·∫°n trong t√°c gi·∫£/ngh·ªá sƒ©/ng∆∞·ªùi t·∫£i l√™n b√†i h√°t.", default=None),
            user: disnake.Member = commands.Param(name='user',
                                                  description="Bao g·ªìm c√°c b√†i h√°t ƒë∆∞·ª£c y√™u c·∫ßu b·ªüi ng∆∞·ªùi d√πng ƒë√£ ch·ªçn.",
                                                  default=None),
            duplicates: bool = commands.Param(name="duplicates", description="Bao g·ªìm c√°c b√†i h√°t tr√πng l·∫∑p",
                                              default=False),
            playlist: str = commands.Param(name="playlist",description="Th√™m danh s√°ch ph√°t.", default=None),
            min_duration: str = commands.Param(name="initial_duration",
                                               description="bao g·ªìm c√°c b√†i h√°t c√≥ th·ªùi l∆∞·ª£ng t∆∞∆°ng t·ª±/l·ªõn h∆°n (v√≠ d·ª•: 1:23).",
                                               default=None),
            max_duration: str = commands.Param(name="maximum_duration",
                                               description="bao g·ªìm c√°c b√†i h√°t c√≥ ƒë·ªô d√†i t·ªëi ƒëa ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (v√≠ d·ª•: 1:45).",
                                               default=None),
            amount: int = commands.Param(name="amount", description="S·ªë l∆∞·ª£ng b√†i h√°t ƒë·ªÉ di chuy·ªÉn.",
                                         min_value=0, max_value=99, default=None),
            range_start: int = commands.Param(name="starting_position",
                                              description="bao g·ªìm c√°c b√†i h√°t ƒë∆∞·ª£c x·∫øp h√†ng ƒë·ª£i t·ª´ m·ªôt v·ªã tr√≠ c·ª• th·ªÉ"
                                                           "t·ª´ h√†ng ƒë·ª£i.",
                                              min_value=1.0, max_value=500.0, default=0),
            range_end: int = commands.Param(name="end_position",
                                            description="ƒë∆∞a c√°c b√†i h√°t t·ª´ h√†ng ƒë·ª£i v√†o m·ªôt v·ªã tr√≠ c·ª• th·ªÉ trong h√†ng ƒë·ª£i.",
                                            min_value=1.0, max_value=500.0, default=0),
            absent_members: bool = commands.Param(name="missing_members",
                                                  description="Bao g·ªìm c√°c b√†i h√°t ƒë∆∞·ª£c th√™m b·ªüi c√°c th√†nh vi√™n b√™n ngo√†i k√™nh",
                                                  default=False)
    ):

        if min_duration and max_duration:
            raise GenericError(
                "B·∫°n ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn: **th·ªùi l∆∞·ª£ng nh·ªè nh·∫•t** ho·∫∑c **th·ªùi l∆∞·ª£ng l·ªõn nh·∫•t**.")

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not player.queue:
            raise GenericError("**Kh√¥ng c√≥ b√†i h√°t n√†o trong h√†ng ƒë·ª£i.**")

        if amount is None:
            amount = 0

        filters = []
        final_filters = set()

        txt = []
        playlist_hyperlink = set()

        tracklist = []

        if song_name:
            song_name = song_name.replace("Ô∏è", "")
            filters.append('song_name')
        if song_author:
            song_author = song_author.replace("Ô∏è", "")
            filters.append('song_author')
        if user:
            filters.append('user')
        if playlist:
            playlist = playlist.replace("Ô∏è", "")
            filters.append('playlist')
        if min_duration:
            filters.append('time_below')
            min_duration = string_to_seconds(min_duration) * 1000
        if max_duration:
            filters.append('time_above')
            max_duration = string_to_seconds(max_duration) * 1000
        if absent_members:
            filters.append('absent_members')
        if duplicates:
            filters.append('duplicates')

        if not filters and not range_start and not range_end:
            player.queue.clear()
            txt = ['ƒë√£ x√≥a h√†ng ƒë·ª£i nh·∫°c.', f'‚ôªÔ∏è **‚†Ç{inter.author.mention} ƒë√£ x√≥a h√†ng ƒë·ª£i nh·∫°c.**']

        else:

            if range_start > 0 and range_end > 0:

                if range_start >= range_end:
                    raise GenericError("**V·ªã tr√≠ cu·ªëi c√πng ph·∫£i l·ªõn h∆°n v·ªã tr√≠ ban ƒë·∫ßu!**")

                song_list = list(player.queue)[range_start - 1: -(range_end - 1)]
                txt.append(f"**V·ªã tr√≠ b·∫Øt ƒë·∫ßu h√†ng ƒë·ª£i:** `{range_start}`\n"
                            f"**V·ªã tr√≠ cu·ªëi c·ªßa h√†ng ƒë·ª£i:** `{range_end}`")

            elif range_start > 0:
                song_list = list(player.queue)[range_start - 1:]
                txt.append(f"**V·ªã tr√≠ x·∫øp h√†ng ban ƒë·∫ßu:** `{range_start}`")
            elif range_end > 0:
                song_list = list(player.queue)[:-(range_end - 1)]
                txt.append(f"**V·ªã tr√≠ cu·ªëi c√πng c·ªßa h√†ng ƒë·ª£i:** `{range_end}`")
            else:
                song_list = list(player.queue)

            deleted_tracks = 0

            duplicated_titles = set()

            amount_counter = int(amount) if amount > 0 else 0

            for t in song_list:

                if amount and amount_counter < 1:
                    break

                temp_filter = list(filters)

                if 'duplicates' in temp_filter:
                    if (title:=f"{t.author} - {t.title}".lower()) in duplicated_titles:
                        temp_filter.remove('duplicates')
                        final_filters.add('duplicates')
                    else:
                        duplicated_titles.add(title)

                if 'time_below' in temp_filter and t.duration >= min_duration:
                    temp_filter.remove('time_below')
                    final_filters.add('time_below')

                elif 'time_above' in temp_filter and t.duration <= max_duration:
                    temp_filter.remove('time_above')
                    final_filters.add('time_above')

                if 'song_name' in temp_filter:

                    title = t.title.replace("Ô∏è", "").lower().split()

                    query_words = song_name.lower().split()

                    word_count = 0

                    for query_word in song_name.lower().split():
                        for title_word in title:
                            if query_word in title_word:
                                title.remove(title_word)
                                word_count += 1
                                break

                    if word_count == len(query_words):
                        temp_filter.remove('song_name')
                        final_filters.add('song_name')

                if 'song_author' in temp_filter and song_author.lower() in t.author.replace("Ô∏è", "").lower():
                    temp_filter.remove('song_author')
                    final_filters.add('song_author')

                if 'user' in temp_filter and user.id == t.requester:
                    temp_filter.remove('user')
                    final_filters.add('user')

                elif 'absent_members' in temp_filter and t.requester not in player.guild.me.voice.channel.voice_states:
                    temp_filter.remove('absent_members')
                    final_filters.add('absent_members')

                playlist_link = None

                if 'playlist' in temp_filter:
                    if playlist == t.playlist_name.replace("Ô∏è", "") or (isinstance(inter, CustomContext) and playlist.lower() in t.playlist_name.replace("Ô∏è", "").lower()):
                        playlist_link = f"[`{fix_characters(t.playlist_name)}`]({t.playlist_url})"
                        temp_filter.remove('playlist')
                        final_filters.add('playlist')

                if not temp_filter:
                    tracklist.append(t)
                    player.queue.remove(t)
                    deleted_tracks += 1
                    if playlist_link:
                        playlist_hyperlink.add(playlist_link)

                    if amount:
                        amount_counter -= 1

            duplicated_titles.clear()

            if not deleted_tracks:
                await inter.send("Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o!", ephemeral=True)
                return

            try:
                final_filters.remove("song_name")
                txt.append(f"**G·ªìm t√™n:** `{fix_characters(song_name)}`")
            except:
                pass

            try:
                final_filters.remove("song_author")
                txt.append(f"**Bao g·ªìm t√™n trong ng∆∞·ªùi t·∫£i l√™n/ngh·ªá sƒ©:** `{fix_characters(song_author)}`")
            except:
                pass

            try:
                final_filters.remove("user")
                txt.append(f"**Y√™u c·∫ßu c·ªßa th√†nh vi√™n:** {user.mention}")
            except:
                pass

            try:
                final_filters.remove("playlist")
                txt.append(f"**Playlist:** {' | '.join(playlist_hyperlink)}")
            except:
                pass

            try:
                final_filters.remove("time_below")
                txt.append(f"**V·ªõi th·ªùi l∆∞·ª£ng ban ƒë·∫ßu/b·∫±ng nhau:** `{time_format(min_duration)}`")
            except:
                pass

            try:
                final_filters.remove("time_above")
                txt.append(f"**V·ªõi th·ªùi l∆∞·ª£ng t·ªëi ƒëa:** `{time_format(max_duration)}`")
            except:
                pass

            try:
                final_filters.remove("duplicates")
                txt.append(f"**B√†i h√°t tr√πng l·∫∑p**")
            except:
                pass

            try:
                final_filters.remove("absent_members")
                txt.append("`B√†i h√°t ƒë∆∞·ª£c y√™u c·∫ßu b·ªüi c√°c th√†nh vi√™n ƒë√£ r·ªùi k√™nh.`")
            except:
                pass

            msg_txt = f"### ‚ôªÔ∏è ‚†Ç{inter.author.mention} x√≥a {deleted_tracks} b√†i h√°t kh·ªèi h√†ng ƒë·ª£i:\n" + "\n".join(f"[`{fix_characters(t.title, 45)}`]({t.uri})" for t in tracklist[:7])

            if (trackcount:=(len(tracklist) - 7)) > 0:
                msg_txt += f"\n`v√† nhi·ªÅu {trackcount} b√†i h√°t kh√°c.`"

            msg_txt += f"\n### ‚úÖ ‚†Ç(C√°c) b·ªô l·ªçc ƒë∆∞·ª£c s·ª≠ d·ª•ng:\n" + '\n'.join(txt)

            txt = [f"x√≥a (c√°c) b√†i h√°t {deleted_tracks} kh·ªèi h√†ng qua ch·ª©c nƒÉng x√≥a.", msg_txt]

        try:
            kwargs = {"thumb": tracklist[0].thumb}
        except IndexError:
            kwargs = {}

        await self.interaction_message(inter, txt, emoji="‚ôªÔ∏è", **kwargs)


    move_queue_flags = CommandArgparse(parents=[adv_queue_flags])
    move_queue_flags.add_argument('-position', '-pos',
                           help="Ch·ªâ ƒë·ªãnh v·ªã tr√≠ m·ª•c ti√™u (t√πy ch·ªçn).\nV√≠ d·ª•: -pos 1",
                           type=int, default=None)
    move_queue_flags.add_argument('-casesensitive', '-cs',  action='store_true',
                           help="T√¨m ki·∫øm b√†i h√°t c√≥ c·ª•m t·ª´ ch√≠nh x√°c trong t√™n b√†i h√°t thay v√¨ t√¨m ki·∫øm t·ª´ng ch·ªØ.")

    @check_queue_loading()
    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="move", aliases=["movequeue", "moveadv", "moveadvanced", "moveq", "mq", "mv", "mover"],
                  description="Di chuy·ªÉn b√†i h√°t t·ª´ h√†ng ƒë·ª£i.", only_voiced=True,
                  extras={"flags": move_queue_flags}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc)
    async def move_legacy(self, ctx: CustomContext, position: Optional[int] = None, *, flags: str = ""):

        args, unknown = ctx.command.extras['flags'].parse_known_args(flags.split())

        if args.position:
            if position:
                unknown.insert(0, str(position))
            position = args.position

        if position is None:
            position = 1

        await self.do_move(
            inter=ctx,
            position=position,
            song_name=" ".join(unknown + args.songtitle),
            song_author=" ".join(args.uploader),
            user=await commands.MemberConverter().convert(ctx, " ".join(args.member)) if args.member else None,
            duplicates=args.duplicates,
            playlist=" ".join(args.playlist),
            min_duration=args.minimaltime,
            max_duration=args.maxduration,
            amount=args.amount,
            range_start=args.startposition,
            range_end=args.endposition,
            absent_members=args.absentmembers
        )

    @check_queue_loading()
    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        name="move",
        description=f"{desc_prefix}Di chuy·ªÉn b√†i h√°t trong h√†ng ƒë·ª£i.",
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc
    )
    async def move(
            self,
            inter: disnake.AppCmdInter,
            position: int = commands.Param(name="position", description="T√πy ch·ªçn: V·ªã tr√≠ ƒë√≠ch trong danh s√°ch ƒë·ª£i.", min_value=1,
                                           max_value=999, default=1),
            song_name: str = commands.Param(name="song_name", description="Bao g·ªìm t√™n c·ª• th·ªÉ c·ªßa b√†i h√°t.",
                                            default=None),
            song_author: str = commands.Param(name="uploader_name",
                                              description="Bao g·ªìm t√™n c·ªßa ng∆∞·ªùi t√°c gi·∫£ ho·∫∑c ng∆∞·ªùi t·∫£i l√™n c·ªßa b√†i h√°t.",
                                              default=None),
            user: disnake.Member = commands.Param(name='user',
                                                  description="Bao g·ªìm nh·ªØng b√†i h√°t ƒë∆∞·ª£c y√™u c·∫ßu b·ªüi ng∆∞·ªùi d√πng c·ª• th·ªÉ.",
                                                  default=None),
            duplicates: bool = commands.Param(name="duplicates", description="Bao g·ªìm c√°c b√†i h√°t tr√πng l·∫∑p",
                                              default=False),
            playlist: str = commands.Param(description="Bao g·ªìm t√™n c·ªßa danh s√°ch ph√°t.", default=None),
            min_duration: str = commands.Param(name="initial_duration",
                                               description="Bao g·ªìm c√°c b√†i h√°t c√≥ th·ªùi l∆∞·ª£ng b·∫Øt ƒë·∫ßu t·ª´ (v√≠ d·ª•: 1:23).",
                                               default=None),
            max_duration: str = commands.Param(name="max_duration",
                                               description="Bao g·ªìm c√°c b√†i h√°t c√≥ th·ªùi l∆∞·ª£ng t·ªëi ƒëa c·ª• th·ªÉ (v√≠ d·ª•: 1:45).",
                                               default=None),
            amount: int = commands.Param(name="quantity", description="T√πy ch·ªçn: S·ªë l∆∞·ª£ng b√†i h√°t c·∫ßn di chuy·ªÉn.",
                                         min_value=0, max_value=99, default=None),
            range_start: int = commands.Param(name="start_position",
                                              description="Bao g·ªìm c√°c b√†i h√°t b·∫Øt ƒë·∫ßu t·ª´ v·ªã tr√≠ c·ª• th·ªÉ trong danh s√°ch.",
                                              min_value=1.0, max_value=500.0, default=0),
            range_end: int = commands.Param(name="position_end",
                                            description="Bao g·ªìm c√°c b√†i h√°t t·ª´ v·ªã tr√≠ hi·ªán t·∫°i ƒë·∫øn v·ªã tr√≠ k·∫øt th√∫c c·ª• th·ªÉ trong danh s√°ch.",
                                            min_value=1.0, max_value=500.0, default=0),
            absent_members: bool = commands.Param(name="absent_members",
                                                  description="Bao g·ªìm c√°c b√†i h√°t ƒë∆∞·ª£c th√™m b·ªüi nh·ªØng th√†nh vi√™n ƒë√£ r·ªùi kh·ªèi k√™nh",
                                                  default=False),
    ):

        await self.do_move(
            inter=inter, position=position, song_name=song_name, song_author=song_author, user=user,
            duplicates=duplicates, playlist=playlist, min_duration=min_duration, max_duration=max_duration,
            amount=amount, range_start=range_start, range_end=range_end, absent_members=absent_members
        )

    async def do_move(
            self, inter: Union[disnake.AppCmdInter, CustomContext], position: int = 1, song_name: str = None,
            song_author: str = None, user: disnake.Member = None, duplicates: bool = False, playlist: str = None,
            min_duration: str = None, max_duration: str = None, amount: int = None, range_start: int = 0,
            range_end: int = 0, absent_members: bool = False, case_sensitive=False
    ):

        if min_duration and max_duration:
            raise GenericError(
                "B·∫°n ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn: **th·ªùi l∆∞·ª£ng nh·ªè nh·∫•t** ho·∫∑c **th·ªùi l∆∞·ª£ng l·ªõn nh·∫•t**.")

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not player.queue:
            raise GenericError("**Kh√¥ng c√≥ b√†i h√°t trong d√≤ng.**")

        filters = []
        final_filters = set()

        txt = []
        playlist_hyperlink = set()

        tracklist = []

        if song_name:
            song_name = song_name.replace("Ô∏è", "")
            filters.append('song_name')
        if song_author:
            song_author = song_author.replace("Ô∏è", "")
            filters.append('song_author')
        if user:
            filters.append('user')
        if playlist:
            playlist = playlist.replace("Ô∏è", "")
            filters.append('playlist')
        if min_duration:
            filters.append('time_below')
            min_duration = string_to_seconds(min_duration) * 1000
        if max_duration:
            filters.append('time_above')
            max_duration = string_to_seconds(max_duration) * 1000
        if absent_members:
            filters.append('absent_members')
        if duplicates:
            filters.append('duplicates')

        if not filters and not range_start and not range_end:
            raise GenericError("**B·∫°n n√™n s·ª≠ d·ª•ng √≠t nh·∫•t m·ªôt t√πy ch·ªçn ƒë·ªÉ di chuy·ªÉn**")

        indexes = None

        try:
            has_id = song_name.split(" || ID > ")[1]
        except:
            has_id = isinstance(inter, CustomContext)

        if range_start > 0 and range_end > 0:

            if range_start >= range_end:
                raise GenericError("**V·ªã tr√≠ cu·ªëi c√πng ph·∫£i l·ªõn h∆°n v·ªã tr√≠ b·∫Øt ƒë·∫ßu!**")

            song_list = list(player.queue)[range_start - 1: -(range_end - 1)]
            txt.append(f"**V·ªã tr√≠ b·∫Øt ƒë·∫ßu h√†ng ƒë·ª£i:** `{range_start}`\n"
                        f"**V·ªã tr√≠ cu·ªëi c·ªßa h√†ng ƒë·ª£i:** `{range_end}`")

        elif range_start > 0:
            song_list = list(player.queue)[range_start - 1:]
            txt.append(f"**V·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa h√†ng ƒë·ª£i:**`{range_start}`")
        elif range_end > 0:
            song_list = list(player.queue)[:-(range_end - 1)]
            txt.append(f"**V·ªã tr√≠ cu·ªëi c√πng c·ªßa h√†ng ƒë·ª£i:** `{range_end}`")
        elif song_name and has_id and filters == ["song_name"] and amount is None:
            indexes = queue_track_index(inter, bot, song_name, match_count=1, case_sensitive=case_sensitive)
            for index, track in reversed(indexes):
                player.queue.remove(track)
                tracklist.append(track)
            song_list = []

        else:
            song_list = list(player.queue)

        if not tracklist:

            if amount is None:
                amount = 0

            duplicated_titles = set()

            amount_counter = int(amount) if amount > 0 else 0

            for t in song_list:

                if amount and amount_counter < 1:
                    break

                temp_filter = list(filters)

                if 'duplicates' in temp_filter:
                    if (title := f"{t.author} - {t.title}".lower()) in duplicated_titles:
                        temp_filter.remove('duplicates')
                        final_filters.add('duplicates')
                    else:
                        duplicated_titles.add(title)

                if 'time_below' in temp_filter and t.duration >= min_duration:
                    temp_filter.remove('time_below')
                    final_filters.add('time_below')

                elif 'time_above' in temp_filter and t.duration <= max_duration:
                    temp_filter.remove('time_above')
                    final_filters.add('time_above')

                if 'song_name' in temp_filter:

                    title = t.title.replace("Ô∏è", "").lower().split()

                    query_words = song_name.lower().split()

                    word_count = 0

                    for query_word in song_name.lower().split():
                        for title_word in title:
                            if query_word in title_word:
                                title.remove(title_word)
                                word_count += 1
                                break

                    if word_count == len(query_words):
                        temp_filter.remove('song_name')
                        final_filters.add('song_name')

                if 'song_author' in temp_filter and song_author.lower() in t.author.replace("Ô∏è", "").lower():
                    temp_filter.remove('song_author')
                    final_filters.add('song_author')

                if 'user' in temp_filter and user.id == t.requester:
                    temp_filter.remove('user')
                    final_filters.add('user')

                elif 'absent_members' in temp_filter and t.requester not in player.guild.me.voice.channel.voice_states:
                    temp_filter.remove('absent_members')
                    final_filters.add('absent_members')

                playlist_link = None

                if 'playlist' in temp_filter:
                    if playlist == t.playlist_name.replace("Ô∏è", "") or (isinstance(inter, CustomContext) and playlist.lower() in t.playlist_name.replace("Ô∏è", "").lower()):
                        playlist_link = f"[`{fix_characters(t.playlist_name)}`]({t.playlist_url})"
                        temp_filter.remove('playlist')
                        final_filters.add('playlist')

                if not temp_filter:

                    track = player.queue[player.queue.index(t)]
                    player.queue.remove(t)
                    tracklist.append(track)
                    if playlist_link:
                        playlist_hyperlink.add(playlist_link)

                    if amount:
                        amount_counter -= 1

            duplicated_titles.clear()

        if not tracklist:
            raise GenericError("Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o v·ªõi c√°c b·ªô l·ªçc ƒë√£ ch·ªçn!")

        for t in reversed(tracklist):
            player.queue.insert(position-1, t)

        try:
            final_filters.remove("song_name")
            txt.append(f"**Bao g·ªìm t√™n:** `{fix_characters(song_name)}`")
        except:
            pass

        try:
            final_filters.remove("song_author")
            txt.append(f"**Bao g·ªìm t√™n trong ng∆∞·ªùi t·∫£i l√™n/ngh·ªá sƒ©:** `{fix_characters(song_author)}`")
        except:
            pass

        try:
            final_filters.remove("user")
            txt.append(f"**Y√™u c·∫ßu c·ªßa th√†nh vi√™n:** {user.mention}")
        except:
            pass

        try:
            final_filters.remove("playlist")
            txt.append(f"**Playlist:** {' | '.join(playlist_hyperlink)}")
        except:
            pass

        try:
            final_filters.remove("time_below")
            txt.append(f"**V·ªõi th·ªùi l∆∞·ª£ng ban ƒë·∫ßu/b·∫±ng nhau:** `{time_format(min_duration)}`")
        except:
            pass

        try:
            final_filters.remove("time_above")
            txt.append(f"**V·ªõi th·ªùi l∆∞·ª£ng t·ªëi ƒëa:** `{time_format(max_duration)}`")
        except:
            pass

        try:
            final_filters.remove("duplicates")
            txt.append(f"**B√†i h√°t tr√πng l·∫∑p**")
        except:
            pass

        try:
            final_filters.remove("absent_members")
            txt.append("`B√†i h√°t ƒë∆∞·ª£c y√™u c·∫ßu b·ªüi c√°c th√†nh vi√™n ƒë√£ r·ªùi k√™nh.`")
        except:
            pass

        if indexes:
            track = tracklist[0]
            txt = [
                f"ƒë√£ chuy·ªÉn b√†i h√°t [`{fix_characters(track.title, limit=25)}`]({track.uri or track.search_uri}) sang v·ªã tr√≠ h√†ng ƒë·ª£i **[{position}]**.",
                 f"‚Ü™Ô∏è **‚†Ç{inter.author.mention} ƒë√£ chuy·ªÉn m·ªôt b√†i h√°t ƒë·∫øn v·ªã tr√≠ [{position}]:**\n"
                f"‚ï∞[`{fix_characters(track.title, limit=43)}`]({track.uri or track.search_uri})"
            ]

            await self.interaction_message(inter, txt, emoji="‚Ü™Ô∏è")

        else:

            moved_tracks = len(tracklist)

            moved_tracks_txt = moved_tracks if moved_tracks == 1 else f"[{position}-{position+moved_tracks-1}]"

            msg_txt = f"### ‚Ü™Ô∏è ‚†Ç{inter.author.mention} ƒë√£ di chuy·ªÉn {moved_tracks} b√†i h√°t t·ªõi v·ªã tr√≠ {moved_tracks_txt} trong h√†ng ƒë·ª£i:\n" + "\n".join(f"`{position+n}.` [`{fix_characters(t.title, 45)}`]({t.uri})" for n, t in enumerate(tracklist[:7]))

            if (track_extra:=(moved_tracks - 7)) > 0:
                msg_txt += f"\n`v√† nhi·ªÅu {track_extra} b√†i h√°t kh√°c).`"

            msg_txt += f"\n### ‚úÖ ‚†Ç(C√°c) b·ªô l·ªçc ƒë∆∞·ª£c s·ª≠ d·ª•ng:\n" + '\n'.join(txt)

            txt = [f"ƒë√£ di chuy·ªÉn {moved_tracks} b√†i h√°t t·ªõi v·ªã tr√≠ **[{position}]** trong h√†ng ƒë·ª£i.", msg_txt]

            await self.interaction_message(inter, txt, emoji="‚Ü™Ô∏è", force=True, thumb=tracklist[0].thumb)

    @move.autocomplete("playlist")
    @clear.autocomplete("playlist")
    async def queue_playlist(self, inter: disnake.Interaction, query: str):

        try:
            if not inter.author.voice:
                return
        except:
            pass

        try:
            await check_pool_bots(inter, only_voiced=True)
            bot = inter.music_bot
        except:
            traceback.print_exc()
            return

        try:
            player = bot.music.players[inter.guild_id]
        except KeyError:
            return

        return list(set([track.playlist_name for track in player.queue if track.playlist_name and
                         query.lower() in track.playlist_name.lower()]))[:20]

    @rotate.autocomplete("name")
    @move.autocomplete("song_name")
    @skip.autocomplete("name")
    @skipto.autocomplete("name")
    @remove.autocomplete("name")
    async def queue_tracks(self, inter: disnake.AppCmdInter, query: str):

        try:
            if not inter.author.voice:
                return
        except AttributeError:
            pass

        try:
            if not await check_pool_bots(inter, only_voiced=True):
                return
        except PoolException:
            pass
        except:
            return

        try:
            player = inter.music_bot.music.players[inter.guild_id]
        except KeyError:
            return

        results = []

        count = 0

        for track in player.queue:

            if count == 20:
                break

            title = track.title.lower().split()

            query_words = query.lower().split()

            word_count = 0

            for query_word in query.lower().split():
                for title_word in title:
                    if query_word in title_word:
                        title.remove(title_word)
                        word_count += 1
                        break

            if word_count == len(query_words):
                results.append(f"{track.title[:81]} || ID > {track.unique_id}")
                count += 1

        return results or [f"{track.title[:81]} || ID > {track.unique_id}" for n, track in enumerate(player.queue)
                           if query.lower() in track.title.lower()][:20]

    @move.autocomplete("uploader_name")
    @clear.autocomplete("uploader_name")
    async def queue_author(self, inter: disnake.Interaction, query: str):

        try:
            await check_pool_bots(inter, only_voiced=True)
            bot = inter.music_bot
        except:
            return

        if not inter.author.voice:
            return

        try:
            player = bot.music.players[inter.guild_id]
        except KeyError:
            return

        if not query:
            return list(set([track.authors_string for track in player.queue]))[:20]
        else:
            return list(set([track.authors_string for track in player.queue if query.lower() in track.authors_string.lower()]))[:20]

    restrict_cd = commands.CooldownMapping.from_cooldown(2, 7, commands.BucketType.member)
    restrict_mc =commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="restrictmode", aliases=["rstc", "restrict", "restrito", "modorestrito"], only_voiced=True, cooldown=restrict_cd, max_concurrency=restrict_mc,
                  description="K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a ch·∫ø ƒë·ªô l·ªánh h·∫°n ch·∫ø y√™u c·∫ßu DJ/nh√¢n vi√™n.")
    async def restrict_mode_legacy(self, ctx: CustomContext):

        await self.restrict_mode.callback(self=self, inter=ctx)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a ch·∫ø ƒë·ªô l·ªánh h·∫°n ch·∫ø c·ªßa c√°c l·ªánh y√™u c·∫ßu DJ/nh√¢n vi√™n.",
        extras={"only_voiced": True}, cooldown=restrict_cd, max_concurrency=restrict_mc)
    async def restrict_mode(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.restrict_mode = not player.restrict_mode

        msg = ["k√≠ch ho·∫°t", "üîê"] if player.restrict_mode else ["v√¥ hi·ªáu h√≥a", "üîì"]

        text = [
            f"{msg[0]} Ch·∫ø ƒë·ªô h·∫°n ch·∫ø c·ªßa c√°c l·ªánh ng∆∞·ªùi ch∆°i (y√™u c·∫ßu DJ/nh√¢n vi√™n).",
            f"{msg[1]} **‚†Ç{inter.author.mention} {msg[0]} Ch·∫ø ƒë·ªô h·∫°n ch·∫ø c·ªßa c√°c l·ªánh ng∆∞·ªùi ch∆°i (y√™u c·∫ßu DJ/nh√¢n vi√™n).**"
        ]

        await self.interaction_message(inter, text, emoji=msg[1])

    nonstop_cd = commands.CooldownMapping.from_cooldown(2, 15, commands.BucketType.member)
    nonstop_mc =commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @has_player()
    @check_voice()
    @pool_command(name="247", aliases=["nonstop"], only_voiced=True, cooldown=nonstop_cd, max_concurrency=nonstop_mc,
                  description="K√≠ch ho·∫°t/T·∫Øt ch·∫ø ƒë·ªô 24/7 c·ªßa tr√¨nh ph√°t.")
    async def nonstop_legacy(self, ctx: CustomContext):
        await self.nonstop.callback(self=self, inter=ctx)

    @has_player()
    @check_voice()
    @commands.slash_command(
        name="247",
        description=f"{desc_prefix}K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a Ch·∫ø ƒë·ªô 24/7 c·ªßa tr√¨nh ph√°t.",
        default_member_permissions=disnake.Permissions(manage_guild=True),
        extras={"only_voiced": True}, cooldown=nonstop_cd, max_concurrency=nonstop_mc
    )
    async def nonstop(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.keep_connected = not player.keep_connected

        msg = ["k√≠ch ho·∫°t", "‚ôæÔ∏è"] if player.keep_connected else ["v√¥ hi·ªáu h√≥a", "‚ùå"]

        text = [
            f"{msg[0]} Ch·∫ø ƒë·ªô tr√¨nh ph√°t 24/7 (c√†i ƒë·∫∑t).",
            f"{msg[1]} **‚†Ç{inter.author.mention} {msg[0]} Ch·∫ø ƒë·ªô 24/7 (c√†i ƒë·∫∑t) c·ªßa ng∆∞·ªùi ch∆°i.**"
        ]

        if not len(player.queue):
            player.queue.extend(player.played)
            player.played.clear()

        await player.process_save_queue()

        if player.current:
            await self.interaction_message(inter, txt=text, emoji=msg[1])
            return

        await self.interaction_message(inter, text)

        await player.process_next()

    autoplay_cd = commands.CooldownMapping.from_cooldown(2, 15, commands.BucketType.member)
    autoplay_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @has_player()
    @check_voice()
    @pool_command(name="autoplay", aliases=["ap", "aplay"], only_voiced=True, cooldown=autoplay_cd, max_concurrency=autoplay_mc,
                  description="K√≠ch ho·∫°t/t·∫Øt ph√°t l·∫°i t·ª± ƒë·ªông b·∫±ng c√°ch ho√†n th√†nh c√°c d√≤ng trong h√†ng ƒë·ª£i.")
    async def autoplay_legacy(self, ctx: CustomContext):
        await self.autoplay.callback(self=self, inter=ctx)

    @has_player()
    @check_voice()
    @commands.slash_command(
        name="autoplay",
        description=f"{desc_prefix}K√≠ch ho·∫°t/t·∫Øt ph√°t l·∫°i t·ª± ƒë·ªông b·∫±ng c√°ch ho√†n th√†nh c√°c d√≤ng trong h√†ng ƒë·ª£i.",
        extras={"only_voiced": True}, cooldown=autoplay_cd, max_concurrency=autoplay_mc
    )
    async def autoplay(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.autoplay = not player.autoplay

        msg = ["k√≠ch ho·∫°t", "<:KleeParty:1136214064067006565>"] if player.autoplay else ["v√¥ hi·ªáu h√≥a", "<:verify:1134033164151566460>"]

        text = [f"{msg[0]}  T·ª± ƒë·ªông ph√°t.",
                f"{msg[1]} **‚†Ç{inter.author.mention} {msg[0]}  T·ª± ƒë·ªông ph√°t.**"]

        if player.current:
            await self.interaction_message(inter, txt=text, emoji=msg[1])
            return

        await self.interaction_message(inter, text)

        await player.process_next()

    @check_voice()
    @has_player()
    @is_dj()
    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.slash_command(
        description=f"{desc_prefix}Di chuy·ªÉn ng∆∞·ªùi ch∆°i sang m·ªôt m√°y ch·ªß √¢m nh·∫°c kh√°c."
    )
    async def change_node(
            self,
            inter: disnake.AppCmdInter,
            node: str = commands.Param(name="server", description="M√°y ch·ªß √¢m nh·∫°c")
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        if node not in bot.music.nodes:
            raise GenericError(f"M√°y ch·ªß √¢m nh·∫°c **{node}** kh√¥ng t√¨m th·∫•y.")

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if node == player.node.identifier:
            raise GenericError(f"Ng∆∞·ªùi ch∆°i ƒë√£ ·ªü tr√™n m√°y ch·ªß √¢m nh·∫°c **{node}**.")

        await player.change_node(node)
        player.native_yt = True

        await self.interaction_message(
            inter,
            [f"Di chuy·ªÉn tr√¨nh ph√°t sang m√°y ch·ªß √¢m nh·∫°c **{node}**",
             f"**Ng∆∞·ªùi ch∆°i ƒë√£ ƒë∆∞·ª£c di chuy·ªÉn ƒë·∫øn m√°y ch·ªß √¢m nh·∫°c:** `{node}`"],
            emoji="üåé"
        )

    @search.autocomplete("server")
    @play.autocomplete("server")
    @change_node.autocomplete("server")
    async def node_suggestions(self, inter: disnake.Interaction, query: str):

        try:
            await check_pool_bots(inter)
            bot = inter.music_bot
        except GenericError:
            return
        except:
            bot = inter.bot

        try:
            node = bot.music.players[inter.guild_id].node
        except KeyError:
            node = None

        if not query:
            return [n.identifier for n in bot.music.nodes.values() if
                    n != node and n.available and n.is_available]

        return [n.identifier for n in bot.music.nodes.values() if n != node
                and query.lower() in n.identifier.lower() and n.available and n.is_available]

    @commands.command(aliases=["puptime"], description="Xem th√¥ng tin th·ªùi gian m√† ng∆∞·ªùi ch∆°i ƒëang ho·∫°t ƒë·ªông tr√™n m√°y ch·ªß.")
    @commands.cooldown(1, 5, commands.BucketType.guild)
    async def playeruptime(self, ctx: CustomContext):

        uptime_info = []
        for bot in self.bot.pool.bots:
            try:
                player = bot.music.players[ctx.guild.id]
                uptime_info.append(f"ü§ñ**Bot:** {bot.user.mention}\n"
                            f"<a:loading:1204300257874288681> **Uptime:** <t:{player.uptime}:R>\n"
                            f"<:K_NIGGA:1141183364561387671> **K√™nh:** {player.guild.me.voice.channel.mention}")
            except KeyError:
                continue

        if not uptime_info:
            raise GenericError("**Kh√¥ng c√≥ ng∆∞·ªùi ch∆°i ƒëang ho·∫°t ƒë·ªông tr√™n m√°y ch·ªß.**")

        await ctx.reply(
            embed=disnake.Embed(
                title="**Player Uptime:**",
                description="\n-----\n".join(uptime_info),
                color=self.bot.get_color(ctx.guild.me)
            ), fail_if_not_exists=False
        )

    fav_import_export_cd = commands.CooldownMapping.from_cooldown(1, 15, commands.BucketType.member)
    fav_cd = commands.CooldownMapping.from_cooldown(3, 15, commands.BucketType.member)

    @commands.command(name="favmanager", aliases=["favs", "favoritos", "fvmgr", "favlist",
                                                  "integrations", "integrationmanager", "itg", "itgmgr", "itglist", "integrationlist",
                                                  "serverplaylist", "spl", "svp", "svpl"],
                      description="Qu·∫£n l√Ω y√™u th√≠ch/t√≠ch h·ª£p v√† li√™n k·∫øt c·ªßa b·∫°n t·ª´ m√°y ch·ªß.", cooldown=fav_cd)
    async def fav_manager_legacy(self, ctx: CustomContext):
        await self.fav_manager.callback(self=self, inter=ctx)

    @commands.max_concurrency(1, commands.BucketType.member, wait=False)
    @commands.slash_command(
        description=f"{desc_prefix}Qu·∫£n l√Ω y√™u th√≠ch/t√≠ch h·ª£p v√† li√™n k·∫øt c·ªßa b·∫°n t·ª´ m√°y ch·ªß.",
        cooldown=fav_cd, dm_permission=False)
    async def fav_manager(self, inter: disnake.AppCmdInter):

        bot = self.bot

        mode = ViewMode.fav_manager

        guild_data = None
        interaction = None

        if isinstance(inter, CustomContext):
            prefix = inter.clean_prefix

            if inter.invoked_with in ("serverplaylist", "spl", "svp", "svpl") and inter.author.guild_permissions.manage_guild:

                interaction, bot = await select_bot_pool(inter, return_new=True)

                mode = ViewMode.guild_fav_manager

                await interaction.response.defer(ephemeral=True)

                inter, guild_data = await get_inter_guild_data(inter, bot)

            elif inter.invoked_with in ("integrations", "integrationmanager", "itg", "itgmgr", "itglist", "integrationlist"):
                mode = ViewMode.integrations_manager

        else:
            try:
                global_data = inter.global_guild_data
            except AttributeError:
                global_data = await bot.get_global_data(inter.guild_id, db_name=DBModel.guilds)
                try:
                    inter.global_guild_data = global_data
                except:
                    pass
            prefix = global_data['prefix'] or bot.default_prefix

        if not interaction:
            interaction = inter

        if not interaction.response.is_done():
            await inter.response.defer(ephemeral=True)

        try:
            user_data = inter.global_user_data
        except AttributeError:
            user_data = await bot.get_global_data(inter.author.id, db_name=DBModel.users)
            try:
                inter.global_user_data = user_data
            except:
                pass

        view = FavMenuView(bot=bot, ctx=inter, data=user_data, prefix=prefix, mode=mode)
        view.guild_data = guild_data

        embed = view.build_embed()

        if not embed:
            await inter.send("**Kh√¥ng c√≥ h·ªó tr·ª£ cho t√≠nh nƒÉng n√†y v√†o l√∫c n√†y...**\n\n"
                             "`H·ªó tr·ª£ cho Spotify v√† YTDL kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t.`", ephemeral=True)
            return

        if isinstance(inter, CustomContext):
            try:
                view.message = inter.store_message
                await inter.store_message.edit(embed=embed, view=view)
            except:
                view.message = await inter.send(embed=embed, view=view)
        else:
            try:
                await inter.edit_original_message(embed=embed, view=view)
            except:
                await inter.response.edit_message(embed=embed, view=view)

        await view.wait()

    playerinfo_cd = commands.CooldownMapping.from_cooldown(1, 7, commands.BucketType.member)

    @commands.command(name="playerinfo", aliases=["pinfo"], cooldown=playerinfo_cd,
                      description="Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi ch∆°i b·∫°n ƒëang ho·∫°t ƒë·ªông.")
    async def playerinfo_legacy(self, ctx: CustomContext):
        await self.player_info.callback(self=self, inter=ctx)

    @commands.slash_command(description=f"{desc_prefix}Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi ch∆°i ƒëang ho·∫°t ƒë·ªông.",
                            cooldown=playerinfo_cd, dm_permission=False)
    async def player_info(self, inter: disnake.AppCmdInter):
        await inter.response.defer(ephemeral=True)

        for bot in self.bot.pool.bots:

            for player_id in bot.music.players:

                player = bot.music.players[player_id]

                try:
                    vc = player.guild.me.voice.channel
                except AttributeError:
                    continue

                public_vc = "DISCOVERABLE" in player.guild.features and vc.permissions_for(player.guild.default_role).connect

                if inter.author.id in vc.voice_states:

                    if not player.current:
                        raise GenericError(f"**Hi·ªán t·∫°i t√¥i kh√¥ng ch∆°i th·ª© g√¨ ƒë√≥ tr√™n k√™nh {vc.mention}**")

                    if player.guild_id != inter.guild_id and not (await bot.is_owner(inter.author)):

                        current_guild = None

                        for b in self.bot.pool.bots:
                            if current_guild:=b.get_guild(inter.guild_id):
                                break

                        if not current_guild:
                            raise GenericError("**B·∫°n ph·∫£i c√≥ √≠t nh·∫•t 1 bot t∆∞∆°ng th√≠ch ƒë∆∞·ª£c th√™m v√†o m√°y ch·ªß hi·ªán t·∫°i.**")

                        member = current_guild.get_member(inter.author.id)

                        if not member.guild_permissions.manage_guild:
                            raise GenericError("**B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω m√°y ch·ªß tr√™n m√°y ch·ªß hi·ªán t·∫°i**")

                        member = player.guild.get_member(inter.author.id)

                        if not public_vc and not member.guild_permissions.manage_guild:
                            raise GenericError(f"**B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω m√°y ch·ªß trong [k√™nh]({vc.jump_url}) trong ƒë√≥ b·∫°n hi·ªán ƒëang ƒë∆∞·ª£c k·∫øt n·ªëi.**")

                    vc_name = vc.jump_url if public_vc else f"[`{fix_characters(vc.name)}`]({vc.jump_url})"

                    txt = f"### Th√¥ng tin ng∆∞·ªùi ch∆°i m√† ng∆∞·ªùi d√πng {inter.author.mention} ƒëang ho·∫°t ƒë·ªông:\n\n" \
                        f"> <:play:1140220726327136427> **‚†ÇB√†i h√°t hi·ªán t·∫°i:** [`{fix_characters(player.current.title, 30)}`]({player.current.uri or player.current.search_uri})\n"

                    if player.current.playlist:
                        txt += f"> <:playlist:1140220773051678811> **‚†ÇDanh s√°ch ph√°t:** [`{fix_characters(player.current.playlist_name, 28)}`]({player.current.playlist_url})\n"

                    if player.queue:
                        txt += f"> <:musicalbum:1183394320292790332> **‚†ÇC√°c b√†i h√°t trong h√†ng ƒë·ª£i** {len(player.queue)}\n"

                    txt += f"> `üîä` **‚†Ç{'K√™nh tho·∫°i' if isinstance(vc, disnake.VoiceChannel) else 'S√¢n kh·∫•u'}:** {vc_name}\n"\
                           f"> `üéß` **‚†ÇNg∆∞·ªùi nghe hi·ªán t·∫°i:** `{len([m for m in vc.members if not m.bot and (not m.voice.self_deaf or not m.voice.deaf)])}`\n"\
                           f"> <:timeout:1155781760571949118> **‚†ÇHo·∫°t ƒë·ªông k·ªÉ t·ª´:** <t:{player.uptime}:f> - <t:{player.uptime}:R>\n"

                    embed = disnake.Embed(description=txt, color=self.bot.get_color(player.guild.me),)

                    if player.current.is_stream:
                        txt = "üî¥ [34;1m‚†ÇPh√°t s√≥ng tr·ª±c ti·∫øp[0m"
                    else:
                        progress = ProgressBar(
                            player.position,
                            player.current.duration,
                            bar_count=20
                        )
                        txt = f"[34;1m[{time_format(player.position)}] {('=' * progress.start)}[0müî¥Ô∏è[36;1m{'-' * progress.end} " \
                               f"[{time_format(player.current.duration)}][0m"

                    embed.description += f"```ansi\n{txt}```\n"

                    embed.set_author(name=bot.user.display_name,
                                     icon_url=bot.user.display_avatar.with_static_format("png").url)

                    embed.set_thumbnail(url=player.current.thumb)

                    try:
                        footer_kw = {"icon_url": player.guild.icon.with_static_format("png").url}
                    except AttributeError:
                        footer_kw = {}

                    embed.set_footer(text=f"M√°y ch·ªß: {player.guild.name} [ID: {player.guild.id}]", **footer_kw)
                    try:
                        await inter.edit_original_response(embed=embed)
                    except AttributeError:
                        await inter.send(embed=embed)
                    return

        raise GenericError("**B·∫°n kh√¥ng ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi k√™nh tho·∫°i v·ªõi tr√¨nh ph√°t ƒëang ho·∫°t ƒë·ªông...**")

    @commands.Cog.listener("on_message_delete")
    async def player_message_delete(self, message: disnake.Message):

        if not message.guild:
            return

        try:

            player: LavalinkPlayer = self.bot.music.players[message.guild.id]

            if message.id != player.message.id:
                return

        except (AttributeError, KeyError):
            return

        thread = self.bot.get_channel(message.id)

        if not thread:
            return

        player.message = None
        await thread.edit(archived=True, locked=True, name=f"T√™n: {thread.name}")

    @commands.Cog.listener('on_ready')
    async def resume_players_ready(self):

        if not self.bot.bot_ready:
            return

        for guild_id in list(self.bot.music.players):

            try:

                player: LavalinkPlayer = self.bot.music.players[guild_id]

                try:
                    channel_id = player.guild.me.voice.channel.id
                except AttributeError:
                    channel_id = player.channel_id

                vc = self.bot.get_channel(channel_id) or player.last_channel

                try:
                    player.guild.voice_client.cleanup()
                except:
                    pass

                if not vc:
                    print(
                        f"{self.bot.user} - {player.guild.name} [{guild_id}] - Tr√¨nh ph√°t kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i v·ªõi k√™nh tho·∫°i.")
                    try:
                        await player.playerdestroy()
                    except:
                        traceback.print_exc()
                    continue

                await player.connect(vc.id)

                if not player.is_paused and not player.is_playing:
                    await player.process_next()
                print(f"{self.bot.user} - {player.guild.name} [{guild_id}] - Tr√¨nh ph√°t ƒë√£ ƒëu·ªçc k·∫øt n·ªëi l·∫°i.")
            except:
                traceback.print_exc()

    async def is_request_channel(self, ctx: Union[disnake.AppCmdInter, disnake.MessageInteraction, CustomContext], *,
                                 data: dict = None, ignore_thread=False) -> bool:

        if isinstance(ctx, (CustomContext, disnake.MessageInteraction)):
            return True

        try:
            bot = ctx.music_bot
            channel_ctx = bot.get_channel(ctx.channel_id)
        except AttributeError:
            bot = ctx.bot
            channel_ctx = ctx.channel

        if not self.bot.check_bot_forum_post(channel_ctx):
            return True

        try:
            player: LavalinkPlayer = bot.music.players[ctx.guild_id]

            if not player.static:
                return False

            if isinstance(channel_ctx, disnake.Thread) and player.text_channel == channel_ctx.parent:
                return not ignore_thread

            return player.text_channel == channel_ctx

        except KeyError:

            try:
                guild_data = ctx.guild_data
            except AttributeError:
                guild_data = data or await bot.get_data(ctx.guild_id, db_name=DBModel.guilds)

            try:
                channel = bot.get_channel(int(guild_data["player_controller"]["channel"]))
            except:
                channel = None

            if not channel:
                return False

            if isinstance(channel_ctx, disnake.Thread) and channel == channel_ctx.parent:
                return not ignore_thread

            return channel.id == channel_ctx.id

    async def check_channel(
            self,
            guild_data: dict,
            inter: Union[disnake.AppCmdInter, CustomContext],
            channel: Union[disnake.TextChannel, disnake.VoiceChannel, disnake.Thread],
            guild: disnake.Guild,
            bot: BotCore
    ):

        static_player = guild_data['player_controller']

        warn_message = None
        message: Optional[disnake.Message] = None

        try:
            channel_db = bot.get_channel(int(static_player['channel'])) or await bot.fetch_channel(
                int(static_player['channel']))
        except (TypeError, disnake.NotFound):
            channel_db = None
        except disnake.Forbidden:
            channel_db = bot.get_channel(inter.channel_id)
            warn_message = f"T√¥i kh√¥ng c√≥ quy·ªÅn truy c·∫≠p k√™nh <#{static_player['channel']}>, tr√¨nh ph√°t s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ·ªü ch·∫ø ƒë·ªô truy·ªÅn th·ªëng."
            static_player["channel"] = None

        if not channel_db or channel_db.guild.id != inter.guild_id:
            await self.reset_controller_db(inter.guild_id, guild_data, inter)

        else:

            if channel_db.id != channel.id:

                try:
                    if isinstance(channel_db, disnake.Thread):

                        if not channel_db.parent:
                            await self.reset_controller_db(inter.guild_id, guild_data, inter)
                            channel_db = None

                        else:
                            if channel_db.owner != bot.user.id:

                                if not isinstance(channel_db.parent, disnake.ForumChannel):
                                    await self.reset_controller_db(inter.guild_id, guild_data, inter)
                                    channel_db = None
                                else:

                                    thread = None

                                    for t in channel_db.parent.threads:

                                        if t.owner_id == bot.user.id:
                                            try:
                                                message = await t.fetch_message(t.id)
                                            except disnake.NotFound:
                                                continue
                                            if not message or message.author.id != bot.user.id:
                                                continue
                                            thread = t
                                            break

                                    if not thread and guild.me.guild_permissions.read_message_history:
                                        async for t in channel_db.parent.archived_threads(limit=100):
                                            if t.owner_id == bot.user.id:
                                                try:
                                                    message = await t.fetch_message(t.id)
                                                except disnake.NotFound:
                                                    continue
                                                if not message or message.author.id != bot.user.id:
                                                    continue
                                                thread = t
                                                break

                                    if not thread:
                                        thread_wmessage = await channel_db.parent.create_thread(
                                            name=f"{bot.user} song-request",
                                            content="ƒêƒÉng b√†i theo y√™u c·∫ßu b√†i h√°t.",
                                            auto_archive_duration=10080,
                                            slowmode_delay=5,
                                        )
                                        channel_db = thread_wmessage.thread
                                        message = thread_wmessage.message
                                    else:
                                        channel_db = thread

                            thread_kw = {}

                            if channel_db.locked and channel_db.permissions_for(guild.me).manage_threads:
                                thread_kw.update({"locked": False, "archived": False})

                            elif channel_db.archived and channel_db.owner_id == bot.user.id:
                                thread_kw["archived"] = False

                            if thread_kw:
                                await channel_db.edit(**thread_kw)

                            elif isinstance(channel.parent, disnake.ForumChannel):
                                warn_message = f"**{bot.user.mention} kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω ch·ªß ƒë·ªÅ " \
                                                 f"ƒë·ªÉ h·ªßy l∆∞u tr·ªØ/m·ªü kh√≥a ch·ªß ƒë·ªÅ: {channel_db.mention}**"

                except AttributeError:
                    pass

                if channel_db:

                    channel_db_perms = channel_db.permissions_for(guild.me)

                    channel = bot.get_channel(inter.channel.id)

                    if isinstance(channel, disnake.Thread):
                        send_message_perm = getattr(channel_db, "parent", channel_db).permissions_for(channel.guild.me).send_messages_in_threads
                    else:
                        send_message_perm = channel_db.permissions_for(channel.guild.me).send_messages

                    if not send_message_perm:
                        raise GenericError(
                            f"**{bot.user.mention} kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn tr√™n k√™nh <#{static_player['channel']}>**\n"
                             "N·∫øu b·∫°n mu·ªën ƒë·∫∑t l·∫°i c·∫•u h√¨nh k√™nh y√™u c·∫ßu nh·∫°c, h√£y s·ª≠ d·ª•ng l·ªánh /reset ho·∫∑c /setup"
                             "l·∫°i..."
                        )

                    if not channel_db_perms.embed_links:
                        raise GenericError(
                            f"**{bot.user.mention} kh√¥ng c√≥ quy·ªÅn ƒë√≠nh k√®m li√™n k·∫øt/nh√∫ng v√†o k√™nh <#{static_player['channel']}>**\n"
                             "N·∫øu b·∫°n mu·ªën ƒë·∫∑t l·∫°i c·∫•u h√¨nh k√™nh y√™u c·∫ßu nh·∫°c, h√£y s·ª≠ d·ª•ng l·ªánh /reset ho·∫∑c /setup"
                             "l·∫°i..."
                        )

        return channel_db, warn_message, message

    async def process_player_interaction(
            self,
            interaction: Union[disnake.MessageInteraction, disnake.ModalInteraction],
            command: Optional[disnake.AppCmdInter],
            kwargs: dict
    ):

        if not command:
            raise GenericError("kh√¥ng t√¨m th·∫•y l·ªánh/th·ª±c hi·ªán.")

        await check_cmd(command, interaction)

        await command(interaction, **kwargs)

        try:
            player: LavalinkPlayer = self.bot.music.players[interaction.guild_id]
            player.interaction_cooldown = True
            await asyncio.sleep(1)
            player.interaction_cooldown = False
            await command._max_concurrency.release(interaction)
        except (KeyError, AttributeError):
            pass

    @commands.Cog.listener("on_dropdown")
    async def guild_pin(self, interaction: disnake.MessageInteraction):

        if not self.bot.bot_ready:
            await interaction.send("T√¥i v·∫´n ƒëang kh·ªüi t·∫°o...\nVui l√≤ng ƒë·ª£i th√™m m·ªôt l√°t n·ªØa...", ephemeral=True)
            return

        if interaction.data.custom_id != "player_guild_pin":
            return

        if not interaction.data.values:
            await interaction.response.defer()
            return

        if not interaction.user.voice:
            await interaction.send("B·∫°n ph·∫£i tham gia m·ªôt k√™nh tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.", ephemeral=True)
            return

        await interaction.response.defer(ephemeral=True)

        guild_data = await self.bot.get_data(interaction.guild_id, db_name=DBModel.guilds)

        try:
            query = interaction.data.values[0]
        except KeyError:
            await interaction.send("**M·ª•c ƒë√£ ch·ªçn kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu...**", ephemeral=True)
            await send_idle_embed(interaction.message, bot=self.bot, guild_data=guild_data, force=True)
            return

        kwargs = {
            "query": f"> pin: {query}",
            "position": 0,
            "options": False,
            "manual_selection": True,
            "source": "ytsearch",
            "repeat_amount": 0,
            "server": None,
            "force_play": "no"
        }

        try:
            await self.play.callback(self=self, inter=interaction, **kwargs)
        except Exception as e:
            self.bot.dispatch('interaction_player_error', interaction, e)

    @commands.Cog.listener("on_dropdown")
    async def player_dropdown_event(self, interaction: disnake.MessageInteraction):

        if not interaction.data.custom_id.startswith("musicplayer_dropdown_"):
            return

        if not interaction.values:
            await interaction.response.defer()
            return

        await self.player_controller(interaction, interaction.values[0])

    @commands.Cog.listener("on_button_click")
    async def player_button_event(self, interaction: disnake.MessageInteraction):

        if not interaction.data.custom_id.startswith("musicplayer_"):
            return

        await self.player_controller(interaction, interaction.data.custom_id)

    async def check_stage_title(self, inter, bot: BotCore, player: LavalinkPlayer):

        time_limit = 30 if isinstance(player.guild.me.voice.channel, disnake.VoiceChannel) else 120

        if player.stage_title_event and (time_:=int((disnake.utils.utcnow() - player.start_time).total_seconds())) < time_limit and not (await bot.is_owner(inter.author)):
            raise GenericError(
                f"**B·∫°n s·∫Ω ph·∫£i ƒë·ª£i {time_format((time_limit - time_) * 1000, use_names=True)} ƒê·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y "
                f"v·ªõi giai ƒëo·∫°n ho·∫°t ƒë·ªông qu·∫£ng c√°o t·ª± ƒë·ªông...**"
            )

    async def player_controller(self, interaction: disnake.MessageInteraction, control: str, **kwargs):

        if not self.bot.bot_ready:
            await interaction.send("T√¥i v·∫´n ƒëang kh·ªüi t·∫°o...", ephemeral=True)
            return

        if not interaction.guild_id:
            await interaction.response.edit_message(components=None)
            return

        cmd_kwargs = {}

        cmd: Optional[disnake.AppCmdInter] = None

        if control in (
                PlayerControls.embed_forceplay,
                PlayerControls.embed_enqueue_track,
                PlayerControls.embed_enqueue_playlist,
        ):

            try:
                try:
                    if not (url:=interaction.message.embeds[0].author.url):
                        return
                except:
                    return

                try:
                    await self.player_interaction_concurrency.acquire(interaction)
                except:
                    raise GenericError("C√≥ m·ªôt b√†i h√°t hi·ªán ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω...")

                bot: Optional[BotCore] = None
                player: Optional[LavalinkPlayer] = None
                channel: Union[disnake.TextChannel, disnake.VoiceChannel, disnake.StageChannel, disnake.Thread] = None
                author: Optional[disnake.Member] = None

                for b in sorted(self.bot.pool.bots, key=lambda b: b.identifier, reverse=True):

                    try:
                        p = b.music.players[interaction.guild_id]
                    except KeyError:
                        if c := b.get_channel(interaction.channel_id):
                            bot = b
                            channel = c
                            author = c.guild.get_member(interaction.author.id)
                        continue

                    if p.guild.me.voice and interaction.author.id in p.guild.me.voice.channel.voice_states:

                        if p.locked:
                            raise GenericError(
                                "**Kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y trong khi ƒëang x·ª≠ l√Ω b√†i h√°t"
                                 "(vui l√≤ng ƒë·ª£i th√™m v√†i gi√¢y v√† th·ª≠ l·∫°i).**")

                        player = p
                        bot = b
                        channel = player.text_channel
                        author = channel.guild.get_member(interaction.author.id)
                        break

                if not channel:
                    raise GenericError("Kh√¥ng c√≥ bot n√†o v√†o th·ªùi ƒëi·ªÉm n√†y.")

                if not author.voice:
                    raise GenericError("B·∫°n ph·∫£i tham gia m·ªôt k√™nh tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng n√∫t n√†y....")

                try:
                    node = player.node
                except:
                    node: Optional[wavelink.Node] = None

                try:
                    interaction.author = author
                except AttributeError:
                    pass

                if PlayerControls.embed_forceplay:
                    await check_player_perm(inter=interaction, bot=bot, channel=channel)

                vc_id: int = author.voice.channel.id

                can_connect(channel=author.voice.channel, guild=channel.guild)

                if control == PlayerControls.embed_enqueue_playlist:

                    if (retry_after := self.bot.pool.enqueue_playlist_embed_cooldown.get_bucket(interaction).update_rate_limit()):
                        raise GenericError(
                            f"**B·∫°n s·∫Ω ph·∫£i ƒë·ª£i {int(retry_after)} gi√¢y ƒë·ªÉ th√™m danh s√°ch ph√°t v√†o tr√¨nh ph√°t hi·ªán t·∫°i.**")

                    if not player:
                        player = await self.create_player(inter=interaction, bot=bot, guild=channel.guild,
                                                          channel=channel, node=node)

                    await self.check_player_queue(interaction.author, bot, interaction.guild_id)
                    result, node = await self.get_tracks(url, author, source=False, node=player.node, bot=bot)
                    result = await self.check_player_queue(interaction.author, bot, interaction.guild_id, tracks=result)
                    player.queue.extend(result.tracks)
                    await interaction.send(f"{interaction.author.mention}, danh s√°ch ph√°t [`{result.name}`](<{url}>) ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!{player.controller_link}", ephemeral=True)
                    if not player.is_connected:
                        await player.connect(vc_id)
                    if not player.current:
                        await player.process_next()

                else:

                    track: Union[LavalinkTrack, PartialTrack] = None
                    seek_status = False

                    if player:

                        if control == PlayerControls.embed_forceplay and player.current and (player.current.uri.startswith(url) or url.startswith(player.current.uri)):
                            await self.check_stage_title(inter=interaction, bot=bot, player=player)
                            await player.seek(0)
                            player.set_command_log("quay l·∫°i ph·∫ßn ƒë·∫ßu c·ªßa b√†i h√°t.", emoji="‚è™")
                            await interaction.send("L·ªánh ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng", ephemeral=True)
                            await asyncio.sleep(3)
                            await player.update_stage_topic()
                            await asyncio.sleep(7)
                            seek_status = True

                        else:

                            for t in list(player.queue):
                                if t.uri.startswith(url) or url.startswith(t.uri):
                                    track = t
                                    player.queue.remove(t)
                                    break

                            if not track:
                                for t in list(player.played):
                                    if t.uri.startswith(url) or url.startswith(t.uri):
                                        track = t
                                        player.played.remove(t)
                                        break

                                if not track:

                                    for t in list(player.failed_tracks):
                                        if t.uri.startswith(url) or url.startswith(t.uri):
                                            track = t
                                            player.failed_tracks.remove(t)
                                            break
                                        
                            await interaction.send("L·ªánh ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng", ephemeral=True)

                    if not seek_status:

                        if not track:

                            if (retry_after := self.bot.pool.enqueue_track_embed_cooldown.get_bucket(interaction).update_rate_limit()):
                                raise GenericError(
                                    f"**B·∫°n s·∫Ω ph·∫£i ƒë·ª£i {int(retry_after)} gi√¢y ƒë·ªÉ th√™m b√†i h√°t m·ªõi v√†o h√†ng ƒë·ª£i.**")

                            if control == PlayerControls.embed_enqueue_track:
                                await self.check_player_queue(interaction.author, bot, interaction.guild_id)

                            result, node = await self.get_tracks(url, author, source=False, node=node, bot=bot)

                            try:
                                track = result.tracks[0]
                            except:
                                track = result[0]

                        if control == PlayerControls.embed_enqueue_track:

                            if not player:
                                player = await self.create_player(inter=interaction, bot=bot, guild=channel.guild,
                                                                  channel=channel, node=node)
                            await self.check_player_queue(interaction.author, bot, interaction.guild_id)
                            player.queue.append(track)
                            player.update = True
                            await interaction.send(f"{author.mention}, b√†i h√°t [`{track.title}`](<{track.uri}>) ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ƒë·ª£i.{player.controller_link}", ephemeral=True)
                            if not player.is_connected:
                                await player.connect(vc_id)
                            if not player.current:
                                await player.process_next()

                        else:
                            if not player:
                                player = await self.create_player(inter=interaction, bot=bot, guild=channel.guild,
                                                                  channel=channel, node=node)
                            else:
                                await self.check_stage_title(inter=interaction, bot=bot, player=player)
                            player.queue.insert(0, track)
                            if not player.is_connected:
                                await player.connect(vc_id)
                            await self.process_music(inter=interaction, player=player, force_play="yes")

            except Exception as e:
                self.bot.dispatch('interaction_player_error', interaction, e)
                if not isinstance(e, GenericError):
                    await asyncio.sleep(5)
            try:
                await self.player_interaction_concurrency.release(interaction)
            except:
                pass
            return

        if control == PlayerControls.embed_add_fav:

            try:
                embed = interaction.message.embeds[0]
            except IndexError:
                await interaction.send("C√°c nh√∫ng c·ªßa tin nh·∫Øn ƒë√£ b·ªã x√≥a ...", ephemeral=True)
                return

            if (retry_after := self.bot.pool.add_fav_embed_cooldown.get_bucket(interaction).update_rate_limit()):
                await interaction.send(
                    f"**B·∫°n s·∫Ω ph·∫£i ƒë·ª£i {int(retry_after)} gi√¢y ƒë·ªÉ th√™m m·ª•c y√™u th√≠ch m·ªõi.**",
                    ephemeral=True)
                return


            user_data = await self.bot.get_global_data(interaction.author.id, db_name=DBModel.users)

            if self.bot.config["MAX_USER_FAVS"] > 0 and not (await self.bot.is_owner(interaction.author)):

                if (current_favs_size := len(user_data["fav_links"])) > self.bot.config["MAX_USER_FAVS"]:
                    await interaction.edit_original_message(f"S·ªë l∆∞·ª£ng m·ª•c trong t·ªáp y√™u th√≠ch c·ªßa b·∫°n v∆∞·ª£t qu√° "
                                                             f"s·ªë l∆∞·ª£ng t·ªëi ƒëa cho ph√©p ({self.bot.config['MAX_USER_FAVS']}).")
                    return

                if (current_favs_size + (user_favs := len(user_data["fav_links"]))) > self.bot.config["MAX_USER_FAVS"]:
                    await interaction.edit_original_message(
                        "B·∫°n kh√¥ng c√≥ ƒë·ªß dung l∆∞·ª£ng ƒë·ªÉ th√™m t·∫•t c·∫£ d·∫•u trang v√†o t·ªáp c·ªßa m√¨nh...\n"
                         f"Gi·ªõi h·∫°n hi·ªán t·∫°i: {self.bot.config['MAX_USER_FAVS']}\n"
                         f"S·ªë m·ª•c y√™u th√≠ch ƒë√£ l∆∞u: {user_favs}\n"
                         f"B·∫°n c√≥: {(current_favs_size + user_favs) - self.bot.config['MAX_USER_FAVS']}")
                    return

            fav_name = embed.author.name[1:]

            user_data["fav_links"][fav_name] = embed.author.url

            await self.bot.update_global_data(interaction.author.id, user_data, db_name=DBModel.users)

            global_data = await self.bot.get_global_data(interaction.guild_id, db_name=DBModel.guilds)

            try:
                cmd = f"</play:" + str(self.bot.pool.controller_bot.get_global_command_named("play",
                                                                                             cmd_type=disnake.ApplicationCommandType.chat_input).id) + ">"
            except AttributeError:
                cmd = "/play"

            try:
                interaction.message.embeds[0].fields[0].value = f"{interaction.author.mention} " + \
                                                                interaction.message.embeds[0].fields[0].value.replace(
                                                                    interaction.author.mention, "")
            except IndexError:
                interaction.message.embeds[0].add_field(name="**C√°c th√†nh vi√™n ƒë√£ th√≠ch danh s√°ch ph√°t:**",
                                                        value=interaction.author.mention)

            await interaction.send(embed=disnake.Embed(
                description=f"[`{fav_name}`](<{embed.author.url}>) **ƒë√£ ƒë∆∞·ª£c th√™m v√†o m·ª•c y√™u th√≠ch c·ªßa b·∫°n!**\n\n"
                             "**C√°ch s·ª≠ d·ª•ng?**\n"
                             f"* S·ª≠ d·ª•ng l·ªánh {cmd} (ch·ªçn m·ª•c ∆∞a th√≠ch trong qu√° tr√¨nh t·ª± ƒë·ªông ho√†n th√†nh t√¨m ki·∫øm)\n"
                             "* Nh·∫•p v√†o n√∫t ph√°t/ch·ªçn/t√≠ch h·ª£p tr√¨nh ph√°t y√™u th√≠ch.\n"
                             f"* S·ª≠ d·ª•ng l·ªánh {global_data['prefix'] or self.bot.default_prefix}{self.play_legacy.name} m√† kh√¥ng bao g·ªìm t√™n ho·∫∑c li√™n k·∫øt t·ªõi b√†i h√°t/video.\n"


            ).set_footer(text=f"N·∫øu b·∫°n mu·ªën xem t·∫•t c·∫£ c√°c m·ª•c y√™u th√≠ch c·ªßa m√¨nh, h√£y s·ª≠ d·ª•ng l·ªánh {global_data['prefix'] or self.bot.default_prefix}{self.fav_manager_legacy.name}"), ephemeral=True)

            if not interaction.message.flags.ephemeral:
                if not interaction.guild:
                    await (await interaction.original_response()).edit(embed=interaction.message.embeds[0])
                else:
                    await interaction.message.edit(embed=interaction.message.embeds[0])
            return

        if not interaction.guild:
            await interaction.response.edit_message(components=None)
            return

        try:

            if control == "musicplayer_request_channel":
                cmd = self.bot.get_slash_command("setup")
                cmd_kwargs = {"target": interaction.channel}
                await self.process_player_interaction(interaction, cmd, cmd_kwargs)
                return

            if control == PlayerControls.fav_manager:

                if str(interaction.user.id) not in interaction.message.content:
                    await interaction.send("B·∫°n kh√¥ng th·ªÉ t∆∞∆°ng t√°c ·ªü ƒë√¢y!", ephemeral=True)
                    return

                cmd = self.bot.pool.controller_bot.get_slash_command("fav_manager")
                await self.process_player_interaction(interaction, cmd, cmd_kwargs)
                return

            if control == PlayerControls.integration_manager:

                if str(interaction.user.id) not in interaction.message.content:
                    await interaction.send("B·∫°n kh√¥ng th·ªÉ t∆∞∆°ng t√°c ·ªü ƒë√¢y!", ephemeral=True)
                    return

                cmd = self.bot.pool.controller_bot.get_slash_command("integrations")
                await self.process_player_interaction(interaction, cmd, cmd_kwargs)
                return

            if control == PlayerControls.add_song:

                if not interaction.user.voice:
                    raise GenericError("**B·∫°n ph·∫£i tham gia m·ªôt k√™nh tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng n√∫t n√†y.**")

                await interaction.response.send_modal(
                    title="Y√™u c·∫ßu m·ªôt b√†i h√°t",
                    custom_id=f"modal_add_song",
                    components=[
                        disnake.ui.TextInput(
                            style=disnake.TextInputStyle.short,
                            label="T√™n b√†i h√°t/li√™n k·∫øt.",
                            placeholder="T√™n ho·∫∑c link youtube/spotify/soundcloud, v.v.",
                            custom_id="song_input",
                            max_length=150,
                            required=True
                        ),
                        disnake.ui.TextInput(
                            style=disnake.TextInputStyle.short,
                            label="V·ªã tr√≠ d√≤ng (s·ªë).",
                            placeholder="T√πy ch·ªçn, n·∫øu kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng s·∫Ω ƒë∆∞·ª£c th√™m v√†o cu·ªëi.",
                            custom_id="song_position",
                            max_length=3,
                            required=False
                        ),
                    ]
                )

                return

            if control == PlayerControls.enqueue_fav:

                if not interaction.user.voice:
                    raise GenericError("**B·∫°n ph·∫£i tham gia m·ªôt k√™nh tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng n√∫t n√†y.**")

                cmd_kwargs = {
                    "query": kwargs.get("query", ""),
                    "position": 0,
                    "options": False,
                    "source": None,
                    "repeat_amount": 0,
                    "server": None,
                    "force_play": "no"
                }

                cmd_kwargs["manual_selection"] = not cmd_kwargs["query"]

                cmd = self.bot.get_slash_command("play")

            else:

                try:
                    player: LavalinkPlayer = self.bot.music.players[interaction.guild_id]
                except KeyError:
                    await interaction.send("Kh√¥ng c√≥ ng∆∞·ªùi ch∆°i ƒëang ho·∫°t ƒë·ªông tr√™n m√°y ch·ªß...", ephemeral=True)
                    await send_idle_embed(interaction.message, bot=self.bot)
                    return

                if interaction.message != player.message:
                    return

                if player.interaction_cooldown:
                    raise GenericError("Thao t√°c qu√° nhanh, vui l√≤ng th·ª≠ l·∫°i")

                try:
                    vc = player.guild.me.voice.channel
                except AttributeError:
                    await player.playerdestroy(force=True)
                    return

                if control == PlayerControls.help_button:
                    embed = disnake.Embed(
                        description="üìò **TH√îNG TIN V·ªÄ C√ÅC N√öT** üìò\n\n"
                                     "‚èØÔ∏è `= T·∫°m d·ª´ng/Ti·∫øp t·ª•c nh·∫°c.`\n"
                                     "‚èÆÔ∏è `= Quay l·∫°i b√†i h√°t ƒë√£ ph√°t tr∆∞·ªõc ƒë√≥.`\n"
                                     "‚è≠Ô∏è `= Chuy·ªÉn sang b√†i h√°t ti·∫øp theo.`\n"
                                     "üîÄ `= Tr·ªôn c√°c b√†i h√°t trong h√†ng ƒë·ª£i.`\n"
                                     "üé∂ `= Th√™m b√†i h√°t/danh s√°ch ph√°t/y√™u th√≠ch.`\n"
                                     "‚èπÔ∏è `= D·ª´ng tr√¨nh ph√°t v√† ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh.`\n"
                                     "üìë `= Hi·ªÉn th·ªã h√†ng ƒë·ª£i nh·∫°c.`\n"
                                     "üõ†Ô∏è `= Thay ƒë·ªïi m·ªôt s·ªë c√†i ƒë·∫∑t c·ªßa ng∆∞·ªùi ch∆°i:`\n"
                                     "`√¢m l∆∞·ª£ng/hi·ªáu ·ª©ng nightcore/l·∫∑p l·∫°i/ch·∫ø ƒë·ªô h·∫°n ch·∫ø.`\n",
                        color=self.bot.get_color(interaction.guild.me)
                    )

                    await interaction.response.send_message(embed=embed, ephemeral=True)
                    return

                if not interaction.author.voice or interaction.author.voice.channel != vc:
                    raise GenericError(f"B·∫°n ph·∫£i ·ªü tr√™n k√™nh <#{vc.id}> ƒë·ªÉ s·ª≠ d·ª•ng c√°c n√∫t tr√¨nh ph√°t.")

                if control == PlayerControls.miniqueue:
                    await is_dj().predicate(interaction)
                    player.mini_queue_enabled = not player.mini_queue_enabled
                    player.set_command_log(
                        emoji="üìë",
                        text=f"{interaction.author.mention} {'k√≠ch ho·∫°t' if player.mini_queue_enabled else 'v√¥ hi·ªáu h√≥a'} "
                             f"h√†ng ƒë·ª£i mini."
                    )
                    await player.invoke_np(interaction=interaction)
                    return

                try:
                    await self.player_interaction_concurrency.acquire(interaction)
                except commands.MaxConcurrencyReached:
                    raise GenericError(
                        "**B·∫°n c√≥ m·ªôt t∆∞∆°ng t√°c ·∫©n!**\n`N·∫øu ƒë√≥ l√† m·ªôt tin nh·∫Øn ·∫©n, tr√°nh nh·∫•p v√†o \"b·ªè qua\".`")

                if control == PlayerControls.add_favorite:

                    if not player.current:
                        await interaction.send("**Hi·ªán t·∫°i kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t..**", ephemeral=True)
                        return

                    choices = {}
                    msg = ""

                    if player.current.uri:
                        choices["Track"] = {
                            "name": player.current.title,
                            "url": player.current.uri,
                            "emoji": "üéµ"
                        }
                        msg += f"**B√†i h√°t:** [`{player.current.title}`]({player.current.uri})\n"

                    if player.current.album_url:
                        choices["Album"] = {
                            "name": player.current.album_name,
                            "url": player.current.album_url,
                            "emoji": "üíΩ"
                        }
                        msg += f"**Album:** [`{player.current.album_name}`]({player.current.album_url})\n"

                    if player.current.playlist_url:
                        choices["Playlist"] = {
                            "name": player.current.playlist_name,
                            "url": player.current.playlist_url,
                            "emoji": "<:music_queue:703761160679194734>"
                        }
                        msg += f"**Playlist:** [`{player.current.playlist_name}`]({player.current.playlist_url})\n"

                    if not choices:
                        try:
                            await self.player_interaction_concurrency.release(interaction)
                        except:
                            pass
                        await interaction.send(
                            embed=disnake.Embed(
                                color=self.bot.get_color(interaction.guild.me),
                                description="### Kh√¥ng c√≥ m·ª•c n√†o ƒë·ªÉ ·ªßng h·ªô √¢m nh·∫°c hi·ªán t·∫°i."
                            ), ephemeral=True
                        )
                        return

                    if len(choices) == 1:
                        select_type, info = list(choices.items())[0]

                    else:
                        view = SelectInteraction(
                            user=interaction.author, timeout=30,
                            opts=[disnake.SelectOption(label=k, description=v["name"][:50], emoji=v["emoji"]) for k,v in choices.items()]
                        )

                        await interaction.send(
                            embed=disnake.Embed(
                                color=self.bot.get_color(interaction.guild.me),
                                description=f"### Ch·ªçn m·ªôt m·ª•c b√†i h√°t hi·ªán t·∫°i ƒë·ªÉ th√™m v√†o m·ª•c y√™u th√≠ch c·ªßa b·∫°n:"
                                            f"\n\n{msg}"
                            ), view=view, ephemeral=True
                        )

                        await view.wait()

                        select_interaction = view.inter

                        if not select_interaction or view.selected is False:
                            try:
                                await self.player_interaction_concurrency.release(interaction)
                            except:
                                pass
                            await interaction.edit_original_message(
                                embed=disnake.Embed(
                                    color=self.bot.get_color(interaction.guild.me),
                                    description="### Ho·∫°t ƒë·ªông b·ªã h·ªßy b·ªè!"
                                ), view=None
                            )
                            return

                        interaction = select_interaction

                        select_type = view.selected
                        info = choices[select_type]

                    user_data = await self.bot.get_global_data(interaction.author.id, db_name=DBModel.users)

                    if self.bot.config["MAX_USER_FAVS"] > 0 and not (await self.bot.is_owner(interaction.author)):

                        if len(user_data["fav_links"]) >= self.bot.config["MAX_USER_FAVS"]:
                            await interaction.edit_original_message(
                                embed=disnake.Embed(
                                    color=self.bot.get_color(interaction.guild.me),
                                    description="B·∫°n kh√¥ng c√≥ ƒë·ªß dung l∆∞·ª£ng ƒë·ªÉ th√™m t·∫•t c·∫£ d·∫•u trang v√†o t·ªáp c·ªßa m√¨nh...\n"
                                                 f"Gi·ªõi h·∫°n hi·ªán t·∫°i: {self.bot.config['MAX_USER_FAVS']}"
                                ), view=None)
                            return

                    user_data["fav_links"][fix_characters(info["name"], self.bot.config["USER_FAV_MAX_URL_LENGTH"])] = info["url"]

                    await self.bot.update_global_data(interaction.author.id, user_data, db_name=DBModel.users)

                    self.bot.dispatch("fav_add", interaction.user, user_data, f"[`{info['name']}`]({info['url']})")

                    global_data = await self.bot.get_global_data(interaction.author.id, db_name=DBModel.guilds)

                    try:
                        slashcmd = f"</play:" + str(self.bot.pool.controller_bot.get_global_command_named("play", cmd_type=disnake.ApplicationCommandType.chat_input).id) + ">"
                    except AttributeError:
                        slashcmd = "/play"

                    await interaction.edit_original_response(
                        embed=disnake.Embed(
                            color=self.bot.get_color(interaction.guild.me),
                            description="### M·ª•c ƒë√£ ƒë∆∞·ª£c th√™m/ch·ªânh s·ª≠a th√†nh c√¥ng v√†o m·ª•c y√™u th√≠ch c·ªßa b·∫°n:\n\n"
                                         f"**{select_type}:** [`{info['name']}`]({info['url']})\n\n"
                                         f"### C√°ch s·ª≠ d·ª•ng n√≥?\n"
                                         f"* S·ª≠ d·ª•ng l·ªánh {slashcmd} (khi ho√†n t·∫•t t√¨m ki·∫øm t·ª± ƒë·ªông)\n"
                                         f"* Nh·∫•p v√†o n√∫t ph√°t/ch·ªçn/t√≠ch h·ª£p tr√¨nh ph√°t y√™u th√≠ch.\n"
                                         f"* S·ª≠ d·ª•ng l·ªánh {global_data['prefix'] or self.bot.default_prefix}{self.play_legacy.name} m√† kh√¥ng bao g·ªìm t√™n ho·∫∑c li√™n k·∫øt t·ªõi b√†i h√°t/video."
                        ), view=None
                    )

                    try:
                        await self.player_interaction_concurrency.release(interaction)
                    except:
                        pass

                    return

                if control == PlayerControls.lyrics:
                    if not player.current:
                        try:
                            await self.player_interaction_concurrency.release(interaction)
                        except:
                            pass
                        await interaction.send("**T√¥i kh√¥ng ch∆°i th·ª© g√¨ ƒë√≥ v√†o l√∫c n√†y ...**", ephemeral=True)
                        return

                    if not player.current.ytid:
                        try:
                            await self.player_interaction_concurrency.release(interaction)
                        except:
                            pass
                        await interaction.send("Hi·ªán t·∫°i ch·ªâ c√≥ √¢m nh·∫°c YouTube ƒë∆∞·ª£c h·ªó tr·ª£..", ephemeral=True)
                        return

                    not_found_msg = "Kh√¥ng c√≥ l·ªùi b√†i h√°t cho √¢m nh·∫°c hi·ªán t·∫°i..."

                    await interaction.response.defer(ephemeral=True, with_message=True)

                    if player.current.info["extra"].get("lyrics") is None:
                        player.current.info["extra"]["lyrics"] = await player.node.fetch_ytm_lyrics(player.current.ytid)
                    elif not player.current.info["extra"]["lyrics"]:
                        try:
                            await self.player_interaction_concurrency.release(interaction)
                        except:
                            pass
                        await interaction.edit_original_message(f"**{not_found_msg}**")
                        return

                    if not player.current.info["extra"]["lyrics"]:
                        try:
                            await self.player_interaction_concurrency.release(interaction)
                        except:
                            pass
                        player.current.info["extra"]["lyrics"] = {}
                        await interaction.edit_original_message(f"**{not_found_msg}**")
                        return

                    player.current.info["extra"]["lyrics"]["track"]["albumArt"] = player.current.info["extra"]["lyrics"]["track"]["albumArt"][:-1]

                    try:
                        lyrics_string = "\n".join([d['line'] for d in  player.current.info["extra"]["lyrics"]['lines']])
                    except KeyError:
                        lyrics_string = player.current.info["extra"]["lyrics"]["text"]

                    try:
                        await self.player_interaction_concurrency.release(interaction)
                    except:
                        pass

                    await interaction.edit_original_message(
                        embed=disnake.Embed(
                            description=f"### L·ªùi b√†i h√°t: [{player.current.title}]({player.current.uri})\n{lyrics_string}",
                            color=self.bot.get_color(player.guild.me)
                        )
                    )
                    return

                if control == PlayerControls.volume:
                    cmd_kwargs = {"value": None}

                elif control == PlayerControls.queue:
                    cmd = self.bot.get_slash_command("queue").children.get("display")

                elif control == PlayerControls.shuffle:
                    cmd = self.bot.get_slash_command("queue").children.get("shuffle")

                elif control == PlayerControls.seek_to_start:
                    cmd = self.bot.get_slash_command("seek")
                    cmd_kwargs = {"position": "0"}

                elif control == PlayerControls.keep_connected:
                    cmd = self.bot.get_slash_command("247")

                elif control == PlayerControls.pause_resume:
                    control = PlayerControls.pause if not player.paused else PlayerControls.resume

                elif control == PlayerControls.loop_mode:

                    if player.loop == "current":
                        cmd_kwargs['mode'] = 'queue'
                    elif player.loop == "queue":
                        cmd_kwargs['mode'] = 'off'
                    else:
                        cmd_kwargs['mode'] = 'current'

                elif control == PlayerControls.skip:
                    cmd_kwargs = {"query": None, "play_only": "no"}

            if not cmd:
                cmd = self.bot.get_slash_command(control[12:])

            await self.process_player_interaction(
                interaction=interaction,
                command=cmd,
                kwargs=cmd_kwargs
            )

            try:
                await self.player_interaction_concurrency.release(interaction)
            except:
                pass

        except Exception as e:
            try:
                await self.player_interaction_concurrency.release(interaction)
            except:
                pass
            self.bot.dispatch('interaction_player_error', interaction, e)

    @commands.Cog.listener("on_modal_submit")
    async def song_request_modal(self, inter: disnake.ModalInteraction):

        if inter.custom_id.startswith("modal_add_song"):

            try:

                query = inter.text_values["song_input"]
                position = inter.text_values["song_position"]

                if position:
                    if not position.isdigit():
                        raise GenericError("**V·ªã tr√≠ c·ªßa d√≤ng ph·∫£i l√† m·ªôt s·ªë.**")
                    position = int(position)

                    if position < 1:
                        raise GenericError("**S·ªë v·ªã tr√≠ h√†ng ƒë·ª£i ph·∫£i t·ª´ 1 tr·ªü l√™n.**")

                kwargs = {
                    "query": query,
                    "position": position or 0,
                    "options": False,
                    "manual_selection": True,
                    "source": None,
                    "repeat_amount": 0,
                    "server": None,
                    "force_play": "no",
                }

                await self.process_player_interaction(
                    interaction=inter,
                    command=self.bot.get_slash_command("play"),
                    kwargs=kwargs,
                )
            except Exception as e:
                self.bot.dispatch('interaction_player_error', inter, e)

    async def delete_message(self, message: disnake.Message, delay: int = None, ignore=False):

        if ignore:
            return

        try:
            is_forum = isinstance(message.channel.parent, disnake.ForumChannel)
        except AttributeError:
            is_forum = False

        if message.is_system() and is_forum:
            return

        if message.channel.permissions_for(message.guild.me).manage_messages or message.author.id == self.bot.user.id:

            try:
                await message.delete(delay=delay)
            except:
                traceback.print_exc()

    @commands.Cog.listener("on_song_request")
    async def song_requests(self, ctx: Optional[CustomContext], message: disnake.Message):

        if ctx.command or message.mentions:
            return

        if message.author.bot and not isinstance(message.channel, disnake.StageChannel):
            return

        try:
            data = await self.bot.get_data(message.guild.id, db_name=DBModel.guilds)
        except AttributeError:
            return

        player: Optional[LavalinkPlayer] = self.bot.music.players.get(message.guild.id)

        if player and isinstance(message.channel, disnake.Thread) and not player.static:

            try:
                if player.text_channel.id != message.id:
                    return
            except AttributeError:
                return

            if not player.controller_mode:
                return

            text_channel = message.channel

        else:

            static_player = data['player_controller']

            channel_id = static_player['channel']

            if not channel_id:
                return

            if isinstance(message.channel, disnake.Thread):
                if isinstance(message.channel.parent, disnake.TextChannel):
                    if str(message.channel.parent.id) != channel_id:
                        return
                elif str(message.channel.id) != channel_id:
                    return
            elif str(message.channel.id) != channel_id:
                return

            text_channel = self.bot.get_channel(int(channel_id)) or await self.bot.fetch_channel(int(channel_id))

            if not text_channel:
                await self.reset_controller_db(message.guild.id, data)
                return

            if isinstance(text_channel, disnake.Thread):
                send_message_perm = text_channel.parent.permissions_for(message.guild.me).send_messages_in_threads
            else:
                send_message_perm = text_channel.permissions_for(message.guild.me).send_messages

            if not send_message_perm:
                return

            if not self.bot.intents.message_content:

                if self.song_request_cooldown.get_bucket(message).update_rate_limit():
                    return

                await message.channel.send(
                    message.author.mention,
                    embed=disnake.Embed(
                        description="Th·∫≠t kh√¥ng may, t√¥i kh√¥ng th·ªÉ ki·ªÉm tra n·ªôi dung tin nh·∫Øn c·ªßa b·∫°n...\n"
                                    "C·ªë g·∫Øng th√™m nh·∫°c b·∫±ng c√°ch s·ª≠ d·ª•ng **/play ** ho·∫∑c nh·∫•p v√†o m·ªôt trong c√°c n√∫t b√™n d∆∞·ªõi:",
                        color=self.bot.get_color(message.guild.me)
                    ),
                     delete_after=20
                )
                return

        if message.content.startswith("/") or message.is_system():
            await self.delete_message(message)
            return

        try:
            if isinstance(message.channel, disnake.Thread):

                if isinstance(message.channel.parent, disnake.ForumChannel):

                    if data['player_controller']["channel"] != str(message.channel.id):
                        return
                    if message.is_system():
                        await self.delete_message(message, ignore=data['player_controller']['purge_mode'] != SongRequestPurgeMode.on_message)

        except AttributeError:
            pass

        msg = None
        error = None
        has_exception = None

        try:
            if message.author.bot:
                if message.is_system() and not isinstance(message.channel, disnake.Thread):
                    await self.delete_message(message, ignore=data['player_controller']['purge_mode'] != SongRequestPurgeMode.on_message)
                if message.author.id == self.bot.user.id:
                    await self.delete_message(message, delay=15, ignore=data['player_controller']['purge_mode'] != SongRequestPurgeMode.on_message)
                return

            if not message.content:

                if message.type == disnake.MessageType.thread_starter_message:
                    return

                if message.is_system():
                    await self.delete_message(message)
                    return

                try:
                    attachment = message.attachments[0]
                except IndexError:
                    await message.channel.send(f"{message.author.mention} B·∫°n ph·∫£i g·ª≠i t√™n/t√™n √¢m nh·∫°c.")
                    return

                else:

                    if attachment.size > 18000000:
                        await message.channel.send(f"{message.author.mention} T·ªáp b·∫°n ƒë√£ g·ª≠i ph·∫£i c√≥ k√≠ch th∆∞·ªõc "
                                                   f"k√©m h∆°n 18MB.")
                        return

                    if attachment.content_type not in self.audio_formats:
                        await message.channel.send(f"{message.author.mention} T·ªáp b·∫°n ƒë√£ g·ª≠i ph·∫£i c√≥ k√≠ch th∆∞·ªõc "
                                                   f"k√©m h∆°n 18MB.")
                        return

                    message.content = attachment.url

            try:
                await self.song_request_concurrency.acquire(message)
            except:

                await message.channel.send(
                    f"{message.author.mention} ∆°i, b·∫°n ph·∫£i ƒë·ª£i b√†i h√°t m√† b·∫°n ƒë√£ y√™u c·∫ßu tr∆∞·ªõc ƒë√≥ t·∫£i l√™n ƒë√£...",
                )

                await self.delete_message(message, ignore=data['player_controller']['purge_mode'] != SongRequestPurgeMode.on_message)
                return

            message.content = message.content.strip("<>")

            urls = URL_REG.findall(message.content)

            if not urls:
                source = self.bot.config["DEFAULT_SEARCH_PROVIDER"]

            else:
                source = False
                message.content = urls[0]

                if "&list=" in message.content:

                    view = SelectInteraction(
                        user=message.author,
                        opts=[
                            disnake.SelectOption(label="B√†i h√°t", emoji="üéµ",
                                                 description="Ch·ªâ t·∫£i b√†i h√°t t·ª´ link", value="music"),
                            disnake.SelectOption(label="Playlist", emoji="üé∂",
                                                 description="T·∫£i danh s√°ch ph√°t v√†o v√† ph√°t n√≥", value="playlist"),
                        ], timeout=30)

                    embed = disnake.Embed(
                        description="**Li√™n k·∫øt ch·ª©a video c√≥ danh s√°ch ph√°t.**\n"
                                     f'Ch·ªçn m·ªôt t√πy ch·ªçn trong <t:{int((disnake.utils.utcnow() + datetime.timedelta(seconds=30)).timestamp())}:R> ƒë·ªÉ ti·∫øp t·ª•c.',
                        color=self.bot.get_color(message.guild.me)
                    )

                    msg = await message.channel.send(message.author.mention, embed=embed, view=view)

                    await view.wait()

                    try:
                        await view.inter.response.defer()
                    except:
                        pass

                    if view.selected == "music":
                        message.content = YOUTUBE_VIDEO_REG.match(message.content).group()

            await self.parse_song_request(message, text_channel, data, response=msg, source=source)

        except GenericError as e:
            error = f"{message.author.mention}. {e}"

        except Exception as e:
            try:
                error_msg, full_error_msg, kill_process, components, mention_author = parse_error(ctx, e)
            except:
                has_exception = e
            else:
                if not error_msg:
                    has_exception = e
                    error = f"{message.author.mention} **ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng nh·∫≠n k·∫øt qu·∫£ cho t√¨m ki·∫øm c·ªßa b·∫°n:** ```py\n{error_msg}```"
                else:
                    error = f"{message.author.mention}. {error_msg}"

        if error:

            await self.delete_message(message, ignore=data['player_controller']['purge_mode'] != SongRequestPurgeMode.on_message)

            try:
                if msg:
                    await msg.edit(content=error, embed=None, view=None)
                else:
                    await message.channel.send(error, delete_after=9)
            except:
                traceback.print_exc()

        await self.song_request_concurrency.release(message)

        if has_exception and self.bot.config["AUTO_ERROR_REPORT_WEBHOOK"]:

            cog = self.bot.get_cog("ErrorHandler")

            if not cog:
                return

            max_concurrency = cog.webhook_max_concurrency

            await max_concurrency.acquire(message)

            try:
                try:
                    error_msg, full_error_msg, kill_process, components, mention_author = parse_error(message, has_exception)
                except:
                    full_error_msg = has_exception

                embed = disnake.Embed(
                    title="ƒê√£ x·∫£y ra l·ªói tr√™n m√°y ch·ªß (y√™u c·∫ßu b√†i h√°t):",
                    timestamp=disnake.utils.utcnow(),
                    description=f"```py\n{repr(has_exception)[:2030].replace(self.bot.http.token, 'mytoken')}```"
                )

                embed.set_footer(
                    text=f"{message.author} [{message.author.id}]",
                    icon_url=message.author.display_avatar.with_static_format("png").url
                )

                embed.add_field(
                    name="M√°y ch·ªß:", inline=False,
                    value=f"```\n{disnake.utils.escape_markdown(ctx.guild.name)}\nID: {ctx.guild.id}```"
                )

                embed.add_field(
                    name="N·ªôi dung y√™u c·∫ßu b√†i h√°t:", inline=False,
                    value=f"```\n{message.content}```"
                )

                embed.add_field(
                    name="K√™nh vƒÉn b·∫£n:", inline=False,
                    value=f"```\n{disnake.utils.escape_markdown(ctx.channel.name)}\nID: {ctx.channel.id}```"
                )

                if vc := ctx.author.voice:
                    embed.add_field(
                        name="K√™nh tho·∫°i (ng∆∞·ªùi d√πng):", inline=False,
                        value=f"```\n{disnake.utils.escape_markdown(vc.channel.name)}" +
                              (f" ({len(vc.channel.voice_states)}/{vc.channel.user_limit})"
                               if vc.channel.user_limit else "") + f"\nID: {vc.channel.id}```"
                    )

                if vcbot := ctx.guild.me.voice:
                    if vcbot.channel != vc.channel:
                        embed.add_field(
                            name="K√™nh tho·∫°i (bot):", inline=False,
                            value=f"{vc.channel.name}" +
                                  (f" ({len(vc.channel.voice_states)}/{vc.channel.user_limit})"
                                   if vc.channel.user_limit else "") + f"\nID: {vc.channel.id}```"
                        )

                if ctx.guild.icon:
                    embed.set_thumbnail(url=ctx.guild.icon.with_static_format("png").url)

                await cog.send_webhook(
                    embed=embed,
                    file=string_to_file(full_error_msg, "error_traceback_songrequest.txt")
                )

            except:
                traceback.print_exc()

            await asyncio.sleep(20)

            try:
                await max_concurrency.release(message)
            except:
                pass


    async def process_music(
            self, inter: Union[disnake.Message, disnake.MessageInteraction, disnake.AppCmdInter, CustomContext, disnake.ModalInteraction],
            player: LavalinkPlayer, force_play: str = "no", ephemeral=True, log_text = "", emoji="",
            warn_message: str = "", user_data: dict = None, reg_query: str = None
    ):

        if not player.current:
            if warn_message:
                player.set_command_log(emoji="‚ö†Ô∏è", text=warn_message)
            await player.process_next()
        elif force_play == "yes":
            player.set_command_log(
                emoji="‚ñ∂Ô∏è",
                text=f"{inter.author.mention} ƒë√£ th√™m b√†i h√°t hi·ªán t·∫°i ƒë·ªÉ ph√°t ngay l·∫≠p t·ª©c."
            )
            await player.track_end()
            await player.process_next()
        #elif player.current.autoplay:
        #    player.set_command_log(text=log_text, emoji=emoji)
        #    await player.track_end()
        #    await player.process_next()
        else:
            if ephemeral:
                player.set_command_log(text=log_text, emoji=emoji)
            player.update = True

        if reg_query is not None:

            if not user_data:
                user_data = await self.bot.get_global_data(inter.author.id, db_name=DBModel.users)

            try:
                user_data["last_tracks"].remove(reg_query)
            except:
                pass

            if len(user_data["last_tracks"]) > 6:
                user_data["last_tracks"].pop(0)

            user_data["last_tracks"].append(reg_query)

            await self.bot.update_global_data(inter.author.id, user_data, db_name=DBModel.users)

    async def create_player(
            self,
            inter: Union[disnake.Message, disnake.MessageInteraction, disnake.AppCmdInter, CustomContext, disnake.ModalInteraction],
            bot: BotCore, guild: disnake.Guild, guild_data: dict = None, channel = None, message_inter = None,
            node: wavelink.Node = None, modal_message_id: int = None
    ):

        if not guild_data:
            inter, guild_data = await get_inter_guild_data(inter, bot)

        skin = guild_data["player_controller"]["skin"]
        static_skin = guild_data["player_controller"]["static_skin"]
        static_player = guild_data["player_controller"]

        if not channel:
            channel = bot.get_channel(getattr(inter, 'channel_id', inter.channel.id))

        if not node:
            node = await self.get_best_node(bot)

        try:
            global_data = inter.global_guild_data
        except AttributeError:
            global_data = await bot.get_global_data(guild.id, db_name=DBModel.guilds)
            try:
                inter.global_guild_data = global_data
            except:
                pass

        if global_data["global_skin"]:
            skin = global_data["player_skin"] or skin
            static_skin = global_data["player_skin_static"] or guild_data["player_controller"]["static_skin"]

        try:
            invite = global_data["listen_along_invites"][str(inter.channel.id)]
        except KeyError:
            invite = None

        else:

            try:
                invite = (await bot.fetch_invite(invite)).url
            except disnake.NotFound:
                invite = None
            except Exception:
                traceback.print_exc()
                invite = ""

            if invite is None:
                print(
                    f'{"-" * 15}\n'
                    f'Removendo invite: {invite} \n'
                    f'Servidor: {inter.guild.name} [{inter.guild_id}]\n'
                    f'Canal: {inter.channel.name} [{inter.channel.id}]\n'
                    f'{"-" * 15}'
                )
                del global_data["listen_along_invites"][str(inter.channel.id)]
                await self.bot.update_global_data(inter.guild_id, global_data, db_name=DBModel.guilds)

        for n, s in global_data["custom_skins"].items():
            if isinstance(s, str):
                global_data["custom_skins"][n] = pickle.loads(b64decode(s))

        for n, s in global_data["custom_skins_static"].items():
            if isinstance(s, str):
                global_data["custom_skins_static"][n] = pickle.loads(b64decode(s))

        try:
            guild_id =inter.guild.id
        except AttributeError:
            guild_id = inter.guild_id

        player: LavalinkPlayer = bot.music.get_player(
            guild_id=guild_id,
            cls=LavalinkPlayer,
            player_creator=inter.author.id,
            guild=guild,
            channel=channel,
            last_message_id=guild_data['player_controller']['message_id'],
            node_id=node.identifier,
            static=bool(static_player['channel']),
            skin=bot.check_skin(skin),
            skin_static=bot.check_static_skin(static_skin),
            custom_skin_data=global_data["custom_skins"],
            custom_skin_static_data=global_data["custom_skins_static"],
            extra_hints=self.extra_hints,
            restrict_mode=guild_data['enable_restrict_mode'],
            listen_along_invite=invite,
            volume=int(guild_data['default_player_volume']),
            autoplay=guild_data["autoplay"],
            prefix=global_data["prefix"] or bot.default_prefix,
            purge_mode=guild_data['player_controller']['purge_mode'],
            stage_title_template=global_data['voice_channel_status'],
        )

        if static_player['channel']:

            static_channel = bot.get_channel(int(static_player['channel'])) or await bot.fetch_channel(
                int(static_player['channel']))

            allowed_channel = None

            for ch in (static_channel, channel):

                if not ch: continue

                if isinstance(ch, disnake.Thread):
                    channel_check = ch.parent
                else:
                    channel_check = ch

                bot_perms = channel_check.permissions_for(guild.me)

                if bot_perms.read_message_history:
                    allowed_channel = ch
                    break

                elif bot_perms.manage_permissions:
                    overwrites = {
                        guild.me: disnake.PermissionOverwrite(
                            embed_links=True,
                            send_messages=True,
                            send_messages_in_threads=True,
                            read_messages=True,
                            create_public_threads=True,
                            read_message_history=True,
                            manage_messages=True,
                            manage_channels=True,
                            attach_files=True,
                        )
                    }

                    await channel_check.edit(overwrites=overwrites)
                    allowed_channel = ch
                    break

            player.text_channel = allowed_channel

            if not player.message and player.text_channel:
                try:
                    player.message = await player.text_channel.fetch_message(int(static_player['message_id']))
                except TypeError:
                    player.message = None
                except Exception:
                    traceback.print_exc()
                    if hasattr(player.text_channel, 'parent') and isinstance(player.text_channel.parent, disnake.ForumChannel) and str(
                            player.text_channel.id) == static_player['message_id']:
                        pass
                    elif player.static:
                        player.text_channel = None

        if not player.static and player.text_channel:

            if message_inter:
                player.message = message_inter
            elif modal_message_id:
                try:
                    player.message = await inter.channel.fetch_message(modal_message_id)
                except:
                    pass

            if not player.has_thread:
                player.message = None
            else:
                await self.thread_song_request(message_inter.thread, reopen=True, bot=bot)

        try:

            print(f"{inter.bot.user.name}#{inter.bot.user.discriminator} - Player create at guild: {inter.guild.name}")
        except AttributeError:
            print(f"Player create at guild: {inter.guild.name}")

        return player


    async def parse_song_request(self, message: disnake.Message, text_channel, data, *, response=None, attachment: disnake.Attachment=None, source=None):

        if not message.author.voice:
            raise GenericError("B·∫°n ph√†i v√†o m·ªôt k√™nh tho·∫°i ƒë·ªÉ y√™u c·∫ßu b√†i h√°t")

        can_connect(
            channel=message.author.voice.channel,
            guild=message.guild,
            check_other_bots_in_vc=data["check_other_bots_in_vc"],
            bot=self.bot
        )

        try:
            if message.guild.me.voice.channel != message.author.voice.channel:
                raise GenericError(
                    f"B·∫°n ph·∫£i tham gia k√™nh <#{message.guild.me.voice.channel.id}> ƒë·ªÉ y√™u c·∫ßu b√†i h√°t.")
        except AttributeError:
            pass

        tracks, node = await self.get_tracks(message.content, message.author, source=source)
        tracks = await self.check_player_queue(message.author, self.bot, message.guild.id, tracks)

        try:
            message_id = int(data['player_controller']['message_id'])
        except TypeError:
            message_id = None

        try:
            player = self.bot.music.players[message.guild.id]
            destroy_message = True
        except KeyError:
            destroy_message = False
            player = await self.create_player(inter=message, bot=self.bot, guild=message.guild, channel=text_channel,
                                              node=node, guild_data=data)

        if not player.message:
            try:
                cached_message = await text_channel.fetch_message(message_id)
            except:
                cached_message = await send_idle_embed(message, bot=self.bot, guild_data=data)
                data['player_controller']['message_id'] = str(cached_message.id)
                await self.bot.update_data(message.guild.id, data, db_name=DBModel.guilds)

            player.message = cached_message

        embed = disnake.Embed(color=self.bot.get_color(message.guild.me))

        try:
            components = [disnake.ui.Button(emoji="üéõÔ∏è", label="ƒêi ƒë·∫øn giao di·ªán ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i", url=player.message.jump_url)]
        except AttributeError:
            components = []

        if not isinstance(tracks, list):
            player.queue.extend(tracks.tracks)
            if (isinstance(message.channel, disnake.Thread) and
                    (not isinstance(message.channel.parent, disnake.ForumChannel) or
                     data['player_controller']['purge_mode'] != SongRequestPurgeMode.on_message)):
                embed.description = f"‚úã **‚†Ç Y√™u c·∫ßu b·ªüi:** {message.author.mention}\n" \
                                    f"üéº **‚†Ç C√°c b√†i h√°t:** `[{len(tracks.tracks)}]`"
                embed.set_thumbnail(url=tracks.tracks[0].thumb)
                embed.set_author(name="‚†Ç" + fix_characters(tracks.tracks[0].playlist_name, 35), url=message.content,
                                 icon_url=music_source_image(tracks.tracks[0].info["sourceName"]))

                try:
                    embed.description += f"\nüîä **‚†Ç K√™nh tho·∫°i** {message.author.voice.channel.mention}"
                except AttributeError:
                    pass

                try:
                    self.bot.pool.enqueue_playlist_embed_cooldown.get_bucket(message).update_rate_limit()
                except:
                    pass

                components.extend(
                    [
                        disnake.ui.Button(emoji="üíó", label="Y√™u th√≠ch", custom_id=PlayerControls.embed_add_fav),
                        disnake.ui.Button(emoji="<:add_music:588172015760965654>", label="Th√™m v√†o h√†ng ƒë·ª£i",custom_id=PlayerControls.embed_enqueue_playlist)
                    ]
                )

                if response:
                    await response.edit(content=None, embed=embed, components=components)
                else:
                    await message.reply(embed=embed, fail_if_not_exists=False, mention_author=False)

            elif data['player_controller']['purge_mode'] != SongRequestPurgeMode.on_message:

                txt = f"> üéº **‚†Ç** [`{fix_characters(tracks.tracks[0].playlist_name, 35)}`](<{message.content}>) `[{len(tracks.tracks)} B√†i h√°t]` {message.author.mention}"

                try:
                    txt += f" `|` {message.author.voice.channel.mention}"
                except AttributeError:
                    pass

                if response:
                    await response.edit(content=txt, embed=None, components=components)
                else:
                    await message.reply(txt, components=components, allowed_mentions=disnake.AllowedMentions(users=False, everyone=False, roles=False), fail_if_not_exists=False, mention_author=False)

            else:
                player.set_command_log(
                    text=f"{message.author.mention} ƒê√£ th√™m danh s√°ch ph√°t [`{fix_characters(tracks.data['playlistInfo']['name'], 20)}`]"
                         f"({tracks.tracks[0].playlist_url}) `({len(tracks.tracks)})`.",
                    emoji="üé∂"
                )
                if destroy_message:
                    await self.delete_message(message)

        else:
            track = tracks[0]

            if track.info.get("sourceName") == "http":

                if track.title == "Unknown title":
                    if attachment:
                        track.info["title"] = attachment.filename
                    else:
                        track.info["title"] = track.uri.split("/")[-1]
                    track.title = track.info["title"]

                track.uri = ""

            player.queue.append(track)
            if (isinstance(message.channel, disnake.Thread) and
                    (not isinstance(message.channel.parent, disnake.ForumChannel) or
                     data['player_controller']['purge_mode'] != SongRequestPurgeMode.on_message)):
                embed.description = f"üí† **‚†Ç Ng∆∞·ªùi t·∫£i l√™n:** `{track.author}`\n" \
                                    f"‚úã **‚†Ç Y√™u c·∫ßu b·ªüi:** {message.author.mention}\n" \
                                    f"‚è∞ **‚†Ç Th·ªùi l∆∞·ª£ng:** `{time_format(track.duration) if not track.is_stream else 'üî¥ Livestream'}`"

                try:
                    embed.description += f"\nüîä **‚†Ç K√™nh tho·∫°i:** {message.author.voice.channel.mention}"
                except AttributeError:
                    pass

                try:
                    self.bot.pool.enqueue_track_embed_cooldown.get_bucket(message).update_rate_limit()
                except:
                    pass

                components.extend(
                    [
                        disnake.ui.Button(emoji="üíó", label="Y√™u th√≠ch", custom_id=PlayerControls.embed_add_fav),
                        disnake.ui.Button(emoji="<:play:914841137938829402>", label="Ph√°t Ngay", custom_id=PlayerControls.embed_forceplay),
                        disnake.ui.Button(emoji="<:add_music:588172015760965654>", label="Th√™m v√†o h√†ng ƒë·ª£i",
                                          custom_id=PlayerControls.embed_enqueue_track)
                    ]
                )

                embed.set_thumbnail(url=track.thumb)
                embed.set_author(name=fix_characters(track.title, 35), url=track.uri or track.search_uri, icon_url=music_source_image(track.info["sourceName"]))
                if response:
                    await response.edit(content=None, embed=embed, components=components)
                else:
                    await message.reply(embed=embed, fail_if_not_exists=False, mention_author=False, components=components)

            elif data['player_controller']['purge_mode'] != SongRequestPurgeMode.on_message:

                txt = f"> üéµ **‚†Ç** [`{fix_characters(track.title, 35)}`](<{track.uri}>) `[{time_format(track.duration) if not track.is_stream else 'üî¥ Livestream'}]` {message.author.mention}"

                try:
                    txt += f" `|` {message.author.voice.channel.mention}"
                except AttributeError:
                    pass

                if response:
                    await response.edit(content=txt, embed=None, components=components)
                else:
                    await message.reply(txt, components=components, allowed_mentions=disnake.AllowedMentions(users=False, everyone=False, roles=False), fail_if_not_exists=False, mention_author=False)

            else:
                duration = time_format(tracks[0].duration) if not tracks[0].is_stream else 'üî¥ Livestream'
                player.set_command_log(
                    text=f"{message.author.mention} th√™m [`{fix_characters(tracks[0].title, 20)}`]({tracks[0].uri or tracks[0].search_uri}) `({duration})`.",
                    emoji="üéµ"
                )
                if destroy_message:
                    await self.delete_message(message, ignore=data['player_controller']['purge_mode'] != SongRequestPurgeMode.on_message)

        if not player.is_connected:
            await self.do_connect(
                message,
                channel=message.author.voice.channel,
                check_other_bots_in_vc=data["check_other_bots_in_vc"]
            )

        if not player.current:
            await player.process_next()
        else:
            await player.update_message()

        await asyncio.sleep(1)

    async def cog_check(self, ctx: CustomContext) -> bool:

        return await check_requester_channel(ctx)

    def cog_unload(self):
        try:
            self.error_report_task.cancel()
        except:
            pass


    async def interaction_message(self, inter: Union[disnake.Interaction, CustomContext], txt, emoji: str = "‚úÖ",
                                  rpc_update: bool = False, data: dict = None, store_embed: bool = False, force=False,
                                  defered=False, thumb=None):

        try:
            txt, txt_ephemeral = txt
        except:
            txt_ephemeral = False

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        component_interaction = isinstance(inter, disnake.MessageInteraction)

        ephemeral = await self.is_request_channel(inter, data=data)

        if ephemeral:
            player.set_command_log(text=f"{inter.author.mention} {txt}", emoji=emoji)
            player.update = True

        await player.update_message(interaction=inter if (bot.user.id == self.bot.user.id and component_interaction) \
            else False, rpc_update=rpc_update, force=force)

        if isinstance(inter, CustomContext):
            embed = disnake.Embed(color=self.bot.get_color(guild.me),
                                  description=f"{txt_ephemeral or txt}{player.controller_link}")

            if thumb:
                embed.set_thumbnail(url=thumb)

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"Th√¥ng qua: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            if store_embed and not player.controller_mode and len(player.queue) > 0:
                player.temp_embed = embed

            else:
                try:
                    await inter.store_message.edit(embed=embed, view=None, content=None)
                except AttributeError:
                    await inter.send(embed=embed)

        elif not component_interaction:

            embed = disnake.Embed(
                color=self.bot.get_color(guild.me),
                description=(txt_ephemeral or f"{inter.author.mention} **{txt}**") + player.controller_link
            )

            if thumb:
                embed.set_thumbnail(url=thumb)

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"Th√¥ng qua bot: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            if not inter.response.is_done():
                await inter.send(embed=embed, ephemeral=ephemeral)

            elif defered:
                await inter.edit_original_response(embed=embed)

    async def process_nodes(self, data: dict, start_local: bool = False):

        await self.bot.wait_until_ready()

        if str(self.bot.user.id) in self.bot.config["INTERACTION_BOTS_CONTROLLER"]:
            return

        for k, v in data.items():
            self.bot.loop.create_task(self.connect_node(v))

        if start_local:
            await self.connect_local_lavalink()

    @commands.Cog.listener("on_wavelink_node_connection_closed")
    async def node_connection_closed(self, node: wavelink.Node):

        retries = 0
        backoff = 7

        print(Fore.RED + f"‚ùå {self.bot.user} - [{node.identifier} / v{node.version}] Lost connection - reconnecting in {int(backoff)} seconds." + Style.RESET_ALL)

        for player in list(node.players.values()):

            try:
                player._new_node_task.cancel()
            except:
                pass

            player._new_node_task = player.bot.loop.create_task(player._wait_for_new_node())

        await asyncio.sleep(2)

        while True:

            if node.is_available:
                return

            if self.bot.config["LAVALINK_RECONNECT_RETRIES"] and retries == self.bot.config["LAVALINK_RECONNECT_RETRIES"]:
                print(f"‚ùå {self.bot.user} - [{node.identifier}] All attempts to reconnect failed...")
                return

            await self.bot.wait_until_ready()

            error = None

            try:
                async with self.bot.session.get(f"{node.rest_uri}/v4/info", timeout=45, headers=node.headers) as r:
                    if r.status == 200:
                        node.version = 4
                        node.info = await r.json()
                    elif r.status != 404:
                        raise Exception(f"{self.bot.user} - [{r.status}]: {await r.text()}"[:300])
                    else:
                        node.version = 3
                    await node.connect()
                    return
            except Exception as e:
                error = repr(e)

            backoff *= 1.5
            print(
                f'‚ùå {self.bot.user} - Failed to reconnect to server [{node.identifier}] retry {int(backoff)}'
                f' sec. Erro: {error}'[:300])
            await asyncio.sleep(backoff)
            retries += 1

    @commands.Cog.listener("on_wavelink_node_ready")
    async def node_ready(self, node: wavelink.Node):
        print("‚úÖ" + Fore.GREEN + f'{self.bot.user} - Music server: [{node.identifier} / v{node.version}] is ready to use!', Style.RESET_ALL)
        retries = 25
        while retries > 0:

            if not node._websocket.is_connected:
                return

            if not node.stats:
                await asyncio.sleep(5)
                retries -= 1
                continue

            if node.stats.uptime < 600000:
                node.open()
            return

    async def connect_node(self, data: dict):

        if data["identifier"] in self.bot.music.nodes:
            node = self.bot.music.nodes[data['identifier']]
            if not node.is_connected:
                await node.connect()
            return

        data = deepcopy(data)

        data['rest_uri'] = ("https" if data.get('secure') else "http") + f"://{data['host']}:{data['port']}"
        data['user_agent'] = self.bot.pool.current_useragent
        search = data.pop("search", True)
        node_website = data.pop('website', '')
        region = data.pop('region', 'us_central')
        heartbeat = int(data.pop('heartbeat', 30))
        search_providers = data.pop("search_providers", [self.bot.pool.config["DEFAULT_SEARCH_PROVIDER"]] + [s for s in ("ytsearch", "scsearch") if s != self.bot.pool.config["DEFAULT_SEARCH_PROVIDER"]])
        retry_403 = data.pop('retry_403', False)
        info = None

        try:
            max_retries = int(data.pop('retries'))
        except (TypeError, KeyError):
            max_retries = 0

        headers = {'Authorization': data['password']}

        if max_retries:

            backoff = 9
            retries = 1
            exception = None

            print(Fore.GREEN + f"üî∞ {self.bot.user} - The music server starts: {data['identifier']}", Style.RESET_ALL)

            while not self.bot.is_closed():
                if retries >= max_retries:
                    print(Fore.RED +
                        f"‚ùå {self.bot.user} - All attempts to connect to server [{data['identifier']}] failed.", Style.RESET_ALL)
                    return
                else:
                    await asyncio.sleep(backoff)
                    try:
                        async with self.bot.session.get(f"{data['rest_uri']}/v4/info", timeout=45, headers=headers) as r:
                            if r.status == 200:
                                info = await r.json()
                                data["version"] = 4
                            elif r.status != 404:
                                raise Exception(f"{self.bot.user} - [{r.status}]: {await r.text()}"[:300])
                            break
                    except Exception as e:
                        exception = e
                        if data["identifier"] != "LOCAL":
                            print(Fore.YELLOW + f'‚ùå {self.bot.user} - Failed to connect to server [{data["identifier"]}], '
                                   f'retry [{retries}/{max_retries}] in {backoff} seconds.', Style.RESET_ALL)
                        backoff += 2
                        retries += 1
                        continue

        else:
            try:
                async with self.bot.session.get(f"{data['rest_uri']}/v4/info", timeout=45, headers=headers) as r:
                    if r.status == 200:
                        data["version"] = 4
                        info = await r.json()
                    elif r.status != 404:
                        raise Exception(f"{self.bot.user} - [{r.status}]: {await r.text()}"[:300])
            except Exception as e:
                print(Fore.RED + f"‚ùå Failed to connect to the server {data['identifier']}", Style.RESET_ALL)
                return

        data["identifier"] = data["identifier"].replace(" ", "_")
        node = await self.bot.music.initiate_node(auto_reconnect=False, region=region, heartbeat=heartbeat, **data)
        node.info = info
        node.search = search
        node.website = node_website
        node.retry_403 = retry_403
        node.search_providers = search_providers

    async def get_tracks(
            self, query: str, user: disnake.Member, node: wavelink.Node = None,
            track_loops=0, use_cache=True, source=None, bot: BotCore = None):

        if not bot:
            bot = self.bot

        if not node:
            node = await self.get_best_node(bot)

        tracks = await process_spotify(self.bot, user.id, query)

        exceptions = set()

        if not tracks:

            if use_cache:
                try:
                    cached_tracks = self.bot.pool.playlist_cache[query]
                except KeyError:
                    pass
                else:

                    tracks = LavalinkPlaylist(
                        {
                            'loadType': 'PLAYLIST_LOADED',
                            'playlistInfo': {
                                'name': cached_tracks[0]["info"]["extra"]["playlist"]["name"],
                                'selectedTrack': -1
                            },
                            'tracks': cached_tracks
                        },
                        requester=user.id,
                        url=cached_tracks[0]["info"]["extra"]["playlist"]["url"]
                    )

            if not tracks:

                if node.search:
                    node_search = node
                else:
                    try:
                        node_search = \
                            sorted(
                                [n for n in bot.music.nodes.values() if n.search and n.available and n.is_available],
                                key=lambda n: len(n.players))[0]
                    except IndexError:
                        node_search = node

                if source is False:
                    providers = [node.search_providers[:1]]
                elif source:
                    providers = [s for s in (node.search_providers or [self.bot.config["DEFAULT_SEARCH_PROVIDER"]]) if s != source]
                    providers.insert(0, source)
                else:
                    source = True
                    providers = node.search_providers or [self.bot.config["DEFAULT_SEARCH_PROVIDER"]]

                for search_provider in providers:

                    search_query = f"{search_provider}:{query}" if source else query

                    try:
                        tracks = await node_search.get_tracks(
                            search_query, track_cls=LavalinkTrack, playlist_cls=LavalinkPlaylist, requester=user.id
                        )
                    except ClientConnectorCertificateError:
                        node_search.available = False

                        for n in self.bot.music.nodes.values():

                            if not n.available or not n.is_available:
                                continue

                            try:
                                tracks = await n.get_tracks(
                                    search_query, track_cls=LavalinkTrack, playlist_cls=LavalinkPlaylist, requester=user.id
                                )
                                node_search = n
                                break
                            except ClientConnectorCertificateError:
                                n.available = False
                                continue

                        if not node_search:
                            raise GenericError("**Kh√¥ng c√≥ m√°y ch·ªß √¢m nh·∫°c c√≥ s·∫µn.**")

                    except Exception as e:
                        print(f"X·∫£y ra s·ª± c·ªë trong l√∫c t√¨m ki·∫øm...\n{query}\n{traceback.format_exc()}")
                        exceptions.add(repr(e))

                    if tracks or not source:
                        break

        if not tracks:
            if exceptions:
                if "This playlist type is unviewable." in exceptions:
                    raise GenericError("**ƒê√£ x·∫£y ra s·ª± c·ªë khi t√¨m ki·∫øm k·∫øt qu·∫£ cho b√†i h√°t c·ªßa b·∫°n:**\n ```Danh s√°ch ph√°t n√†y kh√¥ng th·ªÉ xem ƒë∆∞·ª£c :<```")
                else:
                    raise GenericError("**ƒê√£ x·∫£y ra s·ª± c·ªë khi t√¨m ki·∫øm k·∫øt qu·∫£ cho b√†i h√°t c·ªßa b·∫°n**")
            raise GenericError("Kh√¥ng c√≥ k·∫øt qu·∫£ cho t√¨m ki·∫øm c·ªßa b·∫°n")

        if isinstance(tracks, list):
            tracks[0].info["extra"]["track_loops"] = track_loops

        else:

            if (selected := tracks.data['playlistInfo']['selectedTrack']) > 0:
                tracks.tracks = tracks.tracks[selected:] + tracks.tracks[:selected]

        return tracks, node

    async def connect_local_lavalink(self):

        if 'LOCAL' not in self.bot.music.nodes:

            localnode = {
                'host': '127.0.0.1',
                'port':  8090,
                'password': 'youshallnotpass',
                'identifier': 'LOCAL',
                'region': 'us_central',
                'retries': 120,
                'retry_403': True,
            }

            self.bot.loop.create_task(self.connect_node(localnode))

    @commands.Cog.listener("on_thread_create")
    async def thread_song_request(self, thread: disnake.Thread, reopen: bool = False, bot: BotCore = None):

        if not bot:
            bot=self.bot

        try:
            player: LavalinkPlayer = bot.music.players[thread.guild.id]
        except KeyError:
            return

        if player.static or player.message.id != thread.id:
            return

        if not thread.parent.permissions_for(thread.guild.me).send_messages_in_threads:
            await player.text_channel.send(
                embed=disnake.Embed(
                    color=self.bot.get_color(thread.guild.me),
                    description="**T√¥i kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn trong c√°c cu·ªôc tr√≤ chuy·ªán tr√™n k√™nh hi·ªán t·∫°i ƒë·ªÉ k√≠ch ho·∫°t"
                                 "h·ªá th·ªëng y√™u c·∫ßu b√†i h√°t...**\n\n"
                                 f"C√°c tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i trong chu·ªói {thread.mention} s·∫Ω b·ªã b·ªè qua."
                ), delete_after=30
            )
            return

        embed = disnake.Embed(color=bot.get_color(thread.guild.me))

        if not self.bot.intents.message_content:
            embed.description = "**ƒê·ªÉ √Ω! T√¥i kh√¥ng c√≥ m·ª•c ƒë√≠ch message_content ƒë∆∞·ª£c nh√† ph√°t tri·ªÉn c·ªßa t√¥i k√≠ch ho·∫°t...\n" \
                                 "Ch·ª©c nƒÉng y√™u c·∫ßu √¢m nh·∫°c ·ªü ƒë√¢y c√≥ th·ªÉ kh√¥ng mang l·∫°i k·∫øt qu·∫£ nh∆∞ mong ƒë·ª£i...**"

        elif not player.controller_mode:
            embed.description = "**Giao di·ªán/giao di·ªán hi·ªán t·∫°i kh√¥ng t∆∞∆°ng th√≠ch v·ªõi h·ªá th·ªëng y√™u c·∫ßu b√†i h√°t " \
                                "qua ch·ªß ƒë·ªÅ/cu·ªôc tr√≤ chuy·ªán\n\n" \
                                "L∆∞u √Ω:** `H·ªá th·ªëng n√†y y√™u c·∫ßu giao di·ªán s·ª≠ d·ª•ng c√°c n√∫t.`"

        else:
            if reopen:
                embed.description = "**Ph·∫ßn y√™u c·∫ßu b√†i h√°t trong ch·ªß ƒë·ªÅ n√†y ƒë√£ ƒë∆∞·ª£c m·ªü l·∫°i trong ch·ªß ƒë·ªÅ hi·ªán t·∫°i.**"
            else:
                embed.description = "**Cu·ªôc tr√≤ chuy·ªán n√†y s·∫Ω t·∫°m th·ªùi ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ y√™u c·∫ßu b√†i h√°t.**\n\n" \
                                     "**Y√™u c·∫ßu b√†i h√°t c·ªßa b·∫°n t·∫°i ƒë√¢y b·∫±ng c√°ch g·ª≠i t√™n b√†i h√°t ho·∫∑c li√™n k·∫øt b√†i h√°t/video" \
                                     "ƒë√≥ l√† t·ª´ m·ªôt trong nh·ªØng n·ªÅn t·∫£ng ƒë∆∞·ª£c h·ªó tr·ª£ sau:** " \
                                    "```ansi\n[31;1mYoutube[0m, [33;1mSoundcloud[0m, [32;1mSpotify[0m, [34;1mTwitch[0m```"

        await thread.send(embed=embed)

    @commands.Cog.listener("on_voice_state_update")
    async def player_vc_disconnect(
            self,
            member: disnake.Member,
            before: disnake.VoiceState,
            after: disnake.VoiceState
    ):
        try:
            player: LavalinkPlayer = self.bot.music.players[member.guild.id]
        except KeyError:
            return

        if member.bot:
          
            if player.bot.user.id == member.id and not after.channel and not player.is_closing:

                last_channel_id = int(player.last_channel.id)

                await asyncio.sleep(3)

                vc = self.bot.get_channel(last_channel_id)

                if not vc:

                    msg = "K√™nh tho·∫°i ƒë√£ b·ªã x√≥a..."

                    if player.static:
                        player.set_command_log(msg)
                        await player.playerdestroy()

                    else:
                        embed = disnake.Embed(
                            description=msg,
                            color=self.bot.get_color(member))
                        try:
                            self.bot.loop.create_task(player.text_channel.send(embed=embed, delete_after=7))
                        except:
                            traceback.print_exc()
                        await player.playerdestroy()

                else:
                    while True:

                        try:
                            player = self.bot.music.players[member.guild.id]
                        except KeyError:
                            return

                        if player.guild.me.voice:
                            if isinstance(before.channel, disnake.StageChannel) \
                                    and member not in before.channel.speakers \
                                    and before.channel.permissions_for(member).manage_permissions:
                                try:
                                    await member.guild.me.edit(suppress=False)
                                except Exception:
                                    traceback.print_exc()
                            return

                        if player.is_closing:
                            return

                        if not player._new_node_task:

                            try:
                                can_connect(before.channel, player.guild, bot=player.bot)
                            except Exception as e:
                                player.set_command_log(f"Tr√¨nh ph√°t ƒë√£ b·ªã t·∫Øt v√¨ ƒë√£ x·∫£y ra l·ªói: {e}")
                                await player.playerdestroy()
                                return

                            try:
                                await player.connect(vc.id)
                                player.set_command_log(text="Tui th·∫•y b·∫°n ƒëang c·ªë ng·∫Øt k·∫øt n·ªëi tui kh·ªèi k√™nh. "
                                                            "H√£y ng·∫Øt k·∫øt n·ªëi tui kh·ªèi k√™nh b·∫±ng l·ªánh/n√∫t: **stop**.",
                                                       emoji="‚ö†Ô∏è")
                                player.update = True
                                await asyncio.sleep(5)
                                continue
                            except Exception:
                                traceback.print_exc()

                        await asyncio.sleep(30)
            return

        if before.channel == after.channel:
            try:
                vc = player.guild.me.voice.channel
            except AttributeError:
                pass
            else:
                try:
                    player.members_timeout_task.cancel()
                except:
                    pass
                try:
                    check = (m for m in vc.members if not m.bot and not (m.voice.deaf or m.voice.self_deaf))
                except:
                    check = None
                player.members_timeout_task = player.bot.loop.create_task(player.members_timeout(check=bool(check)))
            return

        try:
            player.members_timeout_task.cancel()
            player.members_timeout_task = None
        except AttributeError:
            pass

        if member.id == player.bot.user.id:

            for b in self.bot.pool.bots:
                if b == player.bot:
                    continue
                try:
                    try:
                        after.channel.voice_states[b.user.id]
                    except KeyError:
                        continue
                    if before.channel.permissions_for(member.guild.me).connect:
                        await asyncio.sleep(1)
                        await player.guild.voice_client.move_to(before.channel)
                    else:
                        player.set_command_log(text="Tr√¨nh ph√°t ƒë√£ b·ªã t·∫Øt v√¨ b·∫°n ƒë√£ chuy·ªÉn t√¥i sang k√™nh "
                                                     f"{after.channel.mention} trong ƒë√≥ bot {b.user.mention} "
                                                     "n√≥ c≈©ng ƒë∆∞·ª£c k·∫øt n·ªëi t·∫°o ra s·ª± kh√¥ng t∆∞∆°ng th√≠ch v·ªõi "
                                                     "h·ªá th·ªëng ƒëa gi·ªçng n√≥i c·ªßa t√¥i.", emoji="‚ö†Ô∏è")
                        await player.playerdestroy()
                    return
                except AttributeError:
                    pass
                except Exception:
                    traceback.print_exc()

            if member.guild.voice_client and after.channel:
                player.guild.voice_client.channel = after.channel
                player.last_channel = after.channel

        try:
            check = [m for m in player.guild.me.voice.channel.members if not m.bot and not (m.voice.deaf or m.voice.self_deaf)]
        except:
            check = None

        if player.stage_title_event and member.bot and not player.is_closing:

            try:
                if isinstance(before.channel, disnake.StageChannel):

                    if before.channel.instance and member not in before.channel.members:
                        try:
                            await before.channel.instance.edit(topic="T·ª± ƒë·ªông c·∫≠p nh·∫≠t b·ªã v√¥ hi·ªáu :<")
                        except:
                            traceback.print_exc()
                        player.stage_title_event = False

                else:
                    if isinstance(before.channel, disnake.VoiceChannel) and member not in before.channel.members:
                        player.stage_title_event = False
                        if player.last_stage_title:
                            self.bot.loop.create_task(player.bot.edit_voice_channel_status(status=None, channel_id=before.channel.id))
            except Exception:
                traceback.print_exc()

        if member.bot and isinstance(after.channel, disnake.StageChannel) and after.channel.permissions_for(member).manage_permissions:
            await asyncio.sleep(1.5)
            if member not in after.channel.speakers:
                try:
                    await member.guild.me.edit(suppress=False)
                except Exception:
                    traceback.print_exc()


        if check:
            try:
                player.auto_skip_track_task.cancel()
            except AttributeError:
                pass
            player.auto_skip_track_task = None

        player.members_timeout_task = player.bot.loop.create_task(player.members_timeout(check=bool(check)))
        
        if not member.guild.me.voice:
            await asyncio.sleep(1)
            if not player.is_closing and not player._new_node_task:
                try:
                    await player.playerdestroy(force=True)
                except Exception:
                    traceback.print_exc()

        if player.auto_pause:
            return

        if player.is_closing or (member.bot and not before.channel):
            return

        channels = set()

        try:
            channels.add(before.channel.id)
        except:
            pass

        try:
            channels.add(after.channel.id)
        except:
            pass

        try:
            try:
                vc = player.guild.me.voice.channel
            except AttributeError:
                vc = player.last_channel

            if vc.id not in channels:
                return
        except AttributeError:
            pass

        if not after or before.channel != after.channel:

            try:
                vc = player.guild.me.voice.channel
            except AttributeError:
                vc = before.channel

            if vc:

                try:
                    await player.process_rpc(vc, users=[member.id], close=not player.guild.me.voice or after.channel != player.guild.me.voice.channel, wait=True)
                except AttributeError:
                    traceback.print_exc()
                    pass

                await player.process_rpc(vc, users=[m for m in vc.voice_states if (m != member.id)])

    async def reset_controller_db(self, guild_id: int, data: dict, inter: disnake.AppCmdInter = None):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        data['player_controller']['channel'] = None
        data['player_controller']['message_id'] = None

        try:
            player: LavalinkPlayer = bot.music.players[guild_id]
        except KeyError:
            return

        player.static = False

        try:
            if isinstance(inter.channel.parent, disnake.TextChannel):
                player.text_channel = inter.channel.parent
            else:
                player.text_channel = inter.channel
        except AttributeError:
            player.text_channel = inter.channel

        try:
            await bot.update_data(guild_id, data, db_name=DBModel.guilds)
        except Exception:
            traceback.print_exc()

    async def get_best_node(self, bot: BotCore = None):

        if not bot:
            bot = self.bot

        try:
            return sorted(
                [n for n in bot.music.nodes.values() if n.stats and n.is_available and n.available],
                key=lambda n: n.stats.players
            )[0]

        except IndexError:
            try:
                node = bot.music.nodes['LOCAL']
            except KeyError:
                pass
            else:
                if not node._websocket.is_connected:
                    await node.connect()
                return node

            raise GenericError("**Kh√¥ng c√≥ m√°y ch·ªß √¢m nh·∫°c.**")

    async def error_report_loop(self):

        while True:

            data = await self.error_report_queue.get()

            async with aiohttp.ClientSession() as session:
                webhook = disnake.Webhook.from_url(self.bot.config["AUTO_ERROR_REPORT_WEBHOOK"], session=session)
                await webhook.send(username=self.bot.user.display_name + "Music Error log", avatar_url=self.bot.user.display_avatar.url, **data)

            await asyncio.sleep(15)


def setup(bot: BotCore):

    if bot.config["USE_YTDL"] and not hasattr(bot.pool, 'ytdl'):

        from yt_dlp import YoutubeDL

        bot.pool.ytdl = YoutubeDL(
            {
                'extract_flat': True,
                'quiet': True,
                'no_warnings': True,
                'lazy_playlist': True,
                'simulate': True,
                'cachedir': "./.ytdl_cache",
                'allowed_extractors': [
                    r'.*youtube.*',
                    r'.*soundcloud.*',
                ],
                'extractor_args': {
                    'youtube': {
                        'skip': [
                            'hls',
                            'dash',
                            'translated_subs'
                        ],
                        'player_skip': [
                            'js',
                            'configs',
                            'webpage'
                        ],
                        'player_client': ['android_creator'],
                        'max_comments': [0],
                    },
                    'youtubetab': {
                        "skip": ["webpage"]
                    }
                }
            }
        )

    bot.add_cog(Music(bot))
