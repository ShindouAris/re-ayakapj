# -*- coding: utf-8 -*-
from __future__ import annotations

import asyncio
import json
import pickle
import re
import traceback
from base64 import b64decode, b64encode
from copy import deepcopy
from io import BytesIO
from typing import List, Union, Optional, TYPE_CHECKING, Literal

import disnake
from disnake.ext import commands

from utils.db import DBModel
from utils.music.checks import check_pool_bots
from utils.music.converters import time_format, fix_characters, URL_REG
from utils.music.errors import GenericError
from utils.music.models import LavalinkPlayer
from utils.music.skin_utils import skin_converter
from utils.music.spotify import spotify_regex_w_user
from utils.others import check_cmd, CustomContext, send_idle_embed, music_source_emoji_url, \
    music_source_emoji_id, PlayerControls, get_source_emoji_cfg

if TYPE_CHECKING:
    from utils.client import BotCore


class VolumeInteraction(disnake.ui.View):

    def __init__(self, inter):
        self.inter = inter
        self.volume = None
        super().__init__(timeout=30)
        self.process_buttons()

    def process_buttons(self):

        opts = []

        for l in [5, 20, 40, 60, 80, 100, 120, 150]:

            if l > 100:
                description = "√Çm l∆∞·ª£ng qu√° 100% c√≥ th·ªÉ nghe r·∫•t b·∫•t th∆∞·ªùng."
            else:
                description = None
            opts.append(disnake.SelectOption(label=f"{l}%", value=f"vol_{l}", description=description))

        select = disnake.ui.Select(placeholder='√Çm l∆∞·ª£ng:', options=opts)
        select.callback = self.callback
        self.add_item(select)

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.edit_message(content=f"√Çm l∆∞·ª£ng ƒë√£ thay ƒë·ªïi!",embed=None, view=None)
        self.volume = int(interaction.data.values[0][4:])
        self.stop()


class QueueInteraction(disnake.ui.View):

    def __init__(self, player, user: disnake.Member, timeout=60):

        self.player = player
        self.bot = player.bot
        self.user = user
        self.pages = []
        self.select_pages = []
        self.current = 0
        self.max_page = len(self.pages) - 1
        self.message: Optional[disnake.Message] = None
        super().__init__(timeout=timeout)
        self.embed = disnake.Embed(color=self.bot.get_color(user.guild.me))
        self.update_pages()
        self.update_embed()

    def update_pages(self):

        counter = 1

        self.pages = list(disnake.utils.as_chunks(self.player.queue, max_size=12))
        self.select_pages.clear()

        self.clear_items()

        for n, page in enumerate(self.pages):

            txt = "\n"
            opts = []

            for t in page:

                duration = time_format(t.duration) if not t.is_stream else 'üî¥ Livestream'

                txt += f"`‚îå {counter})` [`{fix_characters(t.title, limit=50)}`]({t.uri})\n" \
                       f"`‚îî ‚è≤Ô∏è {duration}`" + (f" - `L·∫∑p l·∫°i: {t.track_loops}`" if t.track_loops else  "") + \
                       f" **|** `‚úã` <@{t.requester}>\n"

                opts.append(
                    disnake.SelectOption(
                        label=f"{counter}. {t.author}"[:25], description=f"[{duration}] | {t.title}"[:50],
                        value=f"queue_select_{t.unique_id}",
                    )
                )

                counter += 1

            self.pages[n] = txt
            self.select_pages.append(opts)

        track_select = disnake.ui.Select(
            placeholder="Ph√°t m·ªôt b√†i h√°t c·ª• th·ªÉ tr√™n trang:",
            options=self.select_pages[self.current],
            custom_id="queue_track_selection",
            max_values=1
        )

        track_select.callback = self.track_select_callback

        self.add_item(track_select)

        first = disnake.ui.Button(emoji='‚èÆÔ∏è', style=disnake.ButtonStyle.grey)
        first.callback = self.first
        self.add_item(first)

        back = disnake.ui.Button(emoji='‚¨ÖÔ∏è', style=disnake.ButtonStyle.grey)
        back.callback = self.back
        self.add_item(back)

        next = disnake.ui.Button(emoji='‚û°Ô∏è', style=disnake.ButtonStyle.grey)
        next.callback = self.next
        self.add_item(next)

        last = disnake.ui.Button(emoji='‚è≠Ô∏è', style=disnake.ButtonStyle.grey)
        last.callback = self.last
        self.add_item(last)

        stop_interaction = disnake.ui.Button(emoji='‚èπÔ∏è', style=disnake.ButtonStyle.grey)
        stop_interaction.callback = self.stop_interaction
        self.add_item(stop_interaction)

        update_q = disnake.ui.Button(emoji='üîÑ', label="L√†m m·ªõi", style=disnake.ButtonStyle.grey)
        update_q.callback = self.update_q
        self.add_item(update_q)

        self.current = 0
        self.max_page = len(self.pages) - 1

    async def on_timeout(self) -> None:

        if not self.message:
            return

        embed = self.message.embeds[0]
        embed.set_footer(text="ƒê√£ h·∫øt th·ªùi gian t∆∞∆°ng t√°c!")

        for c in self.children:
            c.disabled = True

        await self.message.edit(embed=embed, view=self)


    def update_embed(self):
        self.embed.title = f"**C√°c b√†i h√°t trong h√†ng [{self.current+1} / {self.max_page+1}]**"
        self.embed.description = self.pages[self.current]
        self.children[0].options = self.select_pages[self.current]

        for n, c in enumerate(self.children):
            if isinstance(c, disnake.ui.StringSelect):
                self.children[n].options = self.select_pages[self.current]

    async def track_select_callback(self, interaction: disnake.MessageInteraction):

        track_id = interaction.values[0][13:]

        track = None

        for t in  self.player.queue:
            if t.unique_id == track_id:
                track = t
                break

        if not track:
            await interaction.send(f"Kh√¥ng t√¨m th·∫•y b√†i h√°t c√≥ id \"{track_id}\" trong h√†ng ƒë·ª£i ng∆∞·ªùi ch∆°i...", ephemeral=True)
            return

        command = self.bot.get_slash_command("skip")

        interaction.music_bot = self.bot
        interaction.music_guild = self.user.guild

        try:
            await check_cmd(command, interaction)
            await command(interaction, query=f"{track.title} || ID > {track.unique_id}")
            self.stop()
        except Exception as e:
            self.bot.dispatch('interaction_player_error', interaction, e)

    async def first(self, interaction: disnake.MessageInteraction):

        self.current = 0
        self.update_embed()
        await interaction.response.edit_message(embed=self.embed, view=self)

    async def back(self, interaction: disnake.MessageInteraction):

        if self.current == 0:
            self.current = self.max_page
        else:
            self.current -= 1
        self.update_embed()
        await interaction.response.edit_message(embed=self.embed, view=self)

    async def next(self, interaction: disnake.MessageInteraction):

        if self.current == self.max_page:
            self.current = 0
        else:
            self.current += 1
        self.update_embed()
        await interaction.response.edit_message(embed=self.embed, view=self)

    async def last(self, interaction: disnake.MessageInteraction):

        self.current = self.max_page
        self.update_embed()
        await interaction.response.edit_message(embed=self.embed, view=self)


    async def stop_interaction(self, interaction: disnake.MessageInteraction):

        await interaction.response.edit_message(content="ƒê√≥ng", embed=None, view=None)
        self.stop()

    async def update_q(self, interaction: disnake.MessageInteraction):

        self.current = 0
        self.max_page = len(self.pages) - 1
        self.update_pages()
        self.update_embed()
        await interaction.response.edit_message(embed=self.embed, view=self)


class SelectInteraction(disnake.ui.View):

    def __init__(self, user: disnake.Member, opts: List[disnake.SelectOption], *, timeout=180):
        super().__init__(timeout=timeout)
        self.user = user
        self.selected = None
        self.item_pages = list(disnake.utils.as_chunks(opts, 25))
        self.current_page = 0
        self.max_page = len(self.item_pages)-1
        self.inter = None

        self.load_components()

    def load_components(self):

        self.clear_items()

        select_menu = disnake.ui.Select(placeholder='Ch·ªçn m·ªôt t√πy ch·ªçn:', options=self.item_pages[self.current_page])
        select_menu.callback = self.callback
        self.add_item(select_menu)
        self.selected = self.item_pages[self.current_page][0].value

        if len(self.item_pages) > 1:

            back_button = disnake.ui.Button(emoji="‚¨Ö")
            back_button.callback = self.back_callback
            self.add_item(back_button)

            next_button = disnake.ui.Button(emoji="‚û°")
            next_button.callback = self.next_callback
            self.add_item(next_button)

        button = disnake.ui.Button(label="H·ªßy b·ªè", emoji="‚ùå")
        button.callback = self.cancel_callback
        self.add_item(button)

    async def interaction_check(self, interaction: disnake.MessageInteraction) -> bool:

        if interaction.user.id == self.user.id:
            return True

        await interaction.send(f"Ch·ªâ {self.user.mention} m·ªõi c√≥ th·ªÉ t∆∞∆°ng t√°c ·ªü ƒë√¢y.", ephemeral = True)

    async def back_callback(self, interaction: disnake.MessageInteraction):
        if self.current_page == 0:
            self.current_page = self.max_page
        else:
            self.current_page -= 1
        self.load_components()
        await interaction.response.edit_message(view=self)

    async def next_callback(self, interaction: disnake.MessageInteraction):
        if self.current_page == self.max_page:
            self.current_page = 0
        else:
            self.current_page += 1
        self.load_components()
        await interaction.response.edit_message(view=self)

    async def cancel_callback(self, interaction: disnake.MessageInteraction):
        self.selected = False
        self.inter = interaction
        self.stop()

    async def callback(self, interaction: disnake.MessageInteraction):
        self.selected = interaction.data.values[0]
        self.inter = interaction
        self.stop()


class AskView(disnake.ui.View):

    def __init__(self, *, ctx: Union[commands.Context, disnake.Interaction], timeout=None):
        super().__init__(timeout=timeout)
        self.selected = None
        self.ctx = ctx
        self.interaction_resp: Optional[disnake.MessageInteraction] = None

    async def interaction_check(self, interaction: disnake.MessageInteraction) -> bool:

        if interaction.user != self.ctx.author:
            await interaction.send("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
            return False

        return True

    @disnake.ui.button(label="C√≥", emoji="‚úÖ")
    async def allow(self, button, interaction: disnake.MessageInteraction):
        self.selected = True
        self.interaction_resp = interaction
        self.stop()

    @disnake.ui.button(label="Kh√¥ng", emoji="‚ùå")
    async def deny(self, button, interaction: disnake.MessageInteraction):
        self.selected = False
        self.interaction_resp = interaction
        self.stop()

youtube_regex = r"https?://www\.youtube\.com/(?:channel/|@)[^/]+"
soundcloud_regex = r"^(?:https?:\/\/)?(?:www\.)?soundcloud\.com\/([a-zA-Z0-9_-]+)"

async def process_idle_embed(bot: BotCore, guild: disnake.Guild, guild_data: dict):

    try:
        bot.music.players[guild.id]
        return
    except KeyError:
        pass

    try:
        channel = bot.get_channel(int(guild_data["player_controller"]["channel"]))
    except:
        return

    try:
        message = await channel.fetch_message(int(guild_data["player_controller"]["message_id"]))
    except:
        message = None

    await send_idle_embed(message or channel, bot=bot, guild_data=guild_data)

class ViewMode:
    fav_manager = "0"
    guild_fav_manager = "1"
    integrations_manager = "2"

class FavModalImport(disnake.ui.Modal):

    def __init__(self, view):

        self.view = view

        if self.view.mode == ViewMode.fav_manager:
            super().__init__(
                title="Nh·∫≠p m·ª•c y√™u th√≠ch",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="Ch√®n d·ªØ li·ªáu (·ªü ƒë·ªãnh d·∫°ng json)",
                        custom_id="json_data",
                        min_length=20,
                        required=True
                    )
                ]
            )
            return

        if self.view.mode == ViewMode.guild_fav_manager:
            super().__init__(
                title="Nh·∫≠p danh s√°ch ph√°t v√†o ho·∫∑c m√°y ch·ªß",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="Ch√®n d·ªØ li·ªáu (·ªü ƒë·ªãnh d·∫°ng json)",
                        custom_id="json_data",
                        min_length=20,
                        required=True
                    )
                ]
            )
            return

        if self.view.mode == ViewMode.integrations_manager:
            super().__init__(
                title="T√≠ch h·ª£p nh·∫≠p",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="Ch√®n d·ªØ li·ªáu (·ªü ƒë·ªãnh d·∫°ng json)",
                        custom_id="json_data",
                        min_length=20,
                        required=True
                    )
                ]
            )
            return

        raise GenericError(f"Ch·∫ø ƒë·ªô hi·ªán t·∫°i ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai: {self.view.mode}")

    async def callback(self, inter: disnake.ModalInteraction, /) -> None:

        try:
            json_data = json.loads(inter.text_values["json_data"])
        except Exception as e:
            await inter.send("**ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá/kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ƒë√£ ƒë∆∞·ª£c g·ª≠i "
                                f" ·ªü ƒë·ªãnh d·∫°ng json.**\n\n`{repr(e)}`", ephemeral=True)
            return

        if self.view.mode == ViewMode.fav_manager:

            if retry_after := self.view.bot.get_cog("Music").fav_import_export_cd.get_bucket(inter).update_rate_limit():
                if retry_after < 1:
                    retry_after = 1
                await inter.send("***B·∫°n ph·∫£i ƒë·ª£i {} ƒë·ªÉ nh·∫≠p.**".format(
                    time_format(int(retry_after) * 1000, use_names=True)), ephemeral=True)
                return

            for name, url in json_data.items():

                if "> fav:" in name.lower():
                    continue

                if len(url) > (max_url_chars := self.view.bot.config["USER_FAV_MAX_URL_LENGTH"]):
                    await inter.send(
                        f"**M·ªôt m·ª•c trong t·ªáp {url} c·ªßa b·∫°n v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng k√Ω t·ª± ƒë∆∞·ª£c ph√©p:{max_url_chars}**",
                        ephemeral=True)
                    return

                if not isinstance(url, str) or not URL_REG.match(url):
                    await inter.send(f"T·ªáp c·ªßa b·∫°n ch·ª©a li√™n k·∫øt kh√¥ng h·ª£p l·ªá: ```ldif\n{url}```", ephemeral=True)
                    return

            await inter.response.defer(ephemeral=True)

            self.view.data = await self.view.bot.get_global_data(inter.author.id, db_name=DBModel.users)

            for name in json_data.keys():
                if len(name) > (max_name_chars := self.view.bot.config["USER_FAV_MAX_NAME_LENGTH"]):
                    await inter.edit_original_message(
                        f"**M·ªôt m·ª•c trong t·ªáp c·ªßa b·∫°n ({name}) v∆∞·ª£t qu√° s·ªë k√Ω t·ª± cho ph√©p:{max_name_chars}**")
                    return
                try:
                    del self.view.data["fav_links"][name.lower()]
                except KeyError:
                    continue

            if self.view.bot.config["MAX_USER_FAVS"] > 0 and not (await self.view.bot.is_owner(inter.author)):

                if (json_size := len(json_data)) > self.view.bot.config["MAX_USER_FAVS"]:
                    await inter.edit_original_message(f"S·ªë l∆∞·ª£ng m·ª•c trong t·ªáp y√™u th√≠ch c·ªßa b·∫°n v∆∞·ª£t qu√° "
                                                       f"s·ªë l∆∞·ª£ng t·ªëi ƒëa cho ph√©p ({self.view.bot.config['MAX_USER_FAVS']}).")
                    return

                if (json_size + (user_favs := len(self.view.data["fav_links"]))) > self.view.bot.config[
                    "MAX_USER_FAVS"]:
                    await inter.edit_original_message(
                        "B·∫°n kh√¥ng c√≥ ƒë·ªß dung l∆∞·ª£ng ƒë·ªÉ th√™m t·∫•t c·∫£ d·∫•u trang v√†o t·ªáp c·ªßa m√¨nh...\n"
                         f"Gi·ªõi h·∫°n hi·ªán t·∫°i: {self.view.bot.config['MAX_USER_FAVS']}\n"
                         f"S·ªë m·ª•c y√™u th√≠ch ƒë√£ l∆∞u: {user_favs}\n"
                         f"B·∫°n c√≤n: {(json_size + user_favs) - self.view.bot.config['MAX_USER_FAVS']}")
                    return

            self.view.data["fav_links"].update(json_data)

            await self.view.bot.update_global_data(inter.author.id, self.view.data, db_name=DBModel.users)

            await inter.edit_original_message(content="** M·ª•c y√™u th√≠ch ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng!**")

            if (s := len(json_data)) > 1:
                self.view.log = f"{s} M·ª•c y√™u th√≠ch ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng."
            else:
                name = next(iter(json_data))
                self.view.log = f"O favorito [`{name}`]({json_data[name]}) foi importado com sucesso."


        elif self.view.mode == ViewMode.guild_fav_manager:

            if retry_after := self.view.bot.get_cog("Music").fav_import_export_cd.get_bucket(inter).update_rate_limit():
                if retry_after < 1:
                    retry_after = 1
                await inter.send("***B·∫°n ph·∫£i ƒë·ª£i {} ƒë·ªÉ nh·∫≠p.**".format(
                    time_format(int(retry_after) * 1000, use_names=True)), ephemeral=True)
                return

            for name, data in json_data.items():

                if "> fav:" in name.lower():
                    continue

                if len(data['url']) > (max_url_chars := self.view.bot.config["USER_FAV_MAX_URL_LENGTH"]):
                    await inter.send(
                        f"**M·ªôt m·ª•c trong t·ªáp c·ªßa b·∫°n v∆∞·ª£t qu√° s·ªë k√Ω t·ª± cho ph√©p:{max_url_chars}\nURL:** {data['url']}",
                        ephemeral=True)
                    return

                if len(data['description']) > 50:
                    await inter.send(
                        f"**M·ªôt m·ª•c trong t·ªáp c·ªßa b·∫°n v∆∞·ª£t qu√° s·ªë k√Ω t·ª± cho ph√©p:{max_url_chars}\nM√¥ t·∫£:** {data['description']}",
                        ephemeral=True)
                    return

                if not isinstance(data['url'], str) or not URL_REG.match(data['url']):
                    await inter.send(f"T·ªáp c·ªßa b·∫°n ch·ª©a li√™n k·∫øt kh√¥ng h·ª£p l·ªá: ```ldif\n{data['url']}```", ephemeral=True)
                    return

            await inter.response.defer(ephemeral=True)

            self.view.guild_data = await self.view.bot.get_data(inter.guild_id, db_name=DBModel.guilds)

            if not self.view.guild_data["player_controller"]["channel"] or not self.view.bot.get_channel(
                    int(self.view.guild_data["player_controller"]["channel"])):
                await inter.edit_original_message("**Kh√¥ng c√≥ ng∆∞·ªùi ch∆°i n√†o ƒë∆∞·ª£c c·∫•u h√¨nh tr√™n m√°y ch·ªß! S·ª≠ d·ª•ng l·ªánh /setup**")
                return

            for name in json_data.keys():
                if len(name) > (max_name_chars := 25):
                    await inter.edit_original_message(
                        f"**M·ªôt m·ª•c trong t·ªáp c·ªßa b·∫°n ({name}) v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng k√Ω t·ª± ƒë∆∞·ª£c ph√©p:{max_name_chars}**")
                    return
                try:
                    del self.view.guild_data["player_controller"]["fav_links"][name]
                except KeyError:
                    continue

            if (json_size := len(json_data)) > 25:
                await inter.edit_original_message(
                    f"S·ªë l∆∞·ª£ng m·ª•c trong kho l∆∞u tr·ªØ v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªëi ƒëa cho ph√©p (25).")
                return

            if (json_size + (user_favs := len(self.view.guild_data["player_controller"]["fav_links"]))) > 25:
                await inter.edit_original_message(
                    "Danh s√°ch nh·∫°c/danh s√°ch ph√°t c·ªßa m√°y ch·ªß kh√¥ng c√≥ ƒë·ªß dung l∆∞·ª£ng ƒë·ªÉ th√™m t·∫•t c·∫£ c√°c m·ª•c v√†o t·ªáp c·ªßa b·∫°n...\n"
                     f"Gi·ªõi h·∫°n hi·ªán t·∫°i: 25\n"
                     f"S·ªë l∆∞·ª£ng li√™n k·∫øt ƒë√£ l∆∞u: {user_favs}\n"
                     f"B·∫°n c√≤n: {(json_size + user_favs) - 25}")
                return

            self.view.guild_data["player_controller"]["fav_links"].update(json_data)

            await self.view.bot.update_data(inter.guild_id, self.view.guild_data, db_name=DBModel.guilds)

            guild = self.view.bot.get_guild(inter.guild_id)

            await inter.edit_original_message(content="**Li√™n k·∫øt m√°y ch·ªß c·ªë ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng!**")

            if (s := len(json_data)) > 1:
                self.view.log = f"{s} links foram importados com sucesso para a lista de favoritos do servidor."
            else:
                name = next(iter(json_data))
                self.view.log = f"Li√™n k·∫øt [`{name}`]({json_data[name]}) ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng v√†o danh s√°ch li√™n k·∫øt c·ªßa m√°y ch·ªß.."

            await process_idle_embed(self.view.bot, guild, guild_data=self.view.guild_data)

        elif self.view.mode == ViewMode.integrations_manager:

            if retry_after := self.view.bot.get_cog("Music").fav_import_export_cd.get_bucket(inter).update_rate_limit():
                if retry_after < 1:
                    retry_after = 1
                await inter.send("***B·∫°n ph·∫£i ƒë·ª£i {} ƒë·ªÉ nh·∫≠p.**".format(
                    time_format(int(retry_after) * 1000, use_names=True)), ephemeral=True)
                return

            for name, url in json_data.items():

                if "> itg:" in name.lower():
                    continue

                if len(url) > (max_url_chars := 150):
                    await inter.edit_original_message(
                        f"**M·ªôt m·ª•c trong t·ªáp {url} c·ªßa b·∫°n v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng k√Ω t·ª± ƒë∆∞·ª£c ph√©p:{max_url_chars}**")
                    return

                if not isinstance(url, str) or not URL_REG.match(url):
                    await inter.edit_original_message(f"T·ªáp c·ªßa b·∫°n ch·ª©a li√™n k·∫øt kh√¥ng h·ª£p l·ªá: ```ldif\n{url}```")
                    return

            await inter.response.defer(ephemeral=True)

            self.view.data = await self.view.bot.get_global_data(inter.author.id, db_name=DBModel.users)

            for name in json_data.keys():
                try:
                    del self.view.data["integration_links"][name.lower()[:90]]
                except KeyError:
                    continue

            if self.view.bot.config["MAX_USER_INTEGRATIONS"] > 0 and not (await self.view.bot.is_owner(inter.author)):

                if (json_size := len(json_data)) > self.view.bot.config["MAX_USER_INTEGRATIONS"]:
                    await inter.edit_original_message(f"S·ªë m·ª•c trong t·ªáp t√≠ch h·ª£p c·ªßa b·∫°n v∆∞·ª£t qu√° "
                                        f"s·ªë l∆∞·ª£ng t·ªëi ƒëa cho ph√©p ({self.view.bot.config['MAX_USER_INTEGRATIONS']}).")
                    return

                if (json_size + (user_integrations := len(self.view.data["integration_links"]))) > self.view.bot.config[
                    "MAX_USER_INTEGRATIONS"]:
                    await inter.edit_original_message(
                        "B·∫°n kh√¥ng c√≥ ƒë·ªß dung l∆∞·ª£ng ƒë·ªÉ th√™m t·∫•t c·∫£ ti·ªán √≠ch t√≠ch h·ª£p v√†o t·ªáp c·ªßa m√¨nh...\n"
                         f"Gi·ªõi h·∫°n hi·ªán t·∫°i: {self.view.bot.config['MAX_USER_INTEGrationS']}\n"
                         f"S·ªë t√≠ch h·ª£p ƒë√£ l∆∞u: {user_integrations}\n"
                         f"B·∫°n c·∫ßn: {(json_size + user_integrations) - self.view.bot.config['MAX_USER_INTEGRATIONS']}")
                    return

            self.view.data["integration_links"].update(json_data)

            await self.view.bot.update_global_data(inter.author.id, self.view.data, db_name=DBModel.users)

            await inter.edit_original_message(
                content="**T√≠ch h·ª£p ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng!**"
            )

            if (s := len(json_data)) > 1:
                self.view.log = f"{s} t√≠ch h·ª£p ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng."
            else:
                name = next(iter(json_data))
                self.view.log = f"T√≠ch h·ª£p [`{name}`]({json_data[name]}) ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng."

        else:
            raise GenericError(f"**Ch·∫ø ƒë·ªô ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai: {self.view.mode}**")

        if not isinstance(self.view.ctx, CustomContext):
            await self.view.ctx.edit_original_message(embed=self.view.build_embed(), view=self.view)
        elif self.view.message:
            await self.view.message.edit(embed=self.view.build_embed(), view=self.view)


class FavModalAdd(disnake.ui.Modal):
    def __init__(self, name: Optional[str], url: Optional[str], view, **kwargs):

        self.view = view
        self.name = name

        if self.view.mode == ViewMode.fav_manager:
            super().__init__(
                title="Th√™m/Ch·ªânh s·ª≠a danh s√°ch ph√°t/y√™u th√≠ch",
                custom_id="user_fav_edit",
                timeout=180,
                components=[
                    disnake.ui.TextInput(
                        label="T√™n t·ª´ danh s√°ch ph√°t/y√™u th√≠ch:",
                        custom_id="user_fav_name",
                        min_length=2,
                        max_length=25,
                        value=name or None
                    ),
                    disnake.ui.TextInput(
                        label="Link/Url:",
                        custom_id="user_fav_url",
                        min_length=10,
                        max_length=200,
                        value=url or None
                    ),
                ]
            )
            return

        if self.view.mode == ViewMode.guild_fav_manager:
            super().__init__(
                title="Th√™m/Ch·ªânh s·ª≠a danh s√°ch ph√°t/y√™u th√≠ch",
                custom_id="guild_fav_edit",
                timeout=180,
                components=[
                    disnake.ui.TextInput(
                        label="T√™n y√™u th√≠ch/danh s√°ch ph√°t:",
                        custom_id="guild_fav_name",
                        min_length=2,
                        max_length=25,
                        value=name or None
                    ),
                    disnake.ui.TextInput(
                        label="S·ª± mi√™u t·∫£:",
                        custom_id="guild_fav_description",
                        min_length=3,
                        max_length=50,
                        value=kwargs.get('description', None),
                        required=False
                    ),
                    disnake.ui.TextInput(
                        label="Link/Url:",
                        custom_id="guild_fav_url",
                        min_length=10,
                        max_length=250,
                        value=url or None
                    ),
                ]
            )
            return

        if self.view.mode == ViewMode.integrations_manager:
            super().__init__(
                title="Th√™m t√≠ch h·ª£p",
                custom_id="user_integration_add",
                timeout=180,
                components=[
                    disnake.ui.TextInput(
                        label="Link/Url:",
                        custom_id="user_integration_url",
                        min_length=10,
                        max_length=200,
                        value=url or None
                    ),
                ]
            )
            return

        raise GenericError(f"**Ch·∫ø ƒë·ªô ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai: {self.view.mode}/ {type(self.view.mode)}**")


    async def callback(self, inter: disnake.ModalInteraction):

        if self.view.mode == ViewMode.fav_manager:

            url = inter.text_values["user_fav_url"].strip()

            try:
                valid_url = URL_REG.findall(url)[0]
            except IndexError:
                await inter.send(
                    embed=disnake.Embed(
                        description=f"**Kh√¥ng t√¨m th·∫•y li√™n k·∫øt h·ª£p l·ªá:** {url}",
                        color=disnake.Color.red()
                    ), ephemeral=True
                )
                return

            await inter.response.defer(ephemeral=True)

            self.view.data = await self.view.bot.get_global_data(inter.author.id, db_name=DBModel.users)

            name = inter.text_values["user_fav_name"].strip()

            try:
                if name != self.name:
                    del self.view.data["fav_links"][self.name]
            except KeyError:
                pass

            self.view.data["fav_links"][name] = valid_url

            await self.view.bot.update_global_data(inter.author.id, self.view.data, db_name=DBModel.users)

            try:
                me = (inter.guild or self.view.bot.get_guild(inter.guild_id)).me
            except AttributeError:
                me = None

            await inter.edit_original_message(
                embed=disnake.Embed(
                    description="**Li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u/c·∫≠p nh·∫≠t th√†nh c√¥ng trong m·ª•c y√™u th√≠ch c·ªßa b·∫°n!\n"
                                 "N√≥ s·∫Ω xu·∫•t hi·ªán v√†o nh·ªØng d·ªãp sau:** ```\n"
                                 "- Khi s·ª≠ d·ª•ng l·ªánh /play (ch·ªçn trong t·ª± ƒë·ªông ho√†n t·∫•t t√¨m ki·∫øm)\n"
                                 "- B·∫±ng c√°ch nh·∫•p v√†o n√∫t ph√°t y√™u th√≠ch c·ªßa ng∆∞·ªùi ch∆°i.\n"
                                 "- Khi s·ª≠ d·ª•ng l·ªánh ph√°t (c√≥ ti·ªÅn t·ªë) kh√¥ng c√≥ t√™n ho·∫∑c li√™n k·∫øt.```",
                    color=self.view.bot.get_color(me)
                )
            )

        elif self.view.mode == ViewMode.guild_fav_manager:
            url = inter.text_values["guild_fav_url"].strip()

            try:
                valid_url = URL_REG.findall(url)[0]
            except IndexError:
                await inter.send(
                    embed=disnake.Embed(
                        description=f"**Kh√¥ng t√¨m th·∫•y li√™n k·∫øt h·ª£p l·ªá:** {url}",
                        color=disnake.Color.red()
                    ), ephemeral=True
                )
                return

            await inter.response.defer(ephemeral=True)

            self.view.guild_data = await self.view.bot.get_data(inter.guild_id, db_name=DBModel.guilds)

            if not self.view.guild_data["player_controller"]["channel"] or not self.view.bot.get_channel(
                    int(self.view.guild_data["player_controller"]["channel"])):
                await inter.edit_original_message("**Kh√¥ng c√≥ tr√¨nh ph√°t n√†o ƒë∆∞·ª£c ƒë·ªãnh c·∫•u h√¨nh tr√™n m√°y ch·ªß! S·ª≠ d·ª•ng l·ªánh /setup**")
                return

            name = inter.text_values["guild_fav_name"].strip()
            description = inter.text_values["guild_fav_description"].strip()

            if not self.view.guild_data["player_controller"]["channel"] or not self.view.bot.get_channel(
                    int(self.view.guild_data["player_controller"]["channel"])):
                await inter.edit_original_message("**Kh√¥ng c√≥ ng∆∞·ªùi ch∆°i n√†o ƒë∆∞·ª£c c·∫•u h√¨nh tr√™n m√°y ch·ªß! S·ª≠ d·ª•ng l·ªánh /setup**")
                return

            try:
                if name != self.name:
                    del self.view.guild_data["player_controller"]["fav_links"][self.name]
            except KeyError:
                pass

            self.view.guild_data["player_controller"]["fav_links"][name] = {'url': valid_url, "description": description}

            await self.view.bot.update_data(inter.guild_id, self.view.guild_data, db_name=DBModel.guilds)

            guild = inter.guild or self.view.bot.get_guild(inter.guild_id)

            await inter.edit_original_message(
                embed=disnake.Embed(description="**Li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c th√™m/c·∫≠p nh·∫≠t th√†nh c√¥ng t·ªõi ƒëi·ªán tho·∫°i c·ªë ƒë·ªãnh c·ªßa ng∆∞·ªùi ch∆°i!\n"
                                                 "C√°c th√†nh vi√™n c√≥ th·ªÉ s·ª≠ d·ª•ng n√≥ tr·ª±c ti·∫øp tr√™n b·ªô ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i khi kh√¥ng s·ª≠ d·ª•ng.**",
                                    color=self.view.bot.get_color(guild.me)), view=None)

            await process_idle_embed(self.view.bot, guild, guild_data=self.view.guild_data)

        elif self.view.mode == ViewMode.integrations_manager:
            url = inter.text_values["user_integration_url"].strip()

            try:
                url = URL_REG.findall(url)[0]
            except IndexError:
                await inter.send(
                    embed=disnake.Embed(
                        description=f"**Kh√¥ng t√¨m th·∫•y li√™n k·∫øt h·ª£p l·ªá:** {url}",
                        color=disnake.Color.red()
                    ), ephemeral=True
                )
                return

            if (matches := spotify_regex_w_user.match(url)):

                if not self.view.bot.spotify:
                    await inter.send(
                        embed=disnake.Embed(
                            description="**H·ªó tr·ª£ Spotify hi·ªán kh√¥ng c√≥ s·∫µn...**",
                            color=disnake.Color.red()
                        ), ephemeral=True
                    )
                    return

                url_type, user_id = matches.groups()

                if url_type != "user":
                    await inter.send(
                        embed=disnake.Embed(
                            description=f"**B·∫°n ph·∫£i s·ª≠ d·ª•ng li√™n k·∫øt h·ªì s∆° ng∆∞·ªùi d√πng Spotify.** {url}",
                            color=disnake.Color.red()
                        ), ephemeral=True
                    )
                    return

                try:
                    await inter.response.defer(ephemeral=True)
                except:
                    pass

                try:
                    result = await self.view.bot.loop.run_in_executor(None, lambda: self.view.bot.spotify.user(user_id))
                except Exception as e:
                    await inter.send(
                        embed=disnake.Embed(
                            description="**ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin t·ª´ Spotify:** ```py\n"
                                        f"{repr(e)}```",
                            color=self.view.bot.get_color()
                        )
                    )
                    traceback.print_exc()
                    return

                if not result:
                    await inter.send(
                        embed=disnake.Embed(
                            description="**Ng∆∞·ªùi d√πng li√™n k·∫øt ƒë∆∞·ª£c cung c·∫•p kh√¥ng c√≥ danh s√°ch ph√°t c√¥ng khai...**",
                            color=self.view.bot.get_color()
                        )
                    )
                    return

                data = {"title": f"[SP]: {result['display_name'][:90]}", "url": result["external_urls"]["spotify"]}

            else:

                if not self.view.bot.config["USE_YTDL"]:
                    await inter.send(
                        embed=disnake.Embed(
                            description="**Lo·∫°i li√™n k·∫øt n√†y hi·ªán kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£...**",
                            color=self.view.bot.get_color()
                        )
                    )
                    return

                match = re.search(youtube_regex, url)

                if match:
                    base_url = f"{match.group(0)}/playlists"
                    source = "[YT]:"
                else:
                    match = re.search(soundcloud_regex, url)
                    if match:
                        group = match.group(1)
                        base_url = f"https://soundcloud.com/{group}/sets"
                    else:
                        await inter.send(
                            embed=disnake.Embed(
                                description=f"**Li√™n k·∫øt ƒë∆∞·ª£c cung c·∫•p kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£:** {url}",
                                color=disnake.Color.red()
                            ), ephemeral=True
                        )
                        return

                    source = "[SC]:"

                loop = self.view.bot.loop or asyncio.get_event_loop()

                try:
                    await inter.response.defer(ephemeral=True)
                except:
                    pass

                try:
                    info = await loop.run_in_executor(None, lambda: self.view.bot.pool.ytdl.extract_info(base_url, download=False))
                except Exception as e:
                    traceback.print_exc()
                    await inter.edit_original_message(f"**ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin t·ª´ url:** ```py\n{repr(e)}```")
                    return

                if not info:

                    msg = f"**Ng∆∞·ªùi d√πng/k√™nh c·ªßa li√™n k·∫øt ƒë∆∞·ª£c cung c·∫•p kh√¥ng t·ªìn t·∫°i:**\n{url}"

                    if source == "[YT]:":
                        msg += f"\n\n`L∆∞u √Ω: Ki·ªÉm tra xem li√™n k·∫øt c√≥ ch·ª©a ng∆∞·ªùi d√πng c√≥ @ hay kh√¥ng, v√≠ d·ª•: @ytchannel`"

                    await inter.edit_original_message(
                        embed=disnake.Embed(
                            description=msg,
                            color=disnake.Color.red()
                        )
                    )
                    return

                if not info['entries']:
                    await inter.edit_original_message(
                        embed=disnake.Embed(
                            description=f"**Ng∆∞·ªùi d√πng/k√™nh trong li√™n k·∫øt ƒë∆∞·ª£c cung c·∫•p kh√¥ng c√≥ danh s√°ch ph√°t c√¥ng khai...**",
                            color=disnake.Color.red()
                        )
                    )
                    return

                data = {"title": f"{source} {info['title']}", "url": info["original_url"]}

            self.view.data = await self.view.bot.get_global_data(inter.author.id, db_name=DBModel.users)

            title = fix_characters(data['title'], 80)

            self.view.data["integration_links"][title] = data['url']

            await self.view.bot.update_global_data(inter.author.id, self.view.data, db_name=DBModel.users)

            try:
                me = (inter.guild or self.view.bot.get_guild(inter.guild_id)).me
            except AttributeError:
                me = None

            await inter.edit_original_message(
                embed=disnake.Embed(
                    description=f"**ƒê√£ th√™m/ch·ªânh s·ª≠a t√≠ch h·ª£p th√†nh c√¥ng:** [`{title}`]({data['url']})\n"
                                 "**N√≥ s·∫Ω xu·∫•t hi·ªán v√†o nh·ªØng d·ªãp sau:** ```\n"
                                 "- Khi s·ª≠ d·ª•ng l·ªánh /play (ch·ªçn t√≠ch h·ª£p trong t·ª± ƒë·ªông ho√†n t·∫•t t√¨m ki·∫øm)\n"
                                 "- B·∫±ng c√°ch nh·∫•p v√†o n√∫t ph√°t y√™u th√≠ch c·ªßa ng∆∞·ªùi ch∆°i.\n"
                                 "- Khi s·ª≠ d·ª•ng l·ªánh ph√°t (c√≥ ti·ªÅn t·ªë) kh√¥ng c√≥ t√™n ho·∫∑c li√™n k·∫øt.```",
                    color=self.view.bot.get_color(me)
                ), view=None
            )

            self.view.log = f"[`{data['title']}`]({data['url']}) ƒë√£ ƒë∆∞·ª£c th√™m v√†o t√≠ch h·ª£p c·ªßa b·∫°n."

        if not isinstance(self.view.ctx, CustomContext):
            await self.view.ctx.edit_original_message(embed=self.view.build_embed(), view=self.view)
        elif self.view.message:
            await self.view.message.edit(embed=self.view.build_embed(), view=self.view)

class FavMenuView(disnake.ui.View):

    def __init__(self, bot: BotCore, ctx: Union[disnake.AppCmdInter, CustomContext], data: dict, log: str = "",
                 prefix="", mode: str = ViewMode.fav_manager):
        super().__init__(timeout=180)
        self.mode = mode
        self.bot = bot
        self.ctx = ctx
        self.guild = ctx.guild
        self.current = None
        self.data = data
        self.guild_data = {}
        self.message = None
        self.log = log
        self.prefix = prefix
        self.components_updater_task = bot.loop.create_task(self.auto_update())

        if not self.guild:
            for b in self.bot.pool.bots:
                guild = b.get_guild(ctx.guild_id)
                if guild:
                    self.guild = guild
                    break

    def update_components(self):

        self.clear_items()

        if not self.guild:
            self.bot.loop.create_task(self.on_timeout())
            return

        mode_select = disnake.ui.Select(
            options=[
                disnake.SelectOption(label="Tr√¨nh qu·∫£n l√Ω y√™u th√≠ch", value="fav_view_mode_0", emoji="‚≠ê",
                                     default=self.mode == ViewMode.fav_manager)
            ], min_values=1, max_values=1
        )

        if self.bot.config["USE_YTDL"] or self.bot.spotify:
            mode_select.append_option(
                disnake.SelectOption(label="Tr√¨nh qu·∫£n l√Ω t√≠ch h·ª£p", value="fav_view_mode_2", emoji="üí†",
                                     default=self.mode == ViewMode.integrations_manager)
            )

        if self.ctx.author.guild_permissions.manage_guild:
            mode_select.options.insert(1, disnake.SelectOption(label="Tr√¨nh qu·∫£n l√Ω danh s√°ch ph√°t tr√™n m√°y ch·ªß",
                                                               value="fav_view_mode_1", emoji="üìå",
                                                               default=self.mode == ViewMode.guild_fav_manager))

        if len(mode_select.options) < 2:
            mode_select.disabled = True

        mode_select.callback = self.mode_callback
        self.add_item(mode_select)

        if self.mode == ViewMode.fav_manager:

            if self.data["fav_links"]:
                fav_select = disnake.ui.Select(options=[
                    disnake.SelectOption(label=k, emoji=music_source_emoji_url(v)) for k, v in
                    self.data["fav_links"].items()
                ], min_values=1, max_values=1)
                fav_select.options[0].default = True
                self.current = fav_select.options[0].label
                fav_select.callback = self.select_callback
                self.add_item(fav_select)

        elif self.mode == ViewMode.guild_fav_manager:

            bots_in_guild = []

            for b in sorted(self.bot.pool.bots, key=lambda b: b.identifier):
                if b.bot_ready and b.user in self.guild.members:
                    bots_in_guild.append(disnake.SelectOption(emoji="üé∂",
                                                              label=f"Bot: {b.user.display_name}"[:25],
                                                              value=f"bot_select_{b.user.id}",
                                                              description=f"ID: {b.user.id}", default=b == self.bot))

            if bots_in_guild:
                bot_select = disnake.ui.Select(options=bots_in_guild, min_values=1, max_values=1)
                bot_select.callback = self.bot_select
                self.add_item(bot_select)

            if self.guild_data["player_controller"]["fav_links"]:
                fav_select = disnake.ui.Select(options=[
                    disnake.SelectOption(label=k, emoji=music_source_emoji_url(v['url']),
                                         description=v.get("description")) for k, v in
                    self.guild_data["player_controller"]["fav_links"].items()
                ], min_values=1, max_values=1)
                fav_select.options[0].default = True
                self.current = fav_select.options[0].label
                fav_select.callback = self.select_callback
                self.add_item(fav_select)

        elif self.mode == ViewMode.integrations_manager:

            if self.data["integration_links"]:

                integration_select = disnake.ui.Select(options=[
                    disnake.SelectOption(label=k, emoji=music_source_emoji_id(k)) for k, v in self.data["integration_links"].items()
                ], min_values=1, max_values=1)
                integration_select.options[0].default = True
                self.current = integration_select.options[0].label
                integration_select.callback = self.select_callback
                self.add_item(integration_select)

        add_button = disnake.ui.Button(label="Th√™m", emoji="<:add_music:588172015760965654>")
        add_button.callback = self.add_callback
        self.add_item(add_button)

        if self.mode == ViewMode.fav_manager:
            edit_button = disnake.ui.Button(label="Ch·ªânh s·ª≠a", emoji="‚úçÔ∏è", disabled=not self.data["fav_links"])
            edit_button.callback = self.edit_callback
            self.add_item(edit_button)

            remove_button = disnake.ui.Button(label="Lo·∫°i b·ªè", emoji="‚ôªÔ∏è", disabled=not self.data["fav_links"])
            remove_button.callback = self.remove_callback
            self.add_item(remove_button)

            clear_button = disnake.ui.Button(label="X√≥a y√™u th√≠ch", emoji="üöÆ", disabled=not self.data["fav_links"])
            clear_button.callback = self.clear_callback
            self.add_item(clear_button)

            export_button = disnake.ui.Button(label="Xu·∫•t", emoji="üì§", disabled=not self.data["fav_links"])
            export_button.callback = self.export_callback
            self.add_item(export_button)

        elif self.mode == ViewMode.guild_fav_manager:
            edit_button = disnake.ui.Button(label="Ch·ªânh s·ª≠a", emoji="‚úçÔ∏è", disabled=not self.guild_data["player_controller"]["fav_links"])
            edit_button.callback = self.edit_callback
            self.add_item(edit_button)

            remove_button = disnake.ui.Button(label="Lo·∫°i b·ªè", emoji="‚ôªÔ∏è", disabled=not self.guild_data["player_controller"]["fav_links"])
            remove_button.callback = self.remove_callback
            self.add_item(remove_button)

            clear_button = disnake.ui.Button(label="X√≥a", emoji="üöÆ", disabled=not self.guild_data["player_controller"]["fav_links"])
            clear_button.callback = self.clear_callback
            self.add_item(clear_button)

            export_button = disnake.ui.Button(label="Xu·∫•t", emoji="üì§", disabled=not self.guild_data["player_controller"]["fav_links"])
            export_button.callback = self.export_callback
            self.add_item(export_button)

        elif self.mode == ViewMode.integrations_manager:
            remove_button = disnake.ui.Button(label="Lo·∫°i b·ªè", emoji="‚ôªÔ∏è", disabled=not self.data["integration_links"])
            remove_button.callback = self.remove_callback
            self.add_item(remove_button)

            clear_button = disnake.ui.Button(label="X√≥a", emoji="üöÆ", disabled=not self.data["integration_links"])
            clear_button.callback = self.clear_callback
            self.add_item(clear_button)

            export_button = disnake.ui.Button(label="Xu·∫•t", emoji="üì§", disabled=not self.data["integration_links"])
            export_button.callback = self.export_callback
            self.add_item(export_button)

        import_button = disnake.ui.Button(label="Nh·∫≠p", emoji="üì•")
        import_button.callback = self.import_callback
        self.add_item(import_button)

        if self.mode == ViewMode.fav_manager:
            play_button = disnake.ui.Button(label="Ch∆°i b√†i h√°t y√™u th√≠ch ƒë√£ ch·ªçn", emoji="‚ñ∂", custom_id="favmanager_play_button")
            play_button.callback = self.play_callback
            self.add_item(play_button)

        elif self.mode == ViewMode.integrations_manager:
            if self.data["integration_links"]:
                play_button = disnake.ui.Button(label="Ph√°t danh s√°ch ph√°t t·ª´ t√≠ch h·ª£p ƒë√£ ch·ªçn", emoji="‚ñ∂", custom_id="favmanager_play_button")
                play_button.callback = self.play_callback
                self.add_item(play_button)

        cancel_button = disnake.ui.Button(label="H·ªßy", emoji="‚ùå")
        cancel_button.callback = self.cancel_callback
        self.add_item(cancel_button)

    async def auto_update(self):

        while True:

            if self.mode != ViewMode.fav_manager:
                return

            user, data, url = await self.bot.wait_for("fav_add", check=lambda user, data, url: user.id == self.ctx.author.id)

            self.log = f"{url} ƒë√£ ƒë∆∞·ª£c th√™m v√†o y√™u th√≠ch c·ªßa b·∫°n."

            if not isinstance(self.ctx, CustomContext):
                await self.ctx.edit_original_message(embed=self.build_embed(), view=self)
            elif self.message:
                await self.message.edit(embed=self.build_embed(), view=self)

    async def on_timeout(self):

        try:
            self.components_updater_task.cancel()
        except:
            pass

        try:
            for i in self.children[1].options:
                i.default = self.current == i.value
        except:
            pass

        for c in self.children:
            c.disabled = True

        if isinstance(self.ctx, CustomContext):
            try:
                await self.message.edit(view=self)
            except:
                pass

        else:
            try:
                await self.ctx.edit_original_message(view=self)
            except:
                pass

        self.stop()

    def build_embed(self):

        supported_platforms = []

        if self.mode == ViewMode.integrations_manager:

            if self.bot.config["USE_YTDL"]:
                supported_platforms.extend(["[31;1mYoutube[0m", "[33;1mSoundcloud[0m"])

            if self.bot.spotify:
                supported_platforms.append("[32;1mSpotify[0m")

            if not supported_platforms:
                return

        self.update_components()

        try:
            cmd = f"</play:" + str(self.bot.pool.controller_bot.get_global_command_named("play", cmd_type=disnake.ApplicationCommandType.chat_input).id) + ">"
        except AttributeError:
            cmd = "/play"

        if self.mode == ViewMode.fav_manager:
            embed = disnake.Embed(
                title="Tr√¨nh qu·∫£n l√Ω y√™u th√≠ch",
                colour=self.bot.get_color(),
            )

            if not self.data["fav_links"]:
                embed.description = "B·∫°n kh√¥ng c√≥ m·ª•c y√™u th√≠ch (nh·∫•p v√†o n√∫t Th√™m b√™n d∆∞·ªõi)."

            else:
                def format_fav(index, data):
                    name, url = data
                    e = get_source_emoji_cfg(self.bot, url)
                    if e:
                        return f"` {index} ` {e} [`{name}`]({url})"
                    return f"` {index} ` [`{name}`]({url})"

                embed.description = f"**Y√™u th√≠ch hi·ªán t·∫°i c·ªßa b·∫°n:**\n\n" + "\n".join(
                    f"> ` {n + 1} ` [`{f[0]}`]({f[1]})" for n, f in enumerate(self.data["fav_links"].items())
                )

            embed.add_field(name="**C√°ch s·ª≠ d·ª•ng?**", inline=False,
                            value=f"* S·ª≠ d·ª•ng l·ªánh {cmd} (ch·ªçn m·ª•c ∆∞a th√≠ch trong qu√° tr√¨nh t·ª± ƒë·ªông ho√†n th√†nh t√¨m ki·∫øm)\n"
                                   "* Nh·∫•p v√†o n√∫t ph√°t/ch·ªçn/t√≠ch h·ª£p tr√¨nh ph√°t y√™u th√≠ch.\n"
                                   f"* S·ª≠ d·ª•ng l·ªánh {self.prefix}{self.bot.get_cog('Music').play_legacy.name} m√† kh√¥ng bao g·ªìm t√™n ho·∫∑c li√™n k·∫øt b√†i h√°t/video.\n"
                                   "*S·ª≠ d·ª•ng n√∫t ph√°t y√™u th√≠ch b√™n d∆∞·ªõi.")

        elif self.mode == ViewMode.guild_fav_manager:
            embed = disnake.Embed(
                title="M√°y ch·ªß y√™u th√≠ch Tr√¨nh qu·∫£n l√Ω.",
                colour=self.bot.get_color(),
            )
            embed.set_author(name=f"Bot ƒë√£ ch·ªçn: {self.bot.user.display_name}", icon_url=self.bot.user.display_avatar.url)

            if not self.guild_data["player_controller"]["fav_links"]:
                embed.description = f"Kh√¥ng c√≥ li√™n k·∫øt n√†o ƒë∆∞·ª£c th√™m v√†o bot {self.bot.user.mention} (nh·∫•p v√†o n√∫t th√™m b√™n d∆∞·ªõi)."

            else:
                def format_gfav(index, data):
                    name, data = data
                    e = get_source_emoji_cfg(self.bot, data['url'])
                    if e:
                        return f"` {index} ` {e} [`{name}`]({data['url']})"
                    return f"` {index} ` [`{name}`]({data['url']})"
                
                embed.description = f"**Li√™n k·∫øt ·ªü tr√™n kh√¥ng c√≥ bot {self.bot.user.mention}:**\n\n" + "\n".join(
                    f"> ` {n + 1} ` [`{f[0]}`]({f[1]['url']})" for n, f in enumerate(self.guild_data["player_controller"]["fav_links"].items())
                )

            embed.add_field(name="**L√†m th·∫ø n√†o ƒë·ªÉ b·∫°n s·ª≠ d·ª•ng ch√∫ng?**", inline=False,
                            value=f"* S·ª≠ d·ª•ng menu ch·ªçn tr√¨nh ph√°t ·ªü ch·∫ø ƒë·ªô ch·ªù.")

        elif self.mode == ViewMode.integrations_manager:
            embed = disnake.Embed(
                title="Ng∆∞·ªùi qu·∫£n l√Ω t√≠ch h·ª£p k√™nh/h·ªì s∆° v·ªõi danh s√°ch ph√°t c√¥ng khai.",
                colour=self.bot.get_color(),
            )

            if not self.data["integration_links"]:
                embed.description = "**B·∫°n hi·ªán kh√¥ng c√≥ ti·ªán √≠ch t√≠ch h·ª£p n√†o (nh·∫•p v√†o n√∫t th√™m b√™n d∆∞·ªõi).**"
            else:
                def format_itg(bot, index, data):
                    name, url = data
                    e = get_source_emoji_cfg(bot, url)
                    if e:
                        return f"` {index} ` {e} [`{name[5:]}`]({url})"
                    return f"` {index} ` [`{name}`]({url})"
                
                embed.description = f"**T√≠ch h·ª£p hi·ªán t·∫°i c·ªßa b·∫°n:**\n\n" + "\n".join(
                    f"> ` {n + 1} ` [`{f[0]}`]({f[1]})" for n, f in enumerate(self.data["integration_links"].items()))

                embed.add_field(name="**L√†m c√°ch n√†o ƒë·ªÉ ph√°t danh s√°ch ph√°t t√≠ch h·ª£p?**", inline=False,
                                 value=f"* S·ª≠ d·ª•ng l·ªánh {cmd} (ch·ªçn t√≠ch h·ª£p trong t·ª± ƒë·ªông ho√†n th√†nh t√¨m ki·∫øm)\n"
                                       "* Nh·∫•p v√†o n√∫t ph√°t/ch·ªçn/t√≠ch h·ª£p tr√¨nh ph√°t y√™u th√≠ch.\n"
                                       f"* S·ª≠ d·ª•ng l·ªánh {self.prefix}{self.bot.get_cog('Music').play_legacy.name} m√† kh√¥ng bao g·ªìm t√™n ho·∫∑c li√™n k·∫øt b√†i h√°t/video.\n"
                                       "* S·ª≠ d·ª•ng n√∫t t√≠ch h·ª£p nh·∫•n b√™n d∆∞·ªõi.")

        else:
            raise GenericError(f"**Ch·∫ø ƒë·ªô ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai:** {self.mode}")

        if self.log:
            embed.add_field(name="T∆∞∆°ng t√°c cu·ªëi c√πng:", value=self.log)

        if self.mode == ViewMode.integrations_manager:
            embed.add_field(
                name="Li√™n k·∫øt h·ªì s∆°/k√™nh ƒë∆∞·ª£c h·ªó tr·ª£:", inline=False,
                value=f"```ansi\n{', '.join(supported_platforms)}```"
            )
        return embed

    async def add_callback(self, inter: disnake.MessageInteraction):
        await inter.response.send_modal(FavModalAdd(name=None, url=None, view=self))

    async def edit_callback(self, inter: disnake.MessageInteraction):

        if not self.current:
            await inter.send("B·∫°n ph·∫£i ch·ªçn m·ªôt m·ª•c!", ephemeral=True)
            return

        if self.mode == ViewMode.fav_manager:
            try:
                await inter.response.send_modal(
                    FavModalAdd(name=self.current, url=self.data["fav_links"][self.current], view=self)
                )
            except KeyError:
                await inter.send(f"**Kh√¥ng c√≥ c√°i t√™n n√†o ƒë∆∞·ª£c y√™u th√≠ch:** {self.current}", ephemeral=True)

        elif self.mode == ViewMode.guild_fav_manager:
            guild = self.bot.get_guild(inter.guild_id) or inter.guild

            if not guild:
                await inter.send("B·∫°n kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y b√™n ngo√†i m√°y ch·ªß.", ephemeral=True)
                return
            try:
                await inter.response.send_modal(
                    FavModalAdd(
                        bot=self.bot, name=self.current,
                        url=self.data["player_controller"]["fav_links"][self.current]["url"],
                        description=self.data["player_controller"]["fav_links"][self.current]["description"],
                        view=self
                    )
                )
            except KeyError:
                await inter.send(f"**Kh√¥ng c√≥ t√™n y√™u th√≠ch:** {self.current}", ephemeral=True)

    async def remove_callback(self, inter: disnake.MessageInteraction):

        if not self.current:
            await inter.send("B·∫°n ph·∫£i ch·ªçn m·ªôt m·ª•c!", ephemeral=True)
            return

        await inter.response.defer(ephemeral=True)

        guild = None

        if self.mode == ViewMode.guild_fav_manager:

            guild = self.bot.get_guild(inter.guild_id)

            if not guild:
                await inter.send("B·∫°n kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y b√™n ngo√†i m√°y ch·ªß.", ephemeral=True)
                return

            if not self.guild_data:
                self.guild_data = await self.bot.get_data(inter.guild_id, db_name=DBModel.guilds)

        else:
            try:
                self.data = inter.global_user_data
            except AttributeError:
                self.data = await self.bot.get_global_data(inter.author.id, db_name=DBModel.users)
                inter.global_user_data = self.data

        if self.mode == ViewMode.fav_manager:
            try:
                url = f'[`{self.current}`]({self.data["fav_links"][self.current]})'
                del self.data["fav_links"][self.current]
            except:
                await inter.edit_original_message(f"**Kh√¥ng c√≥ m·ª•c y√™u th√≠ch n√†o trong danh s√°ch c√≥ t√™n:** {self.current}")
                return

            await self.bot.update_global_data(inter.author.id, self.data, db_name=DBModel.users)

            self.log = f"{url} y√™u th√≠ch ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!"

        elif self.mode == ViewMode.guild_fav_manager:
            try:
                url = f'[`{self.current}`]({self.guild_data["player_controller"]["fav_links"][self.current]})'
                del self.guild_data["player_controller"]["fav_links"][self.current]
            except KeyError:
                try:
                    await process_idle_embed(self.bot, guild, guild_data=self.guild_data)
                except Exception:
                    traceback.print_exc()

                await inter.edit_original_message(
                    embed=disnake.Embed(
                        description=f"**Kh√¥ng c√≥ li√™n k·∫øt danh s√°ch n√†o c√≥ t√™n:** {self.current}",
                        color=self.bot.get_color(guild.me)),
                    view=None
                )
                return

            await self.bot.update_data(inter.guild_id, self.guild_data, db_name=DBModel.guilds)

            self.log = f"Li√™n k·∫øt {url} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng kh·ªèi danh s√°ch y√™u th√≠ch c·ªßa m√°y ch·ªß!"

        elif self.mode == ViewMode.integrations_manager:
            try:
                url = f'[`{self.current}`]({self.data["integration_links"][self.current]})'
                del self.data["integration_links"][self.current]
            except:
                await inter.send(f"**Kh√¥ng c√≥ t√≠ch h·ª£p n√†o trong danh s√°ch v·ªõi t√™n:** {self.current}", ephemeral=True)
                return

            await self.bot.update_global_data(inter.author.id, self.data, db_name=DBModel.users)

            self.log = f"T√≠ch h·ª£p {url} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!"

        await inter.edit_original_message(embed=self.build_embed(), view=self)

    async def bot_select(self, inter: disnake.MessageInteraction):

        value = int(inter.values[0][11:])
        for b in self.bot.pool.bots:
            try:
                if b.user.id == value:
                    self.bot = b
                    break
            except AttributeError:
                continue

        self.guild_data = await self.bot.get_data(inter.guild_id, db_name=DBModel.guilds)

        await inter.response.edit_message(embed=self.build_embed(), view=self)

    async def clear_callback(self, inter: disnake.MessageInteraction):

        guild = None

        if self.mode == ViewMode.guild_fav_manager:

            guild = self.bot.get_guild(inter.guild_id) or inter.guild

            if not guild:
                await inter.send("B·∫°n kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y b√™n ngo√†i m√°y ch·ªß.", ephemeral=True)
                return

            await inter.response.defer(ephemeral=True)

            if not self.guild_data:
                self.guild_data = await self.bot.get_data(inter.guild_id, db_name=DBModel.guilds)

        else:

            await inter.response.defer(ephemeral=True)

            try:
                self.data = inter.global_user_data
            except AttributeError:
                self.data = await self.bot.get_global_data(inter.author.id, db_name=DBModel.users)
                inter.global_user_data = self.data


        if self.mode == ViewMode.fav_manager:
            if not self.data["fav_links"]:
                await inter.send("**B·∫°n kh√¥ng c√≥ li√™n k·∫øt y√™u th√≠ch!**", ephemeral=True)
                return

            fp = BytesIO(bytes(json.dumps(self.data["fav_links"], indent=4), 'utf-8'))

            self.data["fav_links"].clear()

            await self.bot.update_global_data(inter.author.id, self.data, db_name=DBModel.users)

            self.log = "Danh s√°ch y√™u th√≠ch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!"

            await inter.send("### M·ª•c y√™u th√≠ch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!\n"
                              "`M·ªôt t·∫≠p tin sao l∆∞u ƒë√£ ƒë∆∞·ª£c t·∫°o v√† n·∫øu b·∫°n mu·ªën ƒë·∫£o ng∆∞·ª£c vi·ªác x√≥a n√†y, h√£y sao ch√©p "
                              "n·ªôi dung t·ªáp v√† nh·∫•p v√†o n√∫t \"nh·∫≠p\" r·ªìi d√°n n·ªôi dung v√†o tr∆∞·ªùng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.`",
                             ephemeral=True, file=disnake.File(fp, filename="favs.json"))

        elif self.mode == ViewMode.guild_fav_manager:

            if not self.guild_data["player_controller"]["fav_links"]:
                await inter.send("**Kh√¥ng c√≥ li√™n k·∫øt y√™u th√≠ch tr√™n m√°y ch·ªß.**", ephemeral=True)
                return

            fp = BytesIO(bytes(json.dumps(self.guild_data["player_controller"]["fav_links"], indent=4), 'utf-8'))

            self.guild_data["player_controller"]["fav_links"].clear()

            await self.bot.update_data(inter.guild_id, self.guild_data, db_name=DBModel.guilds)

            try:
                await process_idle_embed(self.bot, guild, guild_data=self.guild_data)
            except:
                traceback.print_exc()

            self.log = "Lista de favoritos do server foi limpa com sucesso!"

            await inter.send("### Li√™n k·∫øt d·∫•u trang m√°y ch·ªß ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!\n"
                              "`m·ªôt t·∫≠p tin sao l∆∞u ƒë√£ ƒë∆∞·ª£c t·∫°o v√† n·∫øu b·∫°n mu·ªën ƒë·∫£o ng∆∞·ª£c vi·ªác x√≥a n√†y, h√£y sao ch√©p "
                              "n·ªôi dung t·ªáp v√† nh·∫•p v√†o n√∫t \"nh·∫≠p\" v√† d√°n n·ªôi dung v√†o tr∆∞·ªùng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.`",
                             ephemeral=True, file=disnake.File(fp, filename="guild_favs.json"))

        elif self.mode == ViewMode.integrations_manager:

            if not self.data["integration_links"]:
                await inter.response.edit_message(content="**B·∫°n ch∆∞a l∆∞u ti·ªán √≠ch t√≠ch h·ª£p n√†o!**", view=None)
                return

            fp = BytesIO(bytes(json.dumps(self.data["integration_links"], indent=4), 'utf-8'))

            self.data["integration_links"].clear()

            await self.bot.update_global_data(inter.author.id, self.data, db_name=DBModel.users)

            self.log = "Danh s√°ch t√≠ch h·ª£p c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!"

            await inter.send("### Ti·ªán √≠ch t√≠ch h·ª£p c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!\n"
                              "`m·ªôt t·∫≠p tin sao l∆∞u ƒë√£ ƒë∆∞·ª£c t·∫°o v√† n·∫øu b·∫°n mu·ªën ƒë·∫£o ng∆∞·ª£c vi·ªác x√≥a n√†y, h√£y sao ch√©p "
                              "n·ªôi dung t·ªáp v√† nh·∫•p v√†o n√∫t \"nh·∫≠p\" v√† d√°n n·ªôi dung v√†o tr∆∞·ªùng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.`",
                             ephemeral=True, file=disnake.File(fp, filename="integrations.json"))

        if not isinstance(self.ctx, CustomContext):
            await self.ctx.edit_original_message(embed=self.build_embed(), view=self)
        elif self.message:
            await self.message.edit(embed=self.build_embed(), view=self)

    async def import_callback(self, inter: disnake.MessageInteraction):
        await inter.response.send_modal(FavModalImport(view=self))

    async def play_callback(self, inter: disnake.MessageInteraction):
        await check_pool_bots(inter, check_player=False)
        await self.bot.get_cog("Music").player_controller(inter, PlayerControls.enqueue_fav, query=f"> itg: {self.current}" if self.mode == ViewMode.integrations_manager else f"> fav: {self.current}")

    async def export_callback(self, inter: disnake.MessageInteraction):
        cog = self.bot.get_cog("Music")

        if retry_after := cog.fav_import_export_cd.get_bucket(inter).update_rate_limit():
            if retry_after < 1:
                retry_after = 1
            await inter.send("**B·∫°n ph·∫£i ƒë·ª£i {} ƒë·ªÉ Xu·∫•t.**".format(
                time_format(int(retry_after) * 1000, use_names=True)), ephemeral=True)
            return

        await inter.response.defer(ephemeral=True)

        try:
            cmd = f"</{cog.fav_manager.name}:" + str(
                self.bot.pool.controller_bot.get_global_command_named(cog.fav_manager.name,
                                                                      cmd_type=disnake.ApplicationCommandType.chat_input).id) + ">"
        except AttributeError:
            cmd = "/play"

        if self.mode == ViewMode.fav_manager:
            if not self.data["fav_links"]:
                await inter.send(f"**B·∫°n kh√¥ng c√≥ li√™n k·∫øt y√™u th√≠ch n√†o..\n"
                                  f"B·∫°n c√≥ th·ªÉ th√™m b·∫±ng l·ªánh: {cmd}**", ephemeral=True)
                return

            fp = BytesIO(bytes(json.dumps(self.data["fav_links"], indent=4), 'utf-8'))

            await inter.send(embed=disnake.Embed(
                description=f"M·ª•c y√™u th√≠ch c·ªßa b·∫°n ·ªü ƒë√¢y.\B·∫°n c√≥ th·ªÉ nh·∫≠p b·∫±ng l·ªánh: {cmd}",
                color=self.bot.get_color()), file=disnake.File(fp=fp, filename="favoritos.json"), ephemeral=True)

        elif self.mode == ViewMode.guild_fav_manager:
            if not self.guild_data["player_controller"]["fav_links"]:
                await inter.edit_original_message(content=f"**Kh√¥ng c√≥ b√†i h√°t/danh s√°ch ph√°t n√†o ƒë∆∞·ª£c ghim v√†o m√°y ch·ªß..\n"
                                                           f"B·∫°n c√≥ th·ªÉ th√™m b·∫±ng l·ªánh: {cmd}**")

            fp = BytesIO(bytes(json.dumps(self.guild_data["player_controller"]["fav_links"], indent=4), 'utf-8'))

            guild = self.bot.get_guild(inter.guild_id) or inter.guild

            embed = disnake.Embed(
                description=f"**D·ªØ li·ªáu li√™n k·∫øt b√†i h√°t/danh s√°ch ph√°t c·ªë ƒë·ªãnh c·ªßa m√°y ch·ªß c√≥ ·ªü ƒë√¢y.\n"
                             f"B·∫°n c√≥ th·ªÉ nh·∫≠p b·∫±ng l·ªánh:** {cmd}",
                color=self.bot.get_color(guild.me))

            await inter.send(embed=embed, file=disnake.File(fp=fp, filename="guild_favs.json"), ephemeral=True)

        elif self.mode == ViewMode.integrations_manager:

            if not self.data["integration_links"]:
                await inter.edit_original_message(f"**B·∫°n ch∆∞a th√™m ti·ªán √≠ch t√≠ch h·ª£p n√†o...\n"
                                                   f"B·∫°n c√≥ th·ªÉ th√™m b·∫±ng l·ªánh: {cmd}**")
                return

            fp = BytesIO(bytes(json.dumps(self.data["integration_links"], indent=4), 'utf-8'))

            await inter.send(embed=disnake.Embed(
                description=f"T√≠ch h·ª£p c·ªßa b·∫°n ·ªü ƒë√¢y.\nB·∫°n c√≥ th·ªÉ nh·∫≠p b·∫±ng l·ªánh: {cmd}",
                color=self.bot.get_color()), file=disnake.File(fp=fp, filename="integrations.json"), ephemeral=True)

    async def cancel_callback(self, inter: disnake.MessageInteraction):

        try:
            self.components_updater_task.cancel()
        except:
            pass

        await inter.response.edit_message(
            embed=disnake.Embed(
                description="**Ng∆∞·ªùi qu·∫£n l√Ω ƒë√≥ng.**",
                color=self.bot.get_color(),
            ), view=None
        )
        self.stop()

    async def mode_callback(self, inter: disnake.MessageInteraction):
        self.mode = inter.values[0][14:]

        try:
            self.components_updater_task.cancel()
        except:
            pass

        if self.mode == ViewMode.fav_manager:
            self.components_updater_task = self.bot.loop.create_task(self.auto_update())

        elif self.mode == ViewMode.guild_fav_manager:
            if not self.guild_data:
                await inter.response.defer()
                self.guild_data = await self.bot.get_data(inter.guild_id, db_name=DBModel.guilds)

        if inter.response.is_done():
            await inter.edit_original_message(embed=self.build_embed(), view=self)
        else:
            await inter.response.edit_message(embed=self.build_embed(), view=self)

    async def select_callback(self, inter: disnake.MessageInteraction):
        self.current = inter.values[0]
        await inter.response.defer()

    async def interaction_check(self, inter: disnake.MessageInteraction) -> bool:

        if inter.author.id == self.ctx.author.id:
            return True

        await inter.send(f"Ch·ªâ th√†nh vi√™n {self.ctx.author.mention} m·ªõi c√≥ th·ªÉ t∆∞∆°ng t√°c v·ªõi tin nh·∫Øn n√†y.", ephemeral=True)



base_skin = {
    "queue_max_entries": 7,
    "queue_format": "`{track.number}) [{track.duration}]` [`{track.title_42}`]({track.url})",
    "embeds": [
        {
            "title": "B√†i h√°t ti·∫øp theo:",
            "description": "{queue_format}",
            "color": "{guild.color}"
        },
        {
            "description": "**Ch∆°i ngay:\n[{track.title}]({track.url})**\n\n**Th·ªùi l∆∞·ª£ng:** `{track.duration}`\n**ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi:** {requester.mention}\n**Uploader**: `{track.author}`\n**Danh s√°ch ph√°t g·ªëc:** [`{playlist.name}`]({playlist.url})\n\n{player.log.emoji} **H√†nh ƒë·ªông cu·ªëi c√πng:** {player.log.text}",
            "image": {
              "url": "{track.thumb}"
            },
            "color": "{guild.color}",
            "footer": {
               "text": "B√†i h√°t trong danh s√°ch: {player.queue.size}"
            }
        }
    ]
}


class SkinSettingsButton(disnake.ui.View):

    def __init__(self, user: disnake.Member, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.user = user
        self.mode = "custom_skins_static"
        self.inter = None
        self.controller_enabled = True
        self.update_components()

    def update_components(self):

        self.clear_items()

        select_mode = disnake.ui.Select(
            min_values=1, max_values=1, options=[
                disnake.SelectOption(label="Ch·∫ø ƒë·ªô b√¨nh th∆∞·ªùng", description="√Åp d·ª•ng giao di·ªán cho ch·∫ø ƒë·ªô b√¨nh th∆∞·ªùng c·ªßa tr√¨nh ph√°t",
                                     value="custom_skins", default=self.mode == "custom_skins"),
                disnake.SelectOption(label="Song-Request", description="√Åp d·ª•ng giao di·ªán trong ch·∫ø ƒë·ªô y√™u c·∫ßu b√†i h√°t cho tr√¨nh ph√°t",
                                     value="custom_skins_static", default=self.mode == "custom_skins_static"),
            ]
        )
        select_mode.callback = self.player_mode
        self.add_item(select_mode)

        if self.mode == "custom_skins":
            controller_btn = disnake.ui.Button(emoji="üí†",
                label="K√≠ch ho·∫°t ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i" if not self.controller_enabled else "Desativar Player-Controller"
            )
            controller_btn.callback = self.controller_buttons
            self.add_item(controller_btn)

        save_btn = disnake.ui.Button(label="L∆∞u", emoji="üíæ")
        save_btn.callback = self.save
        self.add_item(save_btn)

    async def controller_buttons(self, inter: disnake.MessageInteraction):
        self.controller_enabled = not self.controller_enabled
        self.update_components()
        await inter.response.edit_message(view=self)

    async def player_mode(self, inter: disnake.MessageInteraction):
        self.mode = inter.values[0]
        self.update_components()
        await inter.response.edit_message(view=self)

    async def save(self, inter: disnake.ModalInteraction):
        self.inter = inter
        self.stop()

    async def interaction_check(self, inter: disnake.MessageInteraction) -> bool:

        if inter.user.id != self.user.id:
            await inter.send(f"Ch·ªâ th√†nh vi√™n {self.user.mention} m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng n√∫t tin nh·∫Øn.", ephemeral=True)
            return False

        return True


class ViewModal(disnake.ui.Modal):

    def __init__(self, view: SkinEditorMenu, title: str, components: List[disnake.TextInput], custom_id: str):
        self.view = view
        super().__init__(title=title, components=components, custom_id=custom_id)
    async def callback(self, inter: disnake.ModalInteraction, /) -> None:
        await self.view.modal_handler(inter)

class SetStageTitle(disnake.ui.View):

    placeholders = (
        '{track.title}', '{track.timestamp}', '{track.emoji}', '{track.author}', '{track.duration}',
        '{track.source}', '{track.playlist}',
        '{requester.name}', '{requester.id}'
    )

    placeholder_text = "```ansi\n[34;1m{track.title}[0m -> T√™n c·ªßa b√†i h√°t\n" \
               "[34;1m{track.author}[0m -> T√™n c·ªßa ngh·ªá sƒ©/ng∆∞·ªùi t·∫£i l√™n/t√°c gi·∫£ c·ªßa b√†i h√°t.\n" \
               "[34;1m{track.duration}[0m -> Th·ªùi l∆∞·ª£ng √¢m nh·∫°c.\n" \
               "[34;1m{track.timestamp}[0m -> Th·ªùi gian ƒë·∫øm √¢m nh·∫°c h·ªìi quy (ch·ªâ k√™nh gi·ªçng n√≥i).\n" \
               "[34;1m{track.source}[0m -> Ngu·ªìn g·ªëc/ngu·ªìn √¢m nh·∫°c (YouTube/Spotify/SoundCloud, v.v.)\n" \
               "[34;1m{track.emoji}[0m -> Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c ph√¥ng ch·ªØ √¢m nh·∫°c (ch·ªâ trong k√™nh gi·ªçng n√≥i).\n" \
               "[34;1m{track.playlist}[0m -> T√™n c·ªßa danh s√°ch ph√°t ngu·ªìn √¢m nh·∫°c (n·∫øu b·∫°n c√≥)\n" \
               "[34;1m{requester.name}[0m -> T√™n/Nick c·ªßa th√†nh vi√™n ƒë√£ ƒë·∫∑t h√†ng √¢m nh·∫°c\n" \
               "[34;1m{requester.id}[0m -> ID th√†nh vi√™n ƒë√£ y√™u c·∫ßu √¢m nh·∫°c```\n" \
               "V√≠ d·ª•: ƒêang ch∆°i {track.title} | Qua: {track.author}\n" \
               "`L∆∞u √Ω: Tr√™n k√™nh tho·∫°i, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c t√πy ch·ªânh trong th√¥ng b√°o tr·∫°ng th√°i (bao g·ªìm bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c t·ª´ c√°c m√°y ch·ªß kh√¥ng c√≥ ·ªü ƒë√≥ v√† t·ª´ c√°c m√°y ch·ªß m√† b·∫°n kh√¥ng c√≥ ·ªü ƒë√≥).`"

    def __init__(self, ctx: Union[CustomContext, disnake.Interaction], bot: BotCore, guild: disnake.Guild, data: dict):
        super().__init__(timeout=180)
        self.ctx = ctx
        self.bot = bot
        self.data = data
        self.guild = guild
        self.message = None

    @disnake.ui.button(emoji='üîä', style=disnake.ButtonStyle.grey, label="Tr·∫°ng th√°i k√≠ch ho·∫°t/h·ªßy k√≠ch ho·∫°t")
    async def set_status(self, button, interaction: disnake.MessageInteraction):

        await interaction.response.send_modal(
            ViewModal(
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="status",
                        custom_id="status_voice_value",
                        placeholder="ƒê·ªÉ t·∫Øt t√≠nh nƒÉng h√£y ƒë·ªÉ tr·ªëng",
                        max_length=496,
                        required=False
                    ),
                ],
                view=self,
                title="X√°c ƒë·ªãnh tr·∫°ng th√°i k√™nh",
                custom_id="status_voice_channel_temp",
            )
        )

    @disnake.ui.button(emoji='üíæ', style=disnake.ButtonStyle.grey, label="Tr·∫°ng th√°i k√≠ch ho·∫°t/h·ªßy k√≠ch ho·∫°t (vƒ©nh vi·ªÖn)")
    async def set_status_perm(self, button, interaction: disnake.MessageInteraction):

        await interaction.response.send_modal(
            ViewModal(
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="Tr·∫°ng th√°i vƒ©nh vi·ªÖn",
                        custom_id="status_voice_value",
                        placeholder="ƒê·ªÉ t·∫Øt t√≠nh nƒÉng h√£y ƒë·ªÉ tr·ªëng",
                        max_length=496,
                        required=False
                    ),
                ],
                view=self,
                title="Tr·∫°ng th√°i x√°c ƒë·ªãnh c·ªßa k√™nh",
                custom_id="status_voice_channel_perm",
            )
        )

    def build_embed(self):

        txt = "### X√°c ƒë·ªãnh tr·∫°ng th√°i t·ª± ƒë·ªông c·ªßa k√™nh ho·∫∑c h·ªôp tho·∫°i\n"

        if self.data['voice_channel_status']:
            txt += f"<:pen:1155781725939572746> **Template hi·ªán t·∫°i ƒëang s·ª≠ d·ª•ng**\n{self.data['voice_channel_status']}\n"

        txt += f"<:IconModHQAlert:1155781703076413491> **L∆∞u √Ω:** `(√çt nh·∫•t ph·∫£i c√≥ m·ªôt gi√° tr·ªã ·ªü d∆∞·ªõi b·∫£ng d∆∞·ªõi ƒë√¢y ƒë∆∞·ª£c th√™m v√†o)`\n{self.placeholder_text}"

        return disnake.Embed(description=txt, color=self.bot.get_color(self.guild.me))

    async def modal_handler(self, inter: disnake.ModalInteraction):

        inter.text_values["status_voice_value"] = inter.text_values["status_voice_value"].replace("\n", " ").strip()

        if inter.text_values["status_voice_value"] and not any(
                p in inter.text_values["status_voice_value"] for p in self.placeholders):
            await inter.send("**B·∫°n ph·∫£i d√πng m·ªôt gi√° tr·ªã h·ª£p l·ªá*", ephemeral=True)
            return

        if inter.data.custom_id == "status_voice_channel_perm":

            if self.data["voice_channel_status"] == inter.text_values["status_voice_value"]:
                await inter.send("**Tr·∫°ng th√°i vƒ©nh vi·ªÖn hi·ªán t·∫°i ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p..**", ephemeral=True)
                return

            self.data["voice_channel_status"] = inter.text_values["status_voice_value"]

            await inter.response.defer(ephemeral=True)

            await self.bot.update_global_data(inter.guild_id, self.data, db_name=DBModel.guilds)

            for b in self.bot.pool.bots:
                try:
                    p = b.music.players[inter.guild_id]
                except KeyError:
                    continue
                p.stage_title_event = True
                p.stage_title_template = inter.text_values["status_voice_value"]
                p.start_time = disnake.utils.utcnow()
                p.set_command_log(
                    text=("ativou" if inter.text_values["status_voice_value"] else "desativou") + "o status autom√°tico",
                    emoji="üì¢",
                )
                p.update = True
                await p.update_stage_topic()
                await p.process_save_queue()
                await asyncio.sleep(3)

            await inter.edit_original_message("**Tr·∫°ng th√°i vƒ©nh vi·ªÖn " + ("ƒë√£ l∆∞u" if inter.text_values["status_voice_value"] else "v√¥ hi·ªáu") + " th√†nh c√¥ng!**" )

        elif inter.data.custom_id == "status_voice_channel_temp":

            try:
                player: LavalinkPlayer = self.bot.music.players[inter.guild_id]
            except KeyError:
                await inter.send("**T√¥i hi·ªán kh√¥ng ph√°t nh·∫°c tr√™n k√™nh gi·ªçng n√≥i/s√¢n kh·∫•u..**", ephemeral=True)
                return

            player.stage_title_event = True
            player.stage_title_template = inter.text_values["status_voice_value"]
            player.start_time = disnake.utils.utcnow()

            await inter.response.defer(ephemeral=True)

            await player.update_stage_topic()

            await player.process_save_queue()

            player.set_command_log(
                text=("k√≠ch ho·∫°t" if inter.text_values["status_voice_value"] else "v√¥ hi·ªáu") + " tr·∫°ng th√°i t·ª± ƒë·ªông",
                emoji="üì¢",
            )

            player.update = True

            await inter.edit_original_message("**Tr·∫°ng th√°i ƒë∆∞·ª£c x√°c ƒë·ªãnh th√†nh c√¥ng!**" if inter.text_values["status_voice_value"] else "**Tr·∫°ng th√°i b·ªã v√¥ hi·ªáu h√≥a th√†nh c√¥ng!**")

        else:
            await inter.send(f"Kh√¥ng ƒë∆∞·ª£c th·ª±c hi·ªán: {inter.data.custom_id}", ephemeral=True)
            return

        await self.close()
        self.stop()

    async def on_timeout(self) -> None:
        await self.close()

    async def close(self):

        for c in self.children:
            c.disabled = True

        if isinstance(self.ctx, CustomContext):
            try:
                await self.message.edit(view=self)
            except:
                pass
        else:
            try:
                await self.ctx.edit_original_message(view=self)
            except:
                pass

    async def interaction_check(self, inter: disnake.MessageInteraction) -> bool:
        if inter.author.id != self.ctx.author.id:
            await inter.send(f"Ch·ªâ th√†nh vi√™n {self.ctx.author.mention} m·ªõi c√≥ th·ªÉ t∆∞∆°ng t√°c v·ªõi tin nh·∫Øn n√†y.",
                             ephemeral=True)
            return False
        return True


class SkinEditorMenu(disnake.ui.View):

    def __init__(self, ctx: Union[CustomContext, disnake.AppCmdInter], bot: BotCore, guild: disnake.Guild, global_data: dict):
        super().__init__(timeout=600)
        self.ctx = ctx
        self.bot = bot
        self.guild = guild
        self.message: Optional[disnake.Message] = None
        self.embed_index = 0
        self.embed_field_index = 0
        self.mode: Literal["editor", "select"] = "select"
        self.global_data = global_data
        self.skin_selected = ""
        self.message_data = {}
        self.update_components()

    def disable_buttons(self):
        for c in self.children:
            if c.custom_id != "skin_editor_placeholders":
                c.disabled = True

    async def new_skin(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        self.message_data = deepcopy(base_skin)
        self.mode = "editor"
        self.update_components()
        await self.update_message(inter)

    async def load_skin(self, inter: disnake.MessageInteraction):

        self.ctx = inter
        self.skin_selected = inter.values[0]
        self.mode = "editor"

        if self.skin_selected.startswith("> cs: "):
            skin_data = self.global_data["custom_skins"][self.skin_selected[6:]]
        elif self.skin_selected.startswith("> css: "):
            skin_data = self.global_data["custom_skins_static"][self.skin_selected[7:]]
        else:
            skin_data = None

        if isinstance(skin_data, str):
            self.message_data = pickle.loads(b64decode(skin_data))
        elif not skin_data:
            self.message_data = deepcopy(base_skin)
        else:
            self.message_data = skin_data

        self.update_components()
        await self.update_message(inter)

    def update_components(self):

        self.clear_items()

        if self.mode == "select":
            add_skin_prefix = (lambda d: [f"> cs: {i}" for i in d.keys()])
            skins_opts = [disnake.SelectOption(emoji="üí†", label=f"Ch·∫ø ƒë·ªô b√¨nh th∆∞·ªùng: {s.replace('> cs: ', '', 1)}", value=s) for s in add_skin_prefix(self.global_data["custom_skins"])]
            add_skin_prefix = (lambda d: [f"> css: {i}" for i in d.keys()])
            static_skins_opts = [disnake.SelectOption(emoji="üí†", label=f"Y√™u c·∫ßu b√†i h√°t: {s.replace('> css: ', '', 1)}", value=s) for s in add_skin_prefix(self.global_data["custom_skins_static"])]

            has_skins = False

            if skins_opts:
                skin_select = disnake.ui.Select(min_values=1, max_values=1, options=skins_opts,
                                                placeholder="Skins c·ªßa ch·∫ø ƒë·ªô b√¨nh th∆∞·ªùng c·ªßa ng∆∞·ªùi ch∆°i")
                skin_select.callback = self.load_skin
                self.add_item(skin_select)
                has_skins = True

            if static_skins_opts:
                static_skin_select = disnake.ui.Select(min_values=1, max_values=1, options=static_skins_opts,
                                                       placeholder="Skins c·ªßa ch·∫ø ƒë·ªô y√™u c·∫ßu b√†i h√°t c·ªßa ng∆∞·ªùi ch∆°i")
                static_skin_select.callback = self.load_skin
                self.add_item(static_skin_select)
                has_skins = True

            if not has_skins:
                self.message_data = {"embeds": [{"description": "**Kh√¥ng c√≥ skin ƒë√£ l∆∞u ... \nNh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o m·ªôt m·∫´u/m·∫´u m·ªõi.**", "color": self.ctx.guild.me.color.value}]}
                new_skin_btn = disnake.ui.Button(label="Th√™m giao di·ªán m·ªõi ", custom_id="skin_editor_new_skin", disabled=len(static_skins_opts) > 2 and len(skins_opts) > 2)
                new_skin_btn.callback = self.new_skin
                self.add_item(new_skin_btn)
            else:
                self.message_data = {"embeds": [{"description": "**Ch·ªçn m·ªôt giao di·ªán b√™n d∆∞·ªõi ƒë·ªÉ ch·ªânh s·ª≠a n√≥ ho·∫∑c t·∫°o m·ªôt c√°i m·ªõi b·∫±ng c√°ch s·ª≠ d·ª•ng m√¥ h√¨nh c∆° s·ªü b·∫±ng c√°ch nh·∫•p v√†o n√∫t Th√™m b√™n d∆∞·ªõi.**", "color": self.ctx.guild.me.color.value}]}
                new_skin_btn = disnake.ui.Button(label="Th√™m giao di·ªán m·ªõi", custom_id="skin_editor_new_skin", disabled=len(static_skins_opts) > 2 and len(skins_opts) > 2)
                new_skin_btn.callback = self.new_skin
                self.add_item(new_skin_btn)

        elif self.mode == "editor":

            if embeds:=self.message_data.get("embeds"):

                select_embed = disnake.ui.Select(
                    min_values = 1, max_values = 1, options=[
                        disnake.SelectOption(label=f"Embed {n+1}", value=f"skin_embed_{n}", default=n == self.embed_index) for n, e in enumerate(embeds)
                    ]
                )

                select_embed.callback = self.embed_select_callback
                self.add_item(select_embed)

                if fields:=embeds[self.embed_index].get("fields", []):
                    select_embed_field = disnake.ui.Select(
                        min_values=1, max_values=1, options=[
                            disnake.SelectOption(label=f"Field {n + 1}", value=f"skin_embed_field_{n}", default=n == self.embed_field_index) for n, e in enumerate(fields)
                        ]
                    )
                    select_embed_field.callback = self.embed_value_select_callback
                    self.add_item(select_embed_field)

                if len(fields) < 25:
                    add_field_btn = disnake.ui.Button(label="Th√™m c√°c lƒ©nh v·ª±c", emoji="üîñ")
                    add_field_btn.callback = self.add_field
                    self.add_item(add_field_btn)

                if fields:
                    edit_field_btn = disnake.ui.Button(label="Ch·ªânh s·ª≠a tr∆∞·ªùng ", emoji="üîñ")
                    edit_field_btn.callback = self.edit_embed_field_button
                    self.add_item(edit_field_btn)

                    delete_field_btn = disnake.ui.Button(label="Tr∆∞·ªùng t·∫©y", emoji="üîñ")
                    delete_field_btn.callback = self.delete_embed_field_button
                    self.add_item(delete_field_btn)

                edit_embed_btn = disnake.ui.Button(label="Ch·ªânh s·ª≠a nh√∫ng", emoji="üìã")
                edit_embed_btn.callback = self.edit_embed_button
                self.add_item(edit_embed_btn)

                remove_embed_btn = disnake.ui.Button(label="Remover nh√∫ng", emoji="üìã")
                remove_embed_btn.callback = self.remove_embed
                self.add_item(remove_embed_btn)

                set_author_footer_btn = disnake.ui.Button(label="Nh√∫ng t√°c gi·∫£ + ch√¢n trang", emoji="üë§")
                set_author_footer_btn.callback = self.set_author_footer
                self.add_item(set_author_footer_btn)

            edit_content_btn = disnake.ui.Button(label=("Th√™m" if not self.message_data.get("content") else "Editar") + " Tin nh·∫Øn", emoji="üí¨")
            edit_content_btn.callback = self.edit_content
            self.add_item(edit_content_btn)

            add_embed_btn = disnake.ui.Button(label="Th√™m nh√∫ng", disabled=len(embeds)>=8, emoji="üìã")
            add_embed_btn.callback = self.add_embed
            self.add_item(add_embed_btn)

            setup_queue_btn = disnake.ui.Button(label="ƒê·∫∑t tr√¨nh gi·ªØ ch·ªó trong h√†ng ƒë·ª£i", emoji="<:music_queue:703761160679194734>")
            setup_queue_btn.callback = self.setup_queue
            self.add_item(setup_queue_btn)

            save_disabled = not embeds and len(self.message_data.get("content", "")) < 15

            export_btn = disnake.ui.Button(label="Xu·∫•t Skin", emoji="üì§", disabled=save_disabled)
            export_btn.callback = self.export
            self.add_item(export_btn)

            import_btn = disnake.ui.Button(label="Nh·∫≠p Skin", emoji="üì•")
            import_btn.callback = self.import_
            self.add_item(import_btn)

            if self.skin_selected:
                delete_skin_btn = disnake.ui.Button(label="X√≥a giao di·ªán", emoji="üöÆ")
                delete_skin_btn.callback = self.delete_skin
                self.add_item(delete_skin_btn)

            back_btn = disnake.ui.Button(label="Quay l·∫°i menu tr∆∞·ªõc", emoji="‚¨ÖÔ∏è")
            back_btn.callback = self.back
            self.add_item(back_btn)

            self.add_item(disnake.ui.Button(label="Danh s√°ch ng∆∞·ªùi gi·ªØ ch·ªó", emoji="<:help:947781412017279016>", custom_id="skin_editor_placeholders"))

            save_btn = disnake.ui.Button(label="Salvar Skin", emoji="üíæ", disabled=save_disabled)
            save_btn.callback = self.save
            self.add_item(save_btn)

    async def interaction_check(self, inter: disnake.MessageInteraction) -> bool:
        if inter.author.id != self.ctx.author.id:
            await inter.send(f" Ch·ªâ th√†nh vi√™n {self.ctx.author.mention} m·ªõi c√≥ th·ªÉ t∆∞∆°ng t√°c v·ªõi tin nh·∫Øn n√†y.",
                             ephemeral=True)
            return False
        return True

    async def on_timeout(self) -> None:

        self.disable_buttons()

        if isinstance(self.ctx, CustomContext):
            try:
                await self.message.edit(view=self)
            except:
                pass
        else:
            try:
                await self.ctx.edit_original_message(view=self)
            except:
                pass

    def build_embeds(self) -> dict:

        player = None
        for b in self.bot.pool.bots:
            try:
                player = b.music.players[self.ctx.guild_id]
                break
            except KeyError:
                continue

        data = skin_converter(self.message_data, ctx=self.ctx, player=player)
        return {"content": data.get("content", ""), "embeds": data.get("embeds", [])}

    async def embed_select_callback(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        self.embed_index = int(inter.values[0][11:])
        await inter.response.defer()

    async def embed_value_select_callback(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        self.embed_field_index = int(inter.values[0][17:])
        await inter.response.defer()

    async def edit_content(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        await inter.response.send_modal(
            ViewModal(
                view=self, title="Ch·ªânh s·ª≠a/Th√™m n·ªôi dung tin nh·∫Øn", custom_id="skin_editor_message_content",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="Tin nh·∫Øn:",
                        custom_id="message_content",
                        value=self.message_data.get("content", ""),
                        max_length=1700,
                        required=False
                    ),
                ]
            )
        )

    async def add_embed(self, inter: disnake.MessageInteraction):
        self.ctx = inter

        await inter.response.send_modal(
            ViewModal(
                view=self, title="Th√™m nh√∫ng", custom_id="skin_editor_add_embed",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="Ti√™u ƒë·ªÅ nh√∫ng:",
                        custom_id="skin_embed_title",
                        max_length=170,
                        required=False
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="M√¥ t·∫£ nh√∫ng:",
                        custom_id="skin_embed_description",
                        max_length=1700,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="M√†u nh√∫ng:",
                        placeholder="V√≠ d·ª•: #000fff ho·∫∑c {guild.color}",
                        custom_id="skin_embed_color",
                        max_length=7,
                        required=False
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="Link/Placeholder h√¨nh ·∫£nh:",
                        custom_id="image_url",
                        max_length=400,
                        required=False
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="Link/Placeholderb·∫±ng c√°ch thu nh·ªè:",
                        custom_id="thumbnail_url",
                        max_length=400,
                        required=False
                    ),
                ]
            )
        )

    async def edit_embed_button(self, inter: disnake.MessageInteraction):

        self.ctx = inter

        embed = self.message_data["embeds"][self.embed_index]

        try:
            image_url = embed["image"]["url"]
        except KeyError:
            image_url = ""

        try:
            thumb_url = embed["thumbnail"]["url"]
        except KeyError:
            thumb_url = ""

        await inter.response.send_modal(
            ViewModal(
                view=self, title="Ch·ªânh s·ª≠a c√°c tr∆∞·ªùng nh√∫ng ch√≠nh", custom_id="skin_editor_edit_embed",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="Nh√∫ng ti√™u ƒë·ªÅ:",
                        custom_id="skin_embed_title",
                        value=embed.get("title", ""),
                        max_length=170,
                        required=False
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="Nh√∫ng m√¥ t·∫£:",
                        custom_id="skin_embed_description",
                        value=embed.get("description", ""),
                        max_length=1700,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="M√†u nh√∫ng:",
                        placeholder="V√≠ d·ª•: #000fff ho·∫∑c {guild.color}",
                        custom_id="skin_embed_color",
                        value=str(embed.get("color", "")),
                        max_length=14,
                        required=False
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="Link/Placeholder c·ªßa h√¨nh ·∫£nh:",
                        custom_id="image_url",
                        value=image_url,
                        max_length=400,
                        required=False
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="Li√™n k·∫øt/Ng∆∞·ªùi gi·ªØ ch·ªó da Miniatura:",
                        custom_id="thumbnail_url",
                        value=thumb_url,
                        max_length=400,
                        required=False
                    ),
                ]
            )
        )

    async def remove_embed(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        del self.message_data["embeds"][self.embed_index]
        self.embed_index = 0
        self.update_components()
        await inter.response.edit_message(view=self, **self.build_embeds())

    async def add_field(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        await inter.response.send_modal(
            ViewModal(
                view=self, title="Th√™m tr∆∞·ªùng tr√™n nh√∫ng", custom_id="skin_editor_add_field",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="T√™n:",
                        custom_id="add_field_name",
                        max_length=170,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="Gi√° tr·ªã/VƒÉn b·∫£n:",
                        custom_id="add_field_value",
                        max_length=1700,
                        required=True
                    ),
                ]
            )
        )

    async def edit_embed_field_button(self, inter: disnake.MessageInteraction):

        self.ctx = inter

        field = self.message_data["embeds"][self.embed_index]["fields"][self.embed_field_index]

        await inter.response.send_modal(
            ViewModal(
                view=self, title="Phi√™n b·∫£n c·ªßa c√°c lƒ©nh v·ª±c ch√≠nh c·ªßa nh√∫ng", custom_id="skin_editor_edit_field",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="T√™n hi·ªán tr∆∞·ªùng:",
                        custom_id="edit_field_name",
                        value=field["name"],
                        max_length=170,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="Gi√° tr·ªã tr∆∞·ªùng/vƒÉn b·∫£n:",
                        custom_id="edit_field_value",
                        value=field["value"],
                        max_length=1700,
                        required=True
                    ),
                ]
            )
        )

    async def delete_embed_field_button(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        del self.message_data["embeds"][self.embed_index]["fields"][self.embed_field_index]
        self.embed_field_index = 0
        self.update_components()
        await inter.response.edit_message(view=self, **self.build_embeds())

    async def set_author_footer(self, inter: disnake.MessageInteraction):

        self.ctx = inter

        try:
            author_name = self.message_data["embeds"][self.embed_index]["author"]["name"]
        except KeyError:
            author_name = ""

        try:
            author_url = self.message_data["embeds"][self.embed_index]["author"]["url"]
        except KeyError:
            author_url = ""

        try:
            author_icon_url = self.message_data["embeds"][self.embed_index]["author"]["icon_url"]
        except KeyError:
            author_icon_url = ""

        try:
            footer_text = self.message_data["embeds"][self.embed_index]["footer"]["text"]
        except KeyError:
            footer_text = ""

        try:
            footer_icon_url = self.message_data["embeds"][self.embed_index]["footer"]["icon_url"]
        except KeyError:
            footer_icon_url = ""

        await inter.response.send_modal(
            ViewModal(
                view=self, custom_id="skin_editor_set_authorfooter", title="Adicionar/editar autor/footer",
                components = [
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="T√™n t√°c gi·∫£:",
                        custom_id="set_author_name",
                        value=author_name,
                        max_length=170,
                        required=False
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="Link/URL do t√°c gi·∫£:",
                        custom_id="set_author_url",
                        value=author_url,
                        max_length=400,
                        required=False
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="Li√™n k·∫øt/url h√¨nh ·∫£nh author:",
                        custom_id="set_author_icon",
                        value=author_icon_url,
                        max_length=400,
                        required=False
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="VƒÉn b·∫£n ch√¢n trang:",
                        custom_id="footer_text",
                        value=footer_text,
                        max_length=1700,
                        required=False
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="Li√™n k·∫øt h√¨nh ·∫£nh URL/Footer:",
                        custom_id="footer_icon_url",
                        value=footer_icon_url,
                        max_length=400,
                        required=False
                    ),
                ]
            )
        )

    async def setup_queue(self, inter: disnake.MessageInteraction):

        self.ctx = inter

        await inter.response.send_modal(
            ViewModal(
                view=self, title="Ng∆∞·ªùi gi·ªØ ch·ªó c·ªßa danh s√°ch d√≤ng c·ªßa d√≤ng", custom_id="skin_editor_setup_queue",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="ƒê·ªãnh d·∫°ng vƒÉn b·∫£n trong t√™n c·ªßa c√°c b√†i h√°t:",
                        custom_id="queue_format",
                        value=self.message_data["queue_format"],
                        max_length=120,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="S·ªë l∆∞·ª£ng b√†i h√°t ƒë∆∞·ª£c hi·ªÉn th·ªã trong danh s√°ch:",
                        custom_id="queue_max_entries",
                        value=str(self.message_data["queue_max_entries"]),
                        max_length=2,
                        required=True
                    ),
                ]
            )
        )

    async def export(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        fp = BytesIO(bytes(json.dumps(self.message_data, indent=4), 'utf-8'))
        await inter.response.send_message(file=disnake.File(fp=fp, filename="skin.json"), ephemeral=True)

    async def import_(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        await inter.response.send_modal(
            ViewModal(
                view=self, title="Nh·∫≠p giao di·ªán", custom_id="skin_editor_import_skin",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.long,
                        label="M√£ giao di·ªán (JSON):",
                        custom_id="skin",
                        max_length=2000,
                        required=True
                    )
                ]
            )
        )

    async def save(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        await inter.response.send_modal(
            ViewModal(
                view=self, title="Nh·∫≠p t√™n c·ªßa giao di·ªán", custom_id="skin_editor_save",
                components=[
                    disnake.ui.TextInput(
                        style=disnake.TextInputStyle.short,
                        label="T√™n:",
                        custom_id="skin_name",
                        value=self.skin_selected.replace("> css: ", "", 1).replace("> cs: ", "", 1),
                        max_length=15,
                        required=True
                    )
                ]
            )
        )

    async def delete_skin(self, inter: disnake.MessageInteraction):

        self.ctx = inter

        await inter.response.defer()

        self.global_data = await self.bot.get_global_data(id_=inter.guild_id, db_name=DBModel.guilds)

        if self.skin_selected.startswith("> cs:"):
            try:
                del self.global_data["custom_skins"][self.skin_selected[6:]]
            except KeyError:
                await inter.send(f'**Giao di·ªán {self.skin_selected[6:]} N√≥ kh√¥ng c√≤n t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu....**', ephemeral=True)
                return

        elif self.skin_selected.startswith("> css:"):
            try:
                del self.global_data["custom_skins_static"][self.skin_selected[7:]]
            except KeyError:
                await inter.send(f'**Giao di·ªán {self.skin_selected[7:]} N√≥ kh√¥ng c√≤n t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu..**', ephemeral=True)
                return

        await self.bot.update_global_data(id_=inter.guild_id, data=self.global_data, db_name=DBModel.guilds)

        self.mode = "select"
        self.skin_selected = ""
        self.update_components()

        await inter.edit_original_message(view=self, **self.build_embeds())

    async def back(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        self.mode = "select"
        self.skin_selected = ""
        self.message_data = {}
        self.update_components()
        await self.update_message(inter)

    async def update_message(self, inter: disnake.MessageInteraction):
        self.ctx = inter
        try:
            if isinstance(self.ctx, CustomContext):
                await inter.response.edit_message(view=self, **self.build_embeds())
            elif not inter.response.is_done():
                await inter.response.edit_message(view=self, **self.build_embeds())
            else:
                await inter.edit_original_message(view=self, **self.build_embeds())
        except Exception as e:
            traceback.print_exc()
            await inter.send(f"**ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω tin nh·∫Øn:** ```py\n{repr(e)}```")

    async def modal_handler(self, inter: disnake.ModalInteraction):

        if inter.custom_id == "skin_editor_message_content":
            self.ctx = inter
            self.message_data["content"] = inter.text_values["message_content"]

        elif inter.custom_id == "skin_editor_add_embed":
            self.ctx = inter

            e = disnake.Embed(
                title=inter.text_values["skin_embed_title"],
                description=inter.text_values["skin_embed_description"],
            ).set_image(url=inter.text_values["image_url"]).set_thumbnail(inter.text_values["thumbnail_url"]).\
                to_dict()

            e["color"] = inter.text_values["skin_embed_color"].strip("#")

            self.message_data["embeds"].append(e)
            self.embed_index = len(self.message_data["embeds"]) - 1

        elif inter.custom_id == "skin_editor_edit_embed":

            self.ctx = inter

            self.message_data["embeds"][self.embed_index]["title"] = inter.text_values["skin_embed_title"]
            self.message_data["embeds"][self.embed_index]["description"] = inter.text_values["skin_embed_description"]

            if not inter.text_values["image_url"]:
                try:
                    del self.message_data["embeds"][self.embed_index]["image"]
                except KeyError:
                    pass
            else:
                self.message_data["embeds"][self.embed_index]["image"] = {"url": inter.text_values["image_url"]}

            if not inter.text_values["thumbnail_url"]:
                try:
                    del self.message_data["embeds"][self.embed_index]["thumbnail"]
                except KeyError:
                    pass
            else:
                self.message_data["embeds"][self.embed_index]["thumbnail"] = {"url": inter.text_values["thumbnail_url"]}

            self.message_data["embeds"][self.embed_index]["color"] = inter.text_values["skin_embed_color"].strip("#")

        elif inter.custom_id == "skin_editor_add_field":

            self.ctx = inter

            if not self.message_data["embeds"][self.embed_index].get("fields"):
                self.message_data["embeds"][self.embed_index]["fields"] = [{"name": inter.text_values["add_field_name"], "value": inter.text_values["add_field_value"]}]
            else:
                self.message_data["embeds"][self.embed_index]["fields"].append({"name": inter.text_values["add_field_name"], "value": inter.text_values["add_field_value"]})

            self.embed_field_index = len(self.message_data["embeds"][self.embed_index]["fields"]) - 1

        elif inter.custom_id == "skin_editor_edit_field":
            self.ctx = inter
            self.message_data["embeds"][self.embed_index]["fields"][self.embed_field_index] = {"name":inter.text_values["edit_field_name"], "value":inter.text_values["edit_field_value"]}

        elif inter.custom_id == "skin_editor_set_authorfooter":

            self.ctx = inter

            if not inter.text_values["footer_text"]:
                try:
                    del self.message_data["embeds"][self.embed_index]["footer"]
                except KeyError:
                    pass
            else:
                self.message_data["embeds"][self.embed_index]["footer"] = {
                    "text": inter.text_values["footer_text"],
                    "icon_url": inter.text_values["footer_icon_url"]
                }

            if not inter.text_values["set_author_name"]:
                try:
                    del self.message_data["embeds"][self.embed_index]["author"]
                except KeyError:
                    pass
            else:
                self.message_data["embeds"][self.embed_index]["author"] = {
                    "name": inter.text_values["set_author_name"],
                    "url": inter.text_values["set_author_url"],
                    "icon_url": inter.text_values["set_author_icon"],
                }

        elif inter.custom_id == "skin_editor_setup_queue":
            self.ctx = inter
            self.message_data["queue_format"] = inter.text_values["queue_format"]
            try:
                self.message_data["queue_max_entries"] = int(inter.text_values["queue_max_entries"])
            except TypeError:
                pass

        elif inter.custom_id == "skin_editor_import_skin":

            self.ctx = inter

            try:
                info = json.loads(inter.text_values["skin"])
            except Exception as e:
                await inter.send(f"**ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω giao di·ªán c·ªßa b·∫°n:** ```py\n{repr(e)}```", ephemeral=True)
                return

            try:
                if len(str(info["queue_max_entries"])) > 2:
                    info["queue_max_entries"] = 7
            except:
                pass

            try:
                if not isinstance(info["queue_format"], str):
                    info["queue_format"] = self.message_data["queue_format"]
            except KeyError:
                pass

            try:
                self.message_data["embeds"] = info["embeds"]
            except KeyError:
                pass
            try:
                self.message_data["content"] = info["content"]
            except KeyError:
                pass
            try:
                self.message_data["queue_format"] = info["queue_format"]
            except KeyError:
                pass
            try:
                self.message_data["queue_max_entries"] = info["queue_max_entries"]
            except KeyError:
                pass

            self.embed_index = 0
            self.embed_field_index = 0

        elif inter.custom_id == "skin_editor_save":

            view = SkinSettingsButton(self.ctx.author, timeout=30)
            view.controller_enabled = self.message_data.get("controller_enabled", True)
            await inter.send("**Ch·ªçn ch·∫ø ƒë·ªô tr√¨nh ph√°t s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng cho giao di·ªán.**", view=view, ephemeral=True)
            await view.wait()

            if view.mode is None:
                await inter.edit_original_message("Tempo esgotado!", components=[])
                return

            self.message_data["controller_enabled"] = view.controller_enabled

            if view.inter:
                await view.inter.response.defer(ephemeral=True)

            self.global_data = await self.bot.get_global_data(self.ctx.guild_id, db_name=DBModel.guilds)

            modal_skin_name = inter.text_values["skin_name"].strip()

            skin_name = self.skin_selected.replace("> css: ", "", 1).replace("> cs: ", "", 1)

            if modal_skin_name != skin_name:
                try:
                    del self.global_data[view.mode][skin_name]
                except KeyError:
                    pass

            self.global_data[view.mode][modal_skin_name] = b64encode(pickle.dumps(self.message_data)).decode('utf-8')

            await self.bot.update_global_data(id_=inter.guild_id, data=self.global_data, db_name=DBModel.guilds)

            for bot in self.bot.pool.bots:

                try:
                    player = bot.music.players[inter.guild_id]
                except KeyError:
                    continue

                global_data = self.global_data.copy()

                for n, s in global_data["custom_skins"].items():
                    if isinstance(s, str):
                        global_data["custom_skins"][n] = pickle.loads(b64decode(s))

                for n, s in global_data["custom_skins_static"].items():
                    if isinstance(s, str):
                        global_data["custom_skins_static"][n] = pickle.loads(b64decode(s))

                player.custom_skin_data = global_data["custom_skins"]
                player.custom_skin_static_data = global_data["custom_skins_static"]
                player.setup_features()
                player.setup_hints()
                player.process_hint()

            try:
                cmd = f"</change_skin:" + str(self.bot.pool.controller_bot.get_global_command_named("change_skin",
                                                                                             cmd_type=disnake.ApplicationCommandType.chat_input).id) + ">"
            except AttributeError:
                cmd = "/change_skin"

            try:
                guild_prefix = self.bot.pool.guild_prefix_cache[self.ctx.guild_id]
            except KeyError:
                guild_prefix = self.global_data.get("prefix")

            if not guild_prefix:
                guild_prefix = self.bot.config.get("DEFAULT_PREFIX") or "!!"

            if not view.inter:
                view.inter = inter

            await view.inter.edit_original_message("**Giao di·ªán ƒë√£ ƒë∆∞·ª£c l∆∞u/ch·ªânh s·ª≠a th√†nh c√¥ng!**\n"
                                                    f"B·∫°n c√≥ th·ªÉ √°p d·ª•ng n√≥ b·∫±ng l·ªánh {cmd} ou {guild_prefix}skin",
                                                   view=None)

            self.skin_selected = ("> cs: " if view.mode == "custom_skins" else "> css: ") + modal_skin_name

            self.update_components()

            if isinstance(self.ctx, CustomContext):
                await self.message.edit(view=self, **self.build_embeds())
            else:
                await self.ctx.edit_original_message(view=self, **self.build_embeds())
            return

        self.update_components()
        await self.update_message(inter)
